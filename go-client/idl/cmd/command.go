// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package cmd

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - Cmd
//  - Arguments
type Command struct {
  Cmd string `thrift:"cmd,1" db:"cmd" json:"cmd"`
  Arguments []string `thrift:"arguments,2" db:"arguments" json:"arguments"`
}

func NewCommand() *Command {
  return &Command{}
}


func (p *Command) GetCmd() string {
  return p.Cmd
}

func (p *Command) GetArguments() []string {
  return p.Arguments
}
func (p *Command) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Command)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Cmd = v
}
  return nil
}

func (p *Command)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Arguments =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Arguments = append(p.Arguments, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Command) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "command"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Command) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cmd", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cmd: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Cmd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cmd (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cmd: ", p), err) }
  return err
}

func (p *Command) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "arguments", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:arguments: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Arguments)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Arguments {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:arguments: ", p), err) }
  return err
}

func (p *Command) Equals(other *Command) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Cmd != other.Cmd { return false }
  if len(p.Arguments) != len(other.Arguments) { return false }
  for i, _tgt := range p.Arguments {
    _src1 := other.Arguments[i]
    if _tgt != _src1 { return false }
  }
  return true
}

func (p *Command) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Command(%+v)", *p)
}

func (p *Command) Validate() error {
  return nil
}
type RemoteCmdService interface {
  // Parameters:
  //  - Cmd
  CallCommand(ctx context.Context, cmd *Command) (_r string, _err error)
}

type RemoteCmdServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewRemoteCmdServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RemoteCmdServiceClient {
  return &RemoteCmdServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewRemoteCmdServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RemoteCmdServiceClient {
  return &RemoteCmdServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRemoteCmdServiceClient(c thrift.TClient) *RemoteCmdServiceClient {
  return &RemoteCmdServiceClient{
    c: c,
  }
}

func (p *RemoteCmdServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *RemoteCmdServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *RemoteCmdServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Cmd
func (p *RemoteCmdServiceClient) CallCommand(ctx context.Context, cmd *Command) (_r string, _err error) {
  var _args2 RemoteCmdServiceCallCommandArgs
  _args2.Cmd = cmd
  var _result4 RemoteCmdServiceCallCommandResult
  var _meta3 thrift.ResponseMeta
  _meta3, _err = p.Client_().Call(ctx, "callCommand", &_args2, &_result4)
  p.SetLastResponseMeta_(_meta3)
  if _err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

type RemoteCmdServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RemoteCmdService
}

func (p *RemoteCmdServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RemoteCmdServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RemoteCmdServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRemoteCmdServiceProcessor(handler RemoteCmdService) *RemoteCmdServiceProcessor {

  self5 := &RemoteCmdServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self5.processorMap["callCommand"] = &remoteCmdServiceProcessorCallCommand{handler:handler}
return self5
}

func (p *RemoteCmdServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x6 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x6.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x6

}

type remoteCmdServiceProcessorCallCommand struct {
  handler RemoteCmdService
}

func (p *remoteCmdServiceProcessorCallCommand) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err7 error
  args := RemoteCmdServiceCallCommandArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "callCommand", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RemoteCmdServiceCallCommandResult{}
  if retval, err2 := p.handler.CallCommand(ctx, args.Cmd); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc8 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing callCommand: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "callCommand", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err7 = thrift.WrapTException(err2)
    }
    if err2 := _exc8.Write(ctx, oprot); _write_err7 == nil && err2 != nil {
      _write_err7 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err7 == nil && err2 != nil {
      _write_err7 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err7 == nil && err2 != nil {
      _write_err7 = thrift.WrapTException(err2)
    }
    if _write_err7 != nil {
      return false, thrift.WrapTException(_write_err7)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "callCommand", thrift.REPLY, seqId); err2 != nil {
    _write_err7 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err7 == nil && err2 != nil {
    _write_err7 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err7 == nil && err2 != nil {
    _write_err7 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err7 == nil && err2 != nil {
    _write_err7 = thrift.WrapTException(err2)
  }
  if _write_err7 != nil {
    return false, thrift.WrapTException(_write_err7)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Cmd
type RemoteCmdServiceCallCommandArgs struct {
  Cmd *Command `thrift:"cmd,1" db:"cmd" json:"cmd"`
}

func NewRemoteCmdServiceCallCommandArgs() *RemoteCmdServiceCallCommandArgs {
  return &RemoteCmdServiceCallCommandArgs{}
}

var RemoteCmdServiceCallCommandArgs_Cmd_DEFAULT *Command
func (p *RemoteCmdServiceCallCommandArgs) GetCmd() *Command {
  if !p.IsSetCmd() {
    return RemoteCmdServiceCallCommandArgs_Cmd_DEFAULT
  }
return p.Cmd
}
func (p *RemoteCmdServiceCallCommandArgs) IsSetCmd() bool {
  return p.Cmd != nil
}

func (p *RemoteCmdServiceCallCommandArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoteCmdServiceCallCommandArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Cmd = &Command{}
  if err := p.Cmd.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cmd), err)
  }
  return nil
}

func (p *RemoteCmdServiceCallCommandArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "callCommand_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoteCmdServiceCallCommandArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cmd", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cmd: ", p), err) }
  if err := p.Cmd.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cmd), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cmd: ", p), err) }
  return err
}

func (p *RemoteCmdServiceCallCommandArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoteCmdServiceCallCommandArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RemoteCmdServiceCallCommandResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRemoteCmdServiceCallCommandResult() *RemoteCmdServiceCallCommandResult {
  return &RemoteCmdServiceCallCommandResult{}
}

var RemoteCmdServiceCallCommandResult_Success_DEFAULT string
func (p *RemoteCmdServiceCallCommandResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return RemoteCmdServiceCallCommandResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RemoteCmdServiceCallCommandResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RemoteCmdServiceCallCommandResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoteCmdServiceCallCommandResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RemoteCmdServiceCallCommandResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "callCommand_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoteCmdServiceCallCommandResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RemoteCmdServiceCallCommandResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoteCmdServiceCallCommandResult(%+v)", *p)
}


