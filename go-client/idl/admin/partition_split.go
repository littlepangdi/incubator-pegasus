// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package admin

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"github.com/apache/incubator-pegasus/go-client/idl/base"
	"github.com/apache/incubator-pegasus/go-client/idl/replication"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = base.GoUnusedProtection__
var _ = replication.GoUnusedProtection__
type SplitControlType int64
const (
  SplitControlType_PAUSE SplitControlType = 0
  SplitControlType_RESTART SplitControlType = 1
  SplitControlType_CANCEL SplitControlType = 2
)

func (p SplitControlType) String() string {
  switch p {
  case SplitControlType_PAUSE: return "PAUSE"
  case SplitControlType_RESTART: return "RESTART"
  case SplitControlType_CANCEL: return "CANCEL"
  }
  return "<UNSET>"
}

func SplitControlTypeFromString(s string) (SplitControlType, error) {
  switch s {
  case "PAUSE": return SplitControlType_PAUSE, nil 
  case "RESTART": return SplitControlType_RESTART, nil 
  case "CANCEL": return SplitControlType_CANCEL, nil 
  }
  return SplitControlType(0), fmt.Errorf("not a valid SplitControlType string")
}


func SplitControlTypePtr(v SplitControlType) *SplitControlType { return &v }

func (p SplitControlType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SplitControlType) UnmarshalText(text []byte) error {
q, err := SplitControlTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SplitControlType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SplitControlType(v)
return nil
}

func (p * SplitControlType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - AppName
//  - NewPartitionCount_
type StartPartitionSplitRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  NewPartitionCount_ int32 `thrift:"new_partition_count,2" db:"new_partition_count" json:"new_partition_count"`
}

func NewStartPartitionSplitRequest() *StartPartitionSplitRequest {
  return &StartPartitionSplitRequest{}
}


func (p *StartPartitionSplitRequest) GetAppName() string {
  return p.AppName
}

func (p *StartPartitionSplitRequest) GetNewPartitionCount_() int32 {
  return p.NewPartitionCount_
}
func (p *StartPartitionSplitRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StartPartitionSplitRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *StartPartitionSplitRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewPartitionCount_ = v
}
  return nil
}

func (p *StartPartitionSplitRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_partition_split_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StartPartitionSplitRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *StartPartitionSplitRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_partition_count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_partition_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NewPartitionCount_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_partition_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_partition_count: ", p), err) }
  return err
}

func (p *StartPartitionSplitRequest) Equals(other *StartPartitionSplitRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if p.NewPartitionCount_ != other.NewPartitionCount_ { return false }
  return true
}

func (p *StartPartitionSplitRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StartPartitionSplitRequest(%+v)", *p)
}

func (p *StartPartitionSplitRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - HintMsg
type StartPartitionSplitResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  HintMsg string `thrift:"hint_msg,2" db:"hint_msg" json:"hint_msg"`
}

func NewStartPartitionSplitResponse() *StartPartitionSplitResponse {
  return &StartPartitionSplitResponse{}
}

var StartPartitionSplitResponse_Err_DEFAULT *base.ErrorCode
func (p *StartPartitionSplitResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return StartPartitionSplitResponse_Err_DEFAULT
  }
return p.Err
}

func (p *StartPartitionSplitResponse) GetHintMsg() string {
  return p.HintMsg
}
func (p *StartPartitionSplitResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *StartPartitionSplitResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StartPartitionSplitResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *StartPartitionSplitResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HintMsg = v
}
  return nil
}

func (p *StartPartitionSplitResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_partition_split_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StartPartitionSplitResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *StartPartitionSplitResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hint_msg: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hint_msg: ", p), err) }
  return err
}

func (p *StartPartitionSplitResponse) Equals(other *StartPartitionSplitResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.HintMsg != other.HintMsg { return false }
  return true
}

func (p *StartPartitionSplitResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StartPartitionSplitResponse(%+v)", *p)
}

func (p *StartPartitionSplitResponse) Validate() error {
  return nil
}
// Attributes:
//  - AppName
//  - ControlType
//  - ParentPidx
//  - OldPartitionCount
type ControlSplitRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  ControlType SplitControlType `thrift:"control_type,2" db:"control_type" json:"control_type"`
  ParentPidx int32 `thrift:"parent_pidx,3" db:"parent_pidx" json:"parent_pidx"`
  OldPartitionCount *int32 `thrift:"old_partition_count,4" db:"old_partition_count" json:"old_partition_count,omitempty"`
}

func NewControlSplitRequest() *ControlSplitRequest {
  return &ControlSplitRequest{}
}


func (p *ControlSplitRequest) GetAppName() string {
  return p.AppName
}

func (p *ControlSplitRequest) GetControlType() SplitControlType {
  return p.ControlType
}

func (p *ControlSplitRequest) GetParentPidx() int32 {
  return p.ParentPidx
}
var ControlSplitRequest_OldPartitionCount_DEFAULT int32
func (p *ControlSplitRequest) GetOldPartitionCount() int32 {
  if !p.IsSetOldPartitionCount() {
    return ControlSplitRequest_OldPartitionCount_DEFAULT
  }
return *p.OldPartitionCount
}
func (p *ControlSplitRequest) IsSetOldPartitionCount() bool {
  return p.OldPartitionCount != nil
}

func (p *ControlSplitRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControlSplitRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *ControlSplitRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := SplitControlType(v)
  p.ControlType = temp
}
  return nil
}

func (p *ControlSplitRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ParentPidx = v
}
  return nil
}

func (p *ControlSplitRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OldPartitionCount = &v
}
  return nil
}

func (p *ControlSplitRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "control_split_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControlSplitRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *ControlSplitRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "control_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:control_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ControlType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.control_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:control_type: ", p), err) }
  return err
}

func (p *ControlSplitRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_pidx", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parent_pidx: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ParentPidx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_pidx (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parent_pidx: ", p), err) }
  return err
}

func (p *ControlSplitRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOldPartitionCount() {
    if err := oprot.WriteFieldBegin(ctx, "old_partition_count", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:old_partition_count: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.OldPartitionCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.old_partition_count (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:old_partition_count: ", p), err) }
  }
  return err
}

func (p *ControlSplitRequest) Equals(other *ControlSplitRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if p.ControlType != other.ControlType { return false }
  if p.ParentPidx != other.ParentPidx { return false }
  if p.OldPartitionCount != other.OldPartitionCount {
    if p.OldPartitionCount == nil || other.OldPartitionCount == nil {
      return false
    }
    if (*p.OldPartitionCount) != (*other.OldPartitionCount) { return false }
  }
  return true
}

func (p *ControlSplitRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControlSplitRequest(%+v)", *p)
}

func (p *ControlSplitRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - HintMsg
type ControlSplitResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  HintMsg *string `thrift:"hint_msg,2" db:"hint_msg" json:"hint_msg,omitempty"`
}

func NewControlSplitResponse() *ControlSplitResponse {
  return &ControlSplitResponse{}
}

var ControlSplitResponse_Err_DEFAULT *base.ErrorCode
func (p *ControlSplitResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ControlSplitResponse_Err_DEFAULT
  }
return p.Err
}
var ControlSplitResponse_HintMsg_DEFAULT string
func (p *ControlSplitResponse) GetHintMsg() string {
  if !p.IsSetHintMsg() {
    return ControlSplitResponse_HintMsg_DEFAULT
  }
return *p.HintMsg
}
func (p *ControlSplitResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ControlSplitResponse) IsSetHintMsg() bool {
  return p.HintMsg != nil
}

func (p *ControlSplitResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControlSplitResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ControlSplitResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HintMsg = &v
}
  return nil
}

func (p *ControlSplitResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "control_split_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControlSplitResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ControlSplitResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHintMsg() {
    if err := oprot.WriteFieldBegin(ctx, "hint_msg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hint_msg: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HintMsg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hint_msg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hint_msg: ", p), err) }
  }
  return err
}

func (p *ControlSplitResponse) Equals(other *ControlSplitResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.HintMsg != other.HintMsg {
    if p.HintMsg == nil || other.HintMsg == nil {
      return false
    }
    if (*p.HintMsg) != (*other.HintMsg) { return false }
  }
  return true
}

func (p *ControlSplitResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControlSplitResponse(%+v)", *p)
}

func (p *ControlSplitResponse) Validate() error {
  return nil
}
// Attributes:
//  - AppName
type QuerySplitRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
}

func NewQuerySplitRequest() *QuerySplitRequest {
  return &QuerySplitRequest{}
}


func (p *QuerySplitRequest) GetAppName() string {
  return p.AppName
}
func (p *QuerySplitRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QuerySplitRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *QuerySplitRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_split_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QuerySplitRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *QuerySplitRequest) Equals(other *QuerySplitRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  return true
}

func (p *QuerySplitRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QuerySplitRequest(%+v)", *p)
}

func (p *QuerySplitRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - NewPartitionCount_
//  - Status
//  - HintMsg
type QuerySplitResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  NewPartitionCount_ int32 `thrift:"new_partition_count,2" db:"new_partition_count" json:"new_partition_count"`
  Status map[int32]SplitStatus `thrift:"status,3" db:"status" json:"status"`
  HintMsg *string `thrift:"hint_msg,4" db:"hint_msg" json:"hint_msg,omitempty"`
}

func NewQuerySplitResponse() *QuerySplitResponse {
  return &QuerySplitResponse{}
}

var QuerySplitResponse_Err_DEFAULT *base.ErrorCode
func (p *QuerySplitResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return QuerySplitResponse_Err_DEFAULT
  }
return p.Err
}

func (p *QuerySplitResponse) GetNewPartitionCount_() int32 {
  return p.NewPartitionCount_
}

func (p *QuerySplitResponse) GetStatus() map[int32]SplitStatus {
  return p.Status
}
var QuerySplitResponse_HintMsg_DEFAULT string
func (p *QuerySplitResponse) GetHintMsg() string {
  if !p.IsSetHintMsg() {
    return QuerySplitResponse_HintMsg_DEFAULT
  }
return *p.HintMsg
}
func (p *QuerySplitResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *QuerySplitResponse) IsSetHintMsg() bool {
  return p.HintMsg != nil
}

func (p *QuerySplitResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QuerySplitResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *QuerySplitResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewPartitionCount_ = v
}
  return nil
}

func (p *QuerySplitResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]SplitStatus, size)
  p.Status =  tMap
  for i := 0; i < size; i ++ {
var _key0 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 SplitStatus
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SplitStatus(v)
    _val1 = temp
}
    p.Status[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *QuerySplitResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.HintMsg = &v
}
  return nil
}

func (p *QuerySplitResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_split_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QuerySplitResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *QuerySplitResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_partition_count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_partition_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NewPartitionCount_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_partition_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_partition_count: ", p), err) }
  return err
}

func (p *QuerySplitResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.I32, len(p.Status)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Status {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *QuerySplitResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHintMsg() {
    if err := oprot.WriteFieldBegin(ctx, "hint_msg", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hint_msg: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HintMsg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hint_msg (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hint_msg: ", p), err) }
  }
  return err
}

func (p *QuerySplitResponse) Equals(other *QuerySplitResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.NewPartitionCount_ != other.NewPartitionCount_ { return false }
  if len(p.Status) != len(other.Status) { return false }
  for k, _tgt := range p.Status {
    _src2 := other.Status[k]
    if _tgt != _src2 { return false }
  }
  if p.HintMsg != other.HintMsg {
    if p.HintMsg == nil || other.HintMsg == nil {
      return false
    }
    if (*p.HintMsg) != (*other.HintMsg) { return false }
  }
  return true
}

func (p *QuerySplitResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QuerySplitResponse(%+v)", *p)
}

func (p *QuerySplitResponse) Validate() error {
  return nil
}
// Attributes:
//  - ParentGpid
//  - ChildGpid
//  - ChildBallot
//  - ChildAddress
type NotifyCatchUpRequest struct {
  ParentGpid *base.Gpid `thrift:"parent_gpid,1" db:"parent_gpid" json:"parent_gpid"`
  ChildGpid *base.Gpid `thrift:"child_gpid,2" db:"child_gpid" json:"child_gpid"`
  ChildBallot int64 `thrift:"child_ballot,3" db:"child_ballot" json:"child_ballot"`
  ChildAddress *base.RPCAddress `thrift:"child_address,4" db:"child_address" json:"child_address"`
}

func NewNotifyCatchUpRequest() *NotifyCatchUpRequest {
  return &NotifyCatchUpRequest{}
}

var NotifyCatchUpRequest_ParentGpid_DEFAULT *base.Gpid
func (p *NotifyCatchUpRequest) GetParentGpid() *base.Gpid {
  if !p.IsSetParentGpid() {
    return NotifyCatchUpRequest_ParentGpid_DEFAULT
  }
return p.ParentGpid
}
var NotifyCatchUpRequest_ChildGpid_DEFAULT *base.Gpid
func (p *NotifyCatchUpRequest) GetChildGpid() *base.Gpid {
  if !p.IsSetChildGpid() {
    return NotifyCatchUpRequest_ChildGpid_DEFAULT
  }
return p.ChildGpid
}

func (p *NotifyCatchUpRequest) GetChildBallot() int64 {
  return p.ChildBallot
}
var NotifyCatchUpRequest_ChildAddress_DEFAULT *base.RPCAddress
func (p *NotifyCatchUpRequest) GetChildAddress() *base.RPCAddress {
  if !p.IsSetChildAddress() {
    return NotifyCatchUpRequest_ChildAddress_DEFAULT
  }
return p.ChildAddress
}
func (p *NotifyCatchUpRequest) IsSetParentGpid() bool {
  return p.ParentGpid != nil
}

func (p *NotifyCatchUpRequest) IsSetChildGpid() bool {
  return p.ChildGpid != nil
}

func (p *NotifyCatchUpRequest) IsSetChildAddress() bool {
  return p.ChildAddress != nil
}

func (p *NotifyCatchUpRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NotifyCatchUpRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ParentGpid = &base.Gpid{}
  if err := p.ParentGpid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ParentGpid), err)
  }
  return nil
}

func (p *NotifyCatchUpRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.ChildGpid = &base.Gpid{}
  if err := p.ChildGpid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChildGpid), err)
  }
  return nil
}

func (p *NotifyCatchUpRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChildBallot = v
}
  return nil
}

func (p *NotifyCatchUpRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.ChildAddress = &base.RPCAddress{}
  if err := p.ChildAddress.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChildAddress), err)
  }
  return nil
}

func (p *NotifyCatchUpRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notify_catch_up_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotifyCatchUpRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_gpid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent_gpid: ", p), err) }
  if err := p.ParentGpid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ParentGpid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent_gpid: ", p), err) }
  return err
}

func (p *NotifyCatchUpRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "child_gpid", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:child_gpid: ", p), err) }
  if err := p.ChildGpid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChildGpid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:child_gpid: ", p), err) }
  return err
}

func (p *NotifyCatchUpRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "child_ballot", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:child_ballot: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ChildBallot)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.child_ballot (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:child_ballot: ", p), err) }
  return err
}

func (p *NotifyCatchUpRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "child_address", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:child_address: ", p), err) }
  if err := p.ChildAddress.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChildAddress), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:child_address: ", p), err) }
  return err
}

func (p *NotifyCatchUpRequest) Equals(other *NotifyCatchUpRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.ParentGpid.Equals(other.ParentGpid) { return false }
  if !p.ChildGpid.Equals(other.ChildGpid) { return false }
  if p.ChildBallot != other.ChildBallot { return false }
  if !p.ChildAddress.Equals(other.ChildAddress) { return false }
  return true
}

func (p *NotifyCatchUpRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotifyCatchUpRequest(%+v)", *p)
}

func (p *NotifyCatchUpRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
type NotifyCacthUpResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
}

func NewNotifyCacthUpResponse() *NotifyCacthUpResponse {
  return &NotifyCacthUpResponse{}
}

var NotifyCacthUpResponse_Err_DEFAULT *base.ErrorCode
func (p *NotifyCacthUpResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return NotifyCacthUpResponse_Err_DEFAULT
  }
return p.Err
}
func (p *NotifyCacthUpResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *NotifyCacthUpResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NotifyCacthUpResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *NotifyCacthUpResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notify_cacth_up_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotifyCacthUpResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *NotifyCacthUpResponse) Equals(other *NotifyCacthUpResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  return true
}

func (p *NotifyCacthUpResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotifyCacthUpResponse(%+v)", *p)
}

func (p *NotifyCacthUpResponse) Validate() error {
  return nil
}
// Attributes:
//  - TargetAddress
//  - NewPartitionCount_
//  - ChildPid
//  - Ballot
type UpdateChildGroupPartitionCountRequest struct {
  TargetAddress *base.RPCAddress `thrift:"target_address,1" db:"target_address" json:"target_address"`
  NewPartitionCount_ int32 `thrift:"new_partition_count,2" db:"new_partition_count" json:"new_partition_count"`
  ChildPid *base.Gpid `thrift:"child_pid,3" db:"child_pid" json:"child_pid"`
  Ballot int64 `thrift:"ballot,4" db:"ballot" json:"ballot"`
}

func NewUpdateChildGroupPartitionCountRequest() *UpdateChildGroupPartitionCountRequest {
  return &UpdateChildGroupPartitionCountRequest{}
}

var UpdateChildGroupPartitionCountRequest_TargetAddress_DEFAULT *base.RPCAddress
func (p *UpdateChildGroupPartitionCountRequest) GetTargetAddress() *base.RPCAddress {
  if !p.IsSetTargetAddress() {
    return UpdateChildGroupPartitionCountRequest_TargetAddress_DEFAULT
  }
return p.TargetAddress
}

func (p *UpdateChildGroupPartitionCountRequest) GetNewPartitionCount_() int32 {
  return p.NewPartitionCount_
}
var UpdateChildGroupPartitionCountRequest_ChildPid_DEFAULT *base.Gpid
func (p *UpdateChildGroupPartitionCountRequest) GetChildPid() *base.Gpid {
  if !p.IsSetChildPid() {
    return UpdateChildGroupPartitionCountRequest_ChildPid_DEFAULT
  }
return p.ChildPid
}

func (p *UpdateChildGroupPartitionCountRequest) GetBallot() int64 {
  return p.Ballot
}
func (p *UpdateChildGroupPartitionCountRequest) IsSetTargetAddress() bool {
  return p.TargetAddress != nil
}

func (p *UpdateChildGroupPartitionCountRequest) IsSetChildPid() bool {
  return p.ChildPid != nil
}

func (p *UpdateChildGroupPartitionCountRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateChildGroupPartitionCountRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.TargetAddress = &base.RPCAddress{}
  if err := p.TargetAddress.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TargetAddress), err)
  }
  return nil
}

func (p *UpdateChildGroupPartitionCountRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewPartitionCount_ = v
}
  return nil
}

func (p *UpdateChildGroupPartitionCountRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.ChildPid = &base.Gpid{}
  if err := p.ChildPid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChildPid), err)
  }
  return nil
}

func (p *UpdateChildGroupPartitionCountRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Ballot = v
}
  return nil
}

func (p *UpdateChildGroupPartitionCountRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_child_group_partition_count_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateChildGroupPartitionCountRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "target_address", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:target_address: ", p), err) }
  if err := p.TargetAddress.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TargetAddress), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:target_address: ", p), err) }
  return err
}

func (p *UpdateChildGroupPartitionCountRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_partition_count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_partition_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NewPartitionCount_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_partition_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_partition_count: ", p), err) }
  return err
}

func (p *UpdateChildGroupPartitionCountRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "child_pid", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:child_pid: ", p), err) }
  if err := p.ChildPid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChildPid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:child_pid: ", p), err) }
  return err
}

func (p *UpdateChildGroupPartitionCountRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ballot", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ballot: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Ballot)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ballot (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ballot: ", p), err) }
  return err
}

func (p *UpdateChildGroupPartitionCountRequest) Equals(other *UpdateChildGroupPartitionCountRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.TargetAddress.Equals(other.TargetAddress) { return false }
  if p.NewPartitionCount_ != other.NewPartitionCount_ { return false }
  if !p.ChildPid.Equals(other.ChildPid) { return false }
  if p.Ballot != other.Ballot { return false }
  return true
}

func (p *UpdateChildGroupPartitionCountRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateChildGroupPartitionCountRequest(%+v)", *p)
}

func (p *UpdateChildGroupPartitionCountRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
type UpdateChildGroupPartitionCountResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
}

func NewUpdateChildGroupPartitionCountResponse() *UpdateChildGroupPartitionCountResponse {
  return &UpdateChildGroupPartitionCountResponse{}
}

var UpdateChildGroupPartitionCountResponse_Err_DEFAULT *base.ErrorCode
func (p *UpdateChildGroupPartitionCountResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return UpdateChildGroupPartitionCountResponse_Err_DEFAULT
  }
return p.Err
}
func (p *UpdateChildGroupPartitionCountResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *UpdateChildGroupPartitionCountResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateChildGroupPartitionCountResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *UpdateChildGroupPartitionCountResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_child_group_partition_count_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateChildGroupPartitionCountResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *UpdateChildGroupPartitionCountResponse) Equals(other *UpdateChildGroupPartitionCountResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  return true
}

func (p *UpdateChildGroupPartitionCountResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateChildGroupPartitionCountResponse(%+v)", *p)
}

func (p *UpdateChildGroupPartitionCountResponse) Validate() error {
  return nil
}
// Attributes:
//  - App
//  - ParentConfig
//  - ChildConfig
//  - PrimaryAddress
type RegisterChildRequest struct {
  App *replication.AppInfo `thrift:"app,1" db:"app" json:"app"`
  ParentConfig *replication.PartitionConfiguration `thrift:"parent_config,2" db:"parent_config" json:"parent_config"`
  ChildConfig *replication.PartitionConfiguration `thrift:"child_config,3" db:"child_config" json:"child_config"`
  PrimaryAddress *base.RPCAddress `thrift:"primary_address,4" db:"primary_address" json:"primary_address"`
}

func NewRegisterChildRequest() *RegisterChildRequest {
  return &RegisterChildRequest{}
}

var RegisterChildRequest_App_DEFAULT *replication.AppInfo
func (p *RegisterChildRequest) GetApp() *replication.AppInfo {
  if !p.IsSetApp() {
    return RegisterChildRequest_App_DEFAULT
  }
return p.App
}
var RegisterChildRequest_ParentConfig_DEFAULT *replication.PartitionConfiguration
func (p *RegisterChildRequest) GetParentConfig() *replication.PartitionConfiguration {
  if !p.IsSetParentConfig() {
    return RegisterChildRequest_ParentConfig_DEFAULT
  }
return p.ParentConfig
}
var RegisterChildRequest_ChildConfig_DEFAULT *replication.PartitionConfiguration
func (p *RegisterChildRequest) GetChildConfig() *replication.PartitionConfiguration {
  if !p.IsSetChildConfig() {
    return RegisterChildRequest_ChildConfig_DEFAULT
  }
return p.ChildConfig
}
var RegisterChildRequest_PrimaryAddress_DEFAULT *base.RPCAddress
func (p *RegisterChildRequest) GetPrimaryAddress() *base.RPCAddress {
  if !p.IsSetPrimaryAddress() {
    return RegisterChildRequest_PrimaryAddress_DEFAULT
  }
return p.PrimaryAddress
}
func (p *RegisterChildRequest) IsSetApp() bool {
  return p.App != nil
}

func (p *RegisterChildRequest) IsSetParentConfig() bool {
  return p.ParentConfig != nil
}

func (p *RegisterChildRequest) IsSetChildConfig() bool {
  return p.ChildConfig != nil
}

func (p *RegisterChildRequest) IsSetPrimaryAddress() bool {
  return p.PrimaryAddress != nil
}

func (p *RegisterChildRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegisterChildRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.App = &replication.AppInfo{
  Status: 0,

  InitPartitionCount: -1,
}
  if err := p.App.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.App), err)
  }
  return nil
}

func (p *RegisterChildRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.ParentConfig = &replication.PartitionConfiguration{}
  if err := p.ParentConfig.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ParentConfig), err)
  }
  return nil
}

func (p *RegisterChildRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.ChildConfig = &replication.PartitionConfiguration{}
  if err := p.ChildConfig.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChildConfig), err)
  }
  return nil
}

func (p *RegisterChildRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.PrimaryAddress = &base.RPCAddress{}
  if err := p.PrimaryAddress.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PrimaryAddress), err)
  }
  return nil
}

func (p *RegisterChildRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_child_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterChildRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app: ", p), err) }
  if err := p.App.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.App), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app: ", p), err) }
  return err
}

func (p *RegisterChildRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_config", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parent_config: ", p), err) }
  if err := p.ParentConfig.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ParentConfig), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parent_config: ", p), err) }
  return err
}

func (p *RegisterChildRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "child_config", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:child_config: ", p), err) }
  if err := p.ChildConfig.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChildConfig), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:child_config: ", p), err) }
  return err
}

func (p *RegisterChildRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "primary_address", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:primary_address: ", p), err) }
  if err := p.PrimaryAddress.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PrimaryAddress), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:primary_address: ", p), err) }
  return err
}

func (p *RegisterChildRequest) Equals(other *RegisterChildRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.App.Equals(other.App) { return false }
  if !p.ParentConfig.Equals(other.ParentConfig) { return false }
  if !p.ChildConfig.Equals(other.ChildConfig) { return false }
  if !p.PrimaryAddress.Equals(other.PrimaryAddress) { return false }
  return true
}

func (p *RegisterChildRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterChildRequest(%+v)", *p)
}

func (p *RegisterChildRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - App
//  - ParentConfig
//  - ChildConfig
type RegisterChildResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  App *replication.AppInfo `thrift:"app,2" db:"app" json:"app"`
  ParentConfig *replication.PartitionConfiguration `thrift:"parent_config,3" db:"parent_config" json:"parent_config"`
  ChildConfig *replication.PartitionConfiguration `thrift:"child_config,4" db:"child_config" json:"child_config"`
}

func NewRegisterChildResponse() *RegisterChildResponse {
  return &RegisterChildResponse{}
}

var RegisterChildResponse_Err_DEFAULT *base.ErrorCode
func (p *RegisterChildResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return RegisterChildResponse_Err_DEFAULT
  }
return p.Err
}
var RegisterChildResponse_App_DEFAULT *replication.AppInfo
func (p *RegisterChildResponse) GetApp() *replication.AppInfo {
  if !p.IsSetApp() {
    return RegisterChildResponse_App_DEFAULT
  }
return p.App
}
var RegisterChildResponse_ParentConfig_DEFAULT *replication.PartitionConfiguration
func (p *RegisterChildResponse) GetParentConfig() *replication.PartitionConfiguration {
  if !p.IsSetParentConfig() {
    return RegisterChildResponse_ParentConfig_DEFAULT
  }
return p.ParentConfig
}
var RegisterChildResponse_ChildConfig_DEFAULT *replication.PartitionConfiguration
func (p *RegisterChildResponse) GetChildConfig() *replication.PartitionConfiguration {
  if !p.IsSetChildConfig() {
    return RegisterChildResponse_ChildConfig_DEFAULT
  }
return p.ChildConfig
}
func (p *RegisterChildResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *RegisterChildResponse) IsSetApp() bool {
  return p.App != nil
}

func (p *RegisterChildResponse) IsSetParentConfig() bool {
  return p.ParentConfig != nil
}

func (p *RegisterChildResponse) IsSetChildConfig() bool {
  return p.ChildConfig != nil
}

func (p *RegisterChildResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegisterChildResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *RegisterChildResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.App = &replication.AppInfo{
  Status: 0,

  InitPartitionCount: -1,
}
  if err := p.App.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.App), err)
  }
  return nil
}

func (p *RegisterChildResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.ParentConfig = &replication.PartitionConfiguration{}
  if err := p.ParentConfig.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ParentConfig), err)
  }
  return nil
}

func (p *RegisterChildResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.ChildConfig = &replication.PartitionConfiguration{}
  if err := p.ChildConfig.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChildConfig), err)
  }
  return nil
}

func (p *RegisterChildResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_child_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterChildResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *RegisterChildResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:app: ", p), err) }
  if err := p.App.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.App), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:app: ", p), err) }
  return err
}

func (p *RegisterChildResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_config", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parent_config: ", p), err) }
  if err := p.ParentConfig.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ParentConfig), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parent_config: ", p), err) }
  return err
}

func (p *RegisterChildResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "child_config", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:child_config: ", p), err) }
  if err := p.ChildConfig.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChildConfig), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:child_config: ", p), err) }
  return err
}

func (p *RegisterChildResponse) Equals(other *RegisterChildResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if !p.App.Equals(other.App) { return false }
  if !p.ParentConfig.Equals(other.ParentConfig) { return false }
  if !p.ChildConfig.Equals(other.ChildConfig) { return false }
  return true
}

func (p *RegisterChildResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterChildResponse(%+v)", *p)
}

func (p *RegisterChildResponse) Validate() error {
  return nil
}
// Attributes:
//  - AppName
//  - ParentGpid
//  - MetaSplitStatus
//  - PartitionCount
type NotifyStopSplitRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  ParentGpid *base.Gpid `thrift:"parent_gpid,2" db:"parent_gpid" json:"parent_gpid"`
  MetaSplitStatus SplitStatus `thrift:"meta_split_status,3" db:"meta_split_status" json:"meta_split_status"`
  PartitionCount int32 `thrift:"partition_count,4" db:"partition_count" json:"partition_count"`
}

func NewNotifyStopSplitRequest() *NotifyStopSplitRequest {
  return &NotifyStopSplitRequest{}
}


func (p *NotifyStopSplitRequest) GetAppName() string {
  return p.AppName
}
var NotifyStopSplitRequest_ParentGpid_DEFAULT *base.Gpid
func (p *NotifyStopSplitRequest) GetParentGpid() *base.Gpid {
  if !p.IsSetParentGpid() {
    return NotifyStopSplitRequest_ParentGpid_DEFAULT
  }
return p.ParentGpid
}

func (p *NotifyStopSplitRequest) GetMetaSplitStatus() SplitStatus {
  return p.MetaSplitStatus
}

func (p *NotifyStopSplitRequest) GetPartitionCount() int32 {
  return p.PartitionCount
}
func (p *NotifyStopSplitRequest) IsSetParentGpid() bool {
  return p.ParentGpid != nil
}

func (p *NotifyStopSplitRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NotifyStopSplitRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *NotifyStopSplitRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.ParentGpid = &base.Gpid{}
  if err := p.ParentGpid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ParentGpid), err)
  }
  return nil
}

func (p *NotifyStopSplitRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SplitStatus(v)
  p.MetaSplitStatus = temp
}
  return nil
}

func (p *NotifyStopSplitRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PartitionCount = v
}
  return nil
}

func (p *NotifyStopSplitRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notify_stop_split_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotifyStopSplitRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *NotifyStopSplitRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_gpid", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parent_gpid: ", p), err) }
  if err := p.ParentGpid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ParentGpid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parent_gpid: ", p), err) }
  return err
}

func (p *NotifyStopSplitRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "meta_split_status", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:meta_split_status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MetaSplitStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.meta_split_status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:meta_split_status: ", p), err) }
  return err
}

func (p *NotifyStopSplitRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_count", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partition_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_count (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partition_count: ", p), err) }
  return err
}

func (p *NotifyStopSplitRequest) Equals(other *NotifyStopSplitRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if !p.ParentGpid.Equals(other.ParentGpid) { return false }
  if p.MetaSplitStatus != other.MetaSplitStatus { return false }
  if p.PartitionCount != other.PartitionCount { return false }
  return true
}

func (p *NotifyStopSplitRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotifyStopSplitRequest(%+v)", *p)
}

func (p *NotifyStopSplitRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
type NotifyStopSplitResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
}

func NewNotifyStopSplitResponse() *NotifyStopSplitResponse {
  return &NotifyStopSplitResponse{}
}

var NotifyStopSplitResponse_Err_DEFAULT *base.ErrorCode
func (p *NotifyStopSplitResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return NotifyStopSplitResponse_Err_DEFAULT
  }
return p.Err
}
func (p *NotifyStopSplitResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *NotifyStopSplitResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NotifyStopSplitResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *NotifyStopSplitResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notify_stop_split_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotifyStopSplitResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *NotifyStopSplitResponse) Equals(other *NotifyStopSplitResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  return true
}

func (p *NotifyStopSplitResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotifyStopSplitResponse(%+v)", *p)
}

func (p *NotifyStopSplitResponse) Validate() error {
  return nil
}
// Attributes:
//  - AppName
//  - Pid
//  - PartitionCount
type QueryChildStateRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  Pid *base.Gpid `thrift:"pid,2" db:"pid" json:"pid"`
  PartitionCount int32 `thrift:"partition_count,3" db:"partition_count" json:"partition_count"`
}

func NewQueryChildStateRequest() *QueryChildStateRequest {
  return &QueryChildStateRequest{}
}


func (p *QueryChildStateRequest) GetAppName() string {
  return p.AppName
}
var QueryChildStateRequest_Pid_DEFAULT *base.Gpid
func (p *QueryChildStateRequest) GetPid() *base.Gpid {
  if !p.IsSetPid() {
    return QueryChildStateRequest_Pid_DEFAULT
  }
return p.Pid
}

func (p *QueryChildStateRequest) GetPartitionCount() int32 {
  return p.PartitionCount
}
func (p *QueryChildStateRequest) IsSetPid() bool {
  return p.Pid != nil
}

func (p *QueryChildStateRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryChildStateRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *QueryChildStateRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Pid = &base.Gpid{}
  if err := p.Pid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pid), err)
  }
  return nil
}

func (p *QueryChildStateRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartitionCount = v
}
  return nil
}

func (p *QueryChildStateRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_child_state_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryChildStateRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *QueryChildStateRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pid", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pid: ", p), err) }
  if err := p.Pid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pid: ", p), err) }
  return err
}

func (p *QueryChildStateRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partition_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partition_count: ", p), err) }
  return err
}

func (p *QueryChildStateRequest) Equals(other *QueryChildStateRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if !p.Pid.Equals(other.Pid) { return false }
  if p.PartitionCount != other.PartitionCount { return false }
  return true
}

func (p *QueryChildStateRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryChildStateRequest(%+v)", *p)
}

func (p *QueryChildStateRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - PartitionCount
//  - ChildConfig
type QueryChildStateResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  PartitionCount *int32 `thrift:"partition_count,2" db:"partition_count" json:"partition_count,omitempty"`
  ChildConfig *replication.PartitionConfiguration `thrift:"child_config,3" db:"child_config" json:"child_config,omitempty"`
}

func NewQueryChildStateResponse() *QueryChildStateResponse {
  return &QueryChildStateResponse{}
}

var QueryChildStateResponse_Err_DEFAULT *base.ErrorCode
func (p *QueryChildStateResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return QueryChildStateResponse_Err_DEFAULT
  }
return p.Err
}
var QueryChildStateResponse_PartitionCount_DEFAULT int32
func (p *QueryChildStateResponse) GetPartitionCount() int32 {
  if !p.IsSetPartitionCount() {
    return QueryChildStateResponse_PartitionCount_DEFAULT
  }
return *p.PartitionCount
}
var QueryChildStateResponse_ChildConfig_DEFAULT *replication.PartitionConfiguration
func (p *QueryChildStateResponse) GetChildConfig() *replication.PartitionConfiguration {
  if !p.IsSetChildConfig() {
    return QueryChildStateResponse_ChildConfig_DEFAULT
  }
return p.ChildConfig
}
func (p *QueryChildStateResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *QueryChildStateResponse) IsSetPartitionCount() bool {
  return p.PartitionCount != nil
}

func (p *QueryChildStateResponse) IsSetChildConfig() bool {
  return p.ChildConfig != nil
}

func (p *QueryChildStateResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryChildStateResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *QueryChildStateResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PartitionCount = &v
}
  return nil
}

func (p *QueryChildStateResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.ChildConfig = &replication.PartitionConfiguration{}
  if err := p.ChildConfig.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChildConfig), err)
  }
  return nil
}

func (p *QueryChildStateResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_child_state_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryChildStateResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *QueryChildStateResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartitionCount() {
    if err := oprot.WriteFieldBegin(ctx, "partition_count", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partition_count: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PartitionCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.partition_count (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partition_count: ", p), err) }
  }
  return err
}

func (p *QueryChildStateResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetChildConfig() {
    if err := oprot.WriteFieldBegin(ctx, "child_config", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:child_config: ", p), err) }
    if err := p.ChildConfig.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChildConfig), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:child_config: ", p), err) }
  }
  return err
}

func (p *QueryChildStateResponse) Equals(other *QueryChildStateResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.PartitionCount != other.PartitionCount {
    if p.PartitionCount == nil || other.PartitionCount == nil {
      return false
    }
    if (*p.PartitionCount) != (*other.PartitionCount) { return false }
  }
  if !p.ChildConfig.Equals(other.ChildConfig) { return false }
  return true
}

func (p *QueryChildStateResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryChildStateResponse(%+v)", *p)
}

func (p *QueryChildStateResponse) Validate() error {
  return nil
}
