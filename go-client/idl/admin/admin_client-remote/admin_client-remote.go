// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/apache/incubator-pegasus/go-client/idl/base"
	"github.com/apache/incubator-pegasus/go-client/idl/replication"
	"github.com/apache/incubator-pegasus/go-client/idl/admin"
)

var _ = base.GoUnusedProtection__
var _ = replication.GoUnusedProtection__
var _ = admin.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  configuration_create_app_response create_app(configuration_create_app_request req)")
  fmt.Fprintln(os.Stderr, "  configuration_drop_app_response drop_app(configuration_drop_app_request req)")
  fmt.Fprintln(os.Stderr, "  configuration_recall_app_response recall_app(configuration_recall_app_request req)")
  fmt.Fprintln(os.Stderr, "  configuration_list_apps_response list_apps(configuration_list_apps_request req)")
  fmt.Fprintln(os.Stderr, "  duplication_add_response add_duplication(duplication_add_request req)")
  fmt.Fprintln(os.Stderr, "  duplication_query_response query_duplication(duplication_query_request req)")
  fmt.Fprintln(os.Stderr, "  duplication_modify_response modify_duplication(duplication_modify_request req)")
  fmt.Fprintln(os.Stderr, "  query_app_info_response query_app_info(query_app_info_request req)")
  fmt.Fprintln(os.Stderr, "  configuration_update_app_env_response update_app_env(configuration_update_app_env_request req)")
  fmt.Fprintln(os.Stderr, "  configuration_list_nodes_response list_nodes(configuration_list_nodes_request req)")
  fmt.Fprintln(os.Stderr, "  configuration_cluster_info_response query_cluster_info(configuration_cluster_info_request req)")
  fmt.Fprintln(os.Stderr, "  configuration_meta_control_response meta_control(configuration_meta_control_request req)")
  fmt.Fprintln(os.Stderr, "  configuration_query_backup_policy_response query_backup_policy(configuration_query_backup_policy_request req)")
  fmt.Fprintln(os.Stderr, "  configuration_balancer_response balance(configuration_balancer_request req)")
  fmt.Fprintln(os.Stderr, "  start_backup_app_response start_backup_app(start_backup_app_request req)")
  fmt.Fprintln(os.Stderr, "  query_backup_status_response query_backup_status(query_backup_status_request req)")
  fmt.Fprintln(os.Stderr, "  configuration_create_app_response restore_app(configuration_restore_request req)")
  fmt.Fprintln(os.Stderr, "  start_partition_split_response start_partition_split(start_partition_split_request req)")
  fmt.Fprintln(os.Stderr, "  query_split_response query_split_status(query_split_request req)")
  fmt.Fprintln(os.Stderr, "  control_split_response control_partition_split(control_split_request req)")
  fmt.Fprintln(os.Stderr, "  start_bulk_load_response start_bulk_load(start_bulk_load_request req)")
  fmt.Fprintln(os.Stderr, "  query_bulk_load_response query_bulk_load_status(query_bulk_load_request req)")
  fmt.Fprintln(os.Stderr, "  control_bulk_load_response control_bulk_load(control_bulk_load_request req)")
  fmt.Fprintln(os.Stderr, "  clear_bulk_load_state_response clear_bulk_load(clear_bulk_load_state_request req)")
  fmt.Fprintln(os.Stderr, "  start_app_manual_compact_response start_manual_compact(start_app_manual_compact_request req)")
  fmt.Fprintln(os.Stderr, "  query_app_manual_compact_response query_manual_compact(query_app_manual_compact_request req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := admin.NewAdminClientClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "create_app":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateApp requires 1 args")
      flag.Usage()
    }
    arg192 := flag.Arg(1)
    mbTrans193 := thrift.NewTMemoryBufferLen(len(arg192))
    defer mbTrans193.Close()
    _, err194 := mbTrans193.WriteString(arg192)
    if err194 != nil {
      Usage()
      return
    }
    factory195 := thrift.NewTJSONProtocolFactory()
    jsProt196 := factory195.GetProtocol(mbTrans193)
    argvalue0 := admin.NewConfigurationCreateAppRequest()
    err197 := argvalue0.Read(context.Background(), jsProt196)
    if err197 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateApp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_app":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropApp requires 1 args")
      flag.Usage()
    }
    arg198 := flag.Arg(1)
    mbTrans199 := thrift.NewTMemoryBufferLen(len(arg198))
    defer mbTrans199.Close()
    _, err200 := mbTrans199.WriteString(arg198)
    if err200 != nil {
      Usage()
      return
    }
    factory201 := thrift.NewTJSONProtocolFactory()
    jsProt202 := factory201.GetProtocol(mbTrans199)
    argvalue0 := admin.NewConfigurationDropAppRequest()
    err203 := argvalue0.Read(context.Background(), jsProt202)
    if err203 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropApp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "recall_app":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RecallApp requires 1 args")
      flag.Usage()
    }
    arg204 := flag.Arg(1)
    mbTrans205 := thrift.NewTMemoryBufferLen(len(arg204))
    defer mbTrans205.Close()
    _, err206 := mbTrans205.WriteString(arg204)
    if err206 != nil {
      Usage()
      return
    }
    factory207 := thrift.NewTJSONProtocolFactory()
    jsProt208 := factory207.GetProtocol(mbTrans205)
    argvalue0 := admin.NewConfigurationRecallAppRequest()
    err209 := argvalue0.Read(context.Background(), jsProt208)
    if err209 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RecallApp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "list_apps":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListApps requires 1 args")
      flag.Usage()
    }
    arg210 := flag.Arg(1)
    mbTrans211 := thrift.NewTMemoryBufferLen(len(arg210))
    defer mbTrans211.Close()
    _, err212 := mbTrans211.WriteString(arg210)
    if err212 != nil {
      Usage()
      return
    }
    factory213 := thrift.NewTJSONProtocolFactory()
    jsProt214 := factory213.GetProtocol(mbTrans211)
    argvalue0 := admin.NewConfigurationListAppsRequest()
    err215 := argvalue0.Read(context.Background(), jsProt214)
    if err215 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListApps(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_duplication":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddDuplication requires 1 args")
      flag.Usage()
    }
    arg216 := flag.Arg(1)
    mbTrans217 := thrift.NewTMemoryBufferLen(len(arg216))
    defer mbTrans217.Close()
    _, err218 := mbTrans217.WriteString(arg216)
    if err218 != nil {
      Usage()
      return
    }
    factory219 := thrift.NewTJSONProtocolFactory()
    jsProt220 := factory219.GetProtocol(mbTrans217)
    argvalue0 := admin.NewDuplicationAddRequest()
    err221 := argvalue0.Read(context.Background(), jsProt220)
    if err221 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddDuplication(context.Background(), value0))
    fmt.Print("\n")
    break
  case "query_duplication":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryDuplication requires 1 args")
      flag.Usage()
    }
    arg222 := flag.Arg(1)
    mbTrans223 := thrift.NewTMemoryBufferLen(len(arg222))
    defer mbTrans223.Close()
    _, err224 := mbTrans223.WriteString(arg222)
    if err224 != nil {
      Usage()
      return
    }
    factory225 := thrift.NewTJSONProtocolFactory()
    jsProt226 := factory225.GetProtocol(mbTrans223)
    argvalue0 := admin.NewDuplicationQueryRequest()
    err227 := argvalue0.Read(context.Background(), jsProt226)
    if err227 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QueryDuplication(context.Background(), value0))
    fmt.Print("\n")
    break
  case "modify_duplication":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ModifyDuplication requires 1 args")
      flag.Usage()
    }
    arg228 := flag.Arg(1)
    mbTrans229 := thrift.NewTMemoryBufferLen(len(arg228))
    defer mbTrans229.Close()
    _, err230 := mbTrans229.WriteString(arg228)
    if err230 != nil {
      Usage()
      return
    }
    factory231 := thrift.NewTJSONProtocolFactory()
    jsProt232 := factory231.GetProtocol(mbTrans229)
    argvalue0 := admin.NewDuplicationModifyRequest()
    err233 := argvalue0.Read(context.Background(), jsProt232)
    if err233 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ModifyDuplication(context.Background(), value0))
    fmt.Print("\n")
    break
  case "query_app_info":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryAppInfo requires 1 args")
      flag.Usage()
    }
    arg234 := flag.Arg(1)
    mbTrans235 := thrift.NewTMemoryBufferLen(len(arg234))
    defer mbTrans235.Close()
    _, err236 := mbTrans235.WriteString(arg234)
    if err236 != nil {
      Usage()
      return
    }
    factory237 := thrift.NewTJSONProtocolFactory()
    jsProt238 := factory237.GetProtocol(mbTrans235)
    argvalue0 := admin.NewQueryAppInfoRequest()
    err239 := argvalue0.Read(context.Background(), jsProt238)
    if err239 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QueryAppInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_app_env":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateAppEnv requires 1 args")
      flag.Usage()
    }
    arg240 := flag.Arg(1)
    mbTrans241 := thrift.NewTMemoryBufferLen(len(arg240))
    defer mbTrans241.Close()
    _, err242 := mbTrans241.WriteString(arg240)
    if err242 != nil {
      Usage()
      return
    }
    factory243 := thrift.NewTJSONProtocolFactory()
    jsProt244 := factory243.GetProtocol(mbTrans241)
    argvalue0 := admin.NewConfigurationUpdateAppEnvRequest()
    err245 := argvalue0.Read(context.Background(), jsProt244)
    if err245 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateAppEnv(context.Background(), value0))
    fmt.Print("\n")
    break
  case "list_nodes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListNodes requires 1 args")
      flag.Usage()
    }
    arg246 := flag.Arg(1)
    mbTrans247 := thrift.NewTMemoryBufferLen(len(arg246))
    defer mbTrans247.Close()
    _, err248 := mbTrans247.WriteString(arg246)
    if err248 != nil {
      Usage()
      return
    }
    factory249 := thrift.NewTJSONProtocolFactory()
    jsProt250 := factory249.GetProtocol(mbTrans247)
    argvalue0 := admin.NewConfigurationListNodesRequest()
    err251 := argvalue0.Read(context.Background(), jsProt250)
    if err251 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListNodes(context.Background(), value0))
    fmt.Print("\n")
    break
  case "query_cluster_info":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryClusterInfo requires 1 args")
      flag.Usage()
    }
    arg252 := flag.Arg(1)
    mbTrans253 := thrift.NewTMemoryBufferLen(len(arg252))
    defer mbTrans253.Close()
    _, err254 := mbTrans253.WriteString(arg252)
    if err254 != nil {
      Usage()
      return
    }
    factory255 := thrift.NewTJSONProtocolFactory()
    jsProt256 := factory255.GetProtocol(mbTrans253)
    argvalue0 := admin.NewConfigurationClusterInfoRequest()
    err257 := argvalue0.Read(context.Background(), jsProt256)
    if err257 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QueryClusterInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "meta_control":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MetaControl requires 1 args")
      flag.Usage()
    }
    arg258 := flag.Arg(1)
    mbTrans259 := thrift.NewTMemoryBufferLen(len(arg258))
    defer mbTrans259.Close()
    _, err260 := mbTrans259.WriteString(arg258)
    if err260 != nil {
      Usage()
      return
    }
    factory261 := thrift.NewTJSONProtocolFactory()
    jsProt262 := factory261.GetProtocol(mbTrans259)
    argvalue0 := admin.NewConfigurationMetaControlRequest()
    err263 := argvalue0.Read(context.Background(), jsProt262)
    if err263 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MetaControl(context.Background(), value0))
    fmt.Print("\n")
    break
  case "query_backup_policy":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryBackupPolicy requires 1 args")
      flag.Usage()
    }
    arg264 := flag.Arg(1)
    mbTrans265 := thrift.NewTMemoryBufferLen(len(arg264))
    defer mbTrans265.Close()
    _, err266 := mbTrans265.WriteString(arg264)
    if err266 != nil {
      Usage()
      return
    }
    factory267 := thrift.NewTJSONProtocolFactory()
    jsProt268 := factory267.GetProtocol(mbTrans265)
    argvalue0 := admin.NewConfigurationQueryBackupPolicyRequest()
    err269 := argvalue0.Read(context.Background(), jsProt268)
    if err269 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QueryBackupPolicy(context.Background(), value0))
    fmt.Print("\n")
    break
  case "balance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Balance requires 1 args")
      flag.Usage()
    }
    arg270 := flag.Arg(1)
    mbTrans271 := thrift.NewTMemoryBufferLen(len(arg270))
    defer mbTrans271.Close()
    _, err272 := mbTrans271.WriteString(arg270)
    if err272 != nil {
      Usage()
      return
    }
    factory273 := thrift.NewTJSONProtocolFactory()
    jsProt274 := factory273.GetProtocol(mbTrans271)
    argvalue0 := admin.NewConfigurationBalancerRequest()
    err275 := argvalue0.Read(context.Background(), jsProt274)
    if err275 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Balance(context.Background(), value0))
    fmt.Print("\n")
    break
  case "start_backup_app":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartBackupApp requires 1 args")
      flag.Usage()
    }
    arg276 := flag.Arg(1)
    mbTrans277 := thrift.NewTMemoryBufferLen(len(arg276))
    defer mbTrans277.Close()
    _, err278 := mbTrans277.WriteString(arg276)
    if err278 != nil {
      Usage()
      return
    }
    factory279 := thrift.NewTJSONProtocolFactory()
    jsProt280 := factory279.GetProtocol(mbTrans277)
    argvalue0 := admin.NewStartBackupAppRequest()
    err281 := argvalue0.Read(context.Background(), jsProt280)
    if err281 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StartBackupApp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "query_backup_status":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryBackupStatus requires 1 args")
      flag.Usage()
    }
    arg282 := flag.Arg(1)
    mbTrans283 := thrift.NewTMemoryBufferLen(len(arg282))
    defer mbTrans283.Close()
    _, err284 := mbTrans283.WriteString(arg282)
    if err284 != nil {
      Usage()
      return
    }
    factory285 := thrift.NewTJSONProtocolFactory()
    jsProt286 := factory285.GetProtocol(mbTrans283)
    argvalue0 := admin.NewQueryBackupStatusRequest()
    err287 := argvalue0.Read(context.Background(), jsProt286)
    if err287 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QueryBackupStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "restore_app":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RestoreApp requires 1 args")
      flag.Usage()
    }
    arg288 := flag.Arg(1)
    mbTrans289 := thrift.NewTMemoryBufferLen(len(arg288))
    defer mbTrans289.Close()
    _, err290 := mbTrans289.WriteString(arg288)
    if err290 != nil {
      Usage()
      return
    }
    factory291 := thrift.NewTJSONProtocolFactory()
    jsProt292 := factory291.GetProtocol(mbTrans289)
    argvalue0 := admin.NewConfigurationRestoreRequest()
    err293 := argvalue0.Read(context.Background(), jsProt292)
    if err293 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RestoreApp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "start_partition_split":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartPartitionSplit requires 1 args")
      flag.Usage()
    }
    arg294 := flag.Arg(1)
    mbTrans295 := thrift.NewTMemoryBufferLen(len(arg294))
    defer mbTrans295.Close()
    _, err296 := mbTrans295.WriteString(arg294)
    if err296 != nil {
      Usage()
      return
    }
    factory297 := thrift.NewTJSONProtocolFactory()
    jsProt298 := factory297.GetProtocol(mbTrans295)
    argvalue0 := admin.NewStartPartitionSplitRequest()
    err299 := argvalue0.Read(context.Background(), jsProt298)
    if err299 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StartPartitionSplit(context.Background(), value0))
    fmt.Print("\n")
    break
  case "query_split_status":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QuerySplitStatus requires 1 args")
      flag.Usage()
    }
    arg300 := flag.Arg(1)
    mbTrans301 := thrift.NewTMemoryBufferLen(len(arg300))
    defer mbTrans301.Close()
    _, err302 := mbTrans301.WriteString(arg300)
    if err302 != nil {
      Usage()
      return
    }
    factory303 := thrift.NewTJSONProtocolFactory()
    jsProt304 := factory303.GetProtocol(mbTrans301)
    argvalue0 := admin.NewQuerySplitRequest()
    err305 := argvalue0.Read(context.Background(), jsProt304)
    if err305 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QuerySplitStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "control_partition_split":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ControlPartitionSplit requires 1 args")
      flag.Usage()
    }
    arg306 := flag.Arg(1)
    mbTrans307 := thrift.NewTMemoryBufferLen(len(arg306))
    defer mbTrans307.Close()
    _, err308 := mbTrans307.WriteString(arg306)
    if err308 != nil {
      Usage()
      return
    }
    factory309 := thrift.NewTJSONProtocolFactory()
    jsProt310 := factory309.GetProtocol(mbTrans307)
    argvalue0 := admin.NewControlSplitRequest()
    err311 := argvalue0.Read(context.Background(), jsProt310)
    if err311 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ControlPartitionSplit(context.Background(), value0))
    fmt.Print("\n")
    break
  case "start_bulk_load":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartBulkLoad requires 1 args")
      flag.Usage()
    }
    arg312 := flag.Arg(1)
    mbTrans313 := thrift.NewTMemoryBufferLen(len(arg312))
    defer mbTrans313.Close()
    _, err314 := mbTrans313.WriteString(arg312)
    if err314 != nil {
      Usage()
      return
    }
    factory315 := thrift.NewTJSONProtocolFactory()
    jsProt316 := factory315.GetProtocol(mbTrans313)
    argvalue0 := admin.NewStartBulkLoadRequest()
    err317 := argvalue0.Read(context.Background(), jsProt316)
    if err317 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StartBulkLoad(context.Background(), value0))
    fmt.Print("\n")
    break
  case "query_bulk_load_status":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryBulkLoadStatus requires 1 args")
      flag.Usage()
    }
    arg318 := flag.Arg(1)
    mbTrans319 := thrift.NewTMemoryBufferLen(len(arg318))
    defer mbTrans319.Close()
    _, err320 := mbTrans319.WriteString(arg318)
    if err320 != nil {
      Usage()
      return
    }
    factory321 := thrift.NewTJSONProtocolFactory()
    jsProt322 := factory321.GetProtocol(mbTrans319)
    argvalue0 := admin.NewQueryBulkLoadRequest()
    err323 := argvalue0.Read(context.Background(), jsProt322)
    if err323 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QueryBulkLoadStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "control_bulk_load":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ControlBulkLoad requires 1 args")
      flag.Usage()
    }
    arg324 := flag.Arg(1)
    mbTrans325 := thrift.NewTMemoryBufferLen(len(arg324))
    defer mbTrans325.Close()
    _, err326 := mbTrans325.WriteString(arg324)
    if err326 != nil {
      Usage()
      return
    }
    factory327 := thrift.NewTJSONProtocolFactory()
    jsProt328 := factory327.GetProtocol(mbTrans325)
    argvalue0 := admin.NewControlBulkLoadRequest()
    err329 := argvalue0.Read(context.Background(), jsProt328)
    if err329 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ControlBulkLoad(context.Background(), value0))
    fmt.Print("\n")
    break
  case "clear_bulk_load":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ClearBulkLoad requires 1 args")
      flag.Usage()
    }
    arg330 := flag.Arg(1)
    mbTrans331 := thrift.NewTMemoryBufferLen(len(arg330))
    defer mbTrans331.Close()
    _, err332 := mbTrans331.WriteString(arg330)
    if err332 != nil {
      Usage()
      return
    }
    factory333 := thrift.NewTJSONProtocolFactory()
    jsProt334 := factory333.GetProtocol(mbTrans331)
    argvalue0 := admin.NewClearBulkLoadStateRequest()
    err335 := argvalue0.Read(context.Background(), jsProt334)
    if err335 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearBulkLoad(context.Background(), value0))
    fmt.Print("\n")
    break
  case "start_manual_compact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartManualCompact requires 1 args")
      flag.Usage()
    }
    arg336 := flag.Arg(1)
    mbTrans337 := thrift.NewTMemoryBufferLen(len(arg336))
    defer mbTrans337.Close()
    _, err338 := mbTrans337.WriteString(arg336)
    if err338 != nil {
      Usage()
      return
    }
    factory339 := thrift.NewTJSONProtocolFactory()
    jsProt340 := factory339.GetProtocol(mbTrans337)
    argvalue0 := admin.NewStartAppManualCompactRequest()
    err341 := argvalue0.Read(context.Background(), jsProt340)
    if err341 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StartManualCompact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "query_manual_compact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryManualCompact requires 1 args")
      flag.Usage()
    }
    arg342 := flag.Arg(1)
    mbTrans343 := thrift.NewTMemoryBufferLen(len(arg342))
    defer mbTrans343.Close()
    _, err344 := mbTrans343.WriteString(arg342)
    if err344 != nil {
      Usage()
      return
    }
    factory345 := thrift.NewTJSONProtocolFactory()
    jsProt346 := factory345.GetProtocol(mbTrans343)
    argvalue0 := admin.NewQueryAppManualCompactRequest()
    err347 := argvalue0.Read(context.Background(), jsProt346)
    if err347 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QueryManualCompact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
