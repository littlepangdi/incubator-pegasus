// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package admin

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"github.com/apache/incubator-pegasus/go-client/idl/base"
	"github.com/apache/incubator-pegasus/go-client/idl/replication"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = base.GoUnusedProtection__
var _ = replication.GoUnusedProtection__
type DuplicationStatus int64
const (
  DuplicationStatus_DS_INIT DuplicationStatus = 0
  DuplicationStatus_DS_PREPARE DuplicationStatus = 1
  DuplicationStatus_DS_APP DuplicationStatus = 2
  DuplicationStatus_DS_LOG DuplicationStatus = 3
  DuplicationStatus_DS_PAUSE DuplicationStatus = 4
  DuplicationStatus_DS_REMOVED DuplicationStatus = 5
)

func (p DuplicationStatus) String() string {
  switch p {
  case DuplicationStatus_DS_INIT: return "DS_INIT"
  case DuplicationStatus_DS_PREPARE: return "DS_PREPARE"
  case DuplicationStatus_DS_APP: return "DS_APP"
  case DuplicationStatus_DS_LOG: return "DS_LOG"
  case DuplicationStatus_DS_PAUSE: return "DS_PAUSE"
  case DuplicationStatus_DS_REMOVED: return "DS_REMOVED"
  }
  return "<UNSET>"
}

func DuplicationStatusFromString(s string) (DuplicationStatus, error) {
  switch s {
  case "DS_INIT": return DuplicationStatus_DS_INIT, nil 
  case "DS_PREPARE": return DuplicationStatus_DS_PREPARE, nil 
  case "DS_APP": return DuplicationStatus_DS_APP, nil 
  case "DS_LOG": return DuplicationStatus_DS_LOG, nil 
  case "DS_PAUSE": return DuplicationStatus_DS_PAUSE, nil 
  case "DS_REMOVED": return DuplicationStatus_DS_REMOVED, nil 
  }
  return DuplicationStatus(0), fmt.Errorf("not a valid DuplicationStatus string")
}


func DuplicationStatusPtr(v DuplicationStatus) *DuplicationStatus { return &v }

func (p DuplicationStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DuplicationStatus) UnmarshalText(text []byte) error {
q, err := DuplicationStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DuplicationStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DuplicationStatus(v)
return nil
}

func (p * DuplicationStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type DuplicationFailMode int64
const (
  DuplicationFailMode_FAIL_SLOW DuplicationFailMode = 0
  DuplicationFailMode_FAIL_SKIP DuplicationFailMode = 1
  DuplicationFailMode_FAIL_FAST DuplicationFailMode = 2
)

func (p DuplicationFailMode) String() string {
  switch p {
  case DuplicationFailMode_FAIL_SLOW: return "FAIL_SLOW"
  case DuplicationFailMode_FAIL_SKIP: return "FAIL_SKIP"
  case DuplicationFailMode_FAIL_FAST: return "FAIL_FAST"
  }
  return "<UNSET>"
}

func DuplicationFailModeFromString(s string) (DuplicationFailMode, error) {
  switch s {
  case "FAIL_SLOW": return DuplicationFailMode_FAIL_SLOW, nil 
  case "FAIL_SKIP": return DuplicationFailMode_FAIL_SKIP, nil 
  case "FAIL_FAST": return DuplicationFailMode_FAIL_FAST, nil 
  }
  return DuplicationFailMode(0), fmt.Errorf("not a valid DuplicationFailMode string")
}


func DuplicationFailModePtr(v DuplicationFailMode) *DuplicationFailMode { return &v }

func (p DuplicationFailMode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DuplicationFailMode) UnmarshalText(text []byte) error {
q, err := DuplicationFailModeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DuplicationFailMode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DuplicationFailMode(v)
return nil
}

func (p * DuplicationFailMode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - AppName
//  - RemoteClusterName
//  - IsDuplicatingCheckpoint
type DuplicationAddRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  RemoteClusterName string `thrift:"remote_cluster_name,2" db:"remote_cluster_name" json:"remote_cluster_name"`
  IsDuplicatingCheckpoint bool `thrift:"is_duplicating_checkpoint,3" db:"is_duplicating_checkpoint" json:"is_duplicating_checkpoint"`
}

func NewDuplicationAddRequest() *DuplicationAddRequest {
  return &DuplicationAddRequest{
IsDuplicatingCheckpoint: true,
}
}


func (p *DuplicationAddRequest) GetAppName() string {
  return p.AppName
}

func (p *DuplicationAddRequest) GetRemoteClusterName() string {
  return p.RemoteClusterName
}
var DuplicationAddRequest_IsDuplicatingCheckpoint_DEFAULT bool = true

func (p *DuplicationAddRequest) GetIsDuplicatingCheckpoint() bool {
  return p.IsDuplicatingCheckpoint
}
func (p *DuplicationAddRequest) IsSetIsDuplicatingCheckpoint() bool {
  return p.IsDuplicatingCheckpoint != DuplicationAddRequest_IsDuplicatingCheckpoint_DEFAULT
}

func (p *DuplicationAddRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DuplicationAddRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *DuplicationAddRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RemoteClusterName = v
}
  return nil
}

func (p *DuplicationAddRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsDuplicatingCheckpoint = v
}
  return nil
}

func (p *DuplicationAddRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "duplication_add_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DuplicationAddRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *DuplicationAddRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "remote_cluster_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:remote_cluster_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RemoteClusterName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remote_cluster_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:remote_cluster_name: ", p), err) }
  return err
}

func (p *DuplicationAddRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIsDuplicatingCheckpoint() {
    if err := oprot.WriteFieldBegin(ctx, "is_duplicating_checkpoint", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_duplicating_checkpoint: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.IsDuplicatingCheckpoint)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.is_duplicating_checkpoint (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_duplicating_checkpoint: ", p), err) }
  }
  return err
}

func (p *DuplicationAddRequest) Equals(other *DuplicationAddRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if p.RemoteClusterName != other.RemoteClusterName { return false }
  if p.IsDuplicatingCheckpoint != other.IsDuplicatingCheckpoint { return false }
  return true
}

func (p *DuplicationAddRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DuplicationAddRequest(%+v)", *p)
}

func (p *DuplicationAddRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - Appid
//  - Dupid
//  - Hint
type DuplicationAddResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Appid int32 `thrift:"appid,2" db:"appid" json:"appid"`
  Dupid int32 `thrift:"dupid,3" db:"dupid" json:"dupid"`
  Hint *string `thrift:"hint,4" db:"hint" json:"hint,omitempty"`
}

func NewDuplicationAddResponse() *DuplicationAddResponse {
  return &DuplicationAddResponse{}
}

var DuplicationAddResponse_Err_DEFAULT *base.ErrorCode
func (p *DuplicationAddResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return DuplicationAddResponse_Err_DEFAULT
  }
return p.Err
}

func (p *DuplicationAddResponse) GetAppid() int32 {
  return p.Appid
}

func (p *DuplicationAddResponse) GetDupid() int32 {
  return p.Dupid
}
var DuplicationAddResponse_Hint_DEFAULT string
func (p *DuplicationAddResponse) GetHint() string {
  if !p.IsSetHint() {
    return DuplicationAddResponse_Hint_DEFAULT
  }
return *p.Hint
}
func (p *DuplicationAddResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *DuplicationAddResponse) IsSetHint() bool {
  return p.Hint != nil
}

func (p *DuplicationAddResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DuplicationAddResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DuplicationAddResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *DuplicationAddResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Dupid = v
}
  return nil
}

func (p *DuplicationAddResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Hint = &v
}
  return nil
}

func (p *DuplicationAddResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "duplication_add_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DuplicationAddResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *DuplicationAddResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *DuplicationAddResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dupid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dupid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Dupid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dupid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dupid: ", p), err) }
  return err
}

func (p *DuplicationAddResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHint() {
    if err := oprot.WriteFieldBegin(ctx, "hint", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hint: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Hint)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hint (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hint: ", p), err) }
  }
  return err
}

func (p *DuplicationAddResponse) Equals(other *DuplicationAddResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.Appid != other.Appid { return false }
  if p.Dupid != other.Dupid { return false }
  if p.Hint != other.Hint {
    if p.Hint == nil || other.Hint == nil {
      return false
    }
    if (*p.Hint) != (*other.Hint) { return false }
  }
  return true
}

func (p *DuplicationAddResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DuplicationAddResponse(%+v)", *p)
}

func (p *DuplicationAddResponse) Validate() error {
  return nil
}
// Attributes:
//  - AppName
//  - Dupid
//  - Status
//  - FailMode
type DuplicationModifyRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  Dupid int32 `thrift:"dupid,2" db:"dupid" json:"dupid"`
  Status *DuplicationStatus `thrift:"status,3" db:"status" json:"status,omitempty"`
  FailMode *DuplicationFailMode `thrift:"fail_mode,4" db:"fail_mode" json:"fail_mode,omitempty"`
}

func NewDuplicationModifyRequest() *DuplicationModifyRequest {
  return &DuplicationModifyRequest{}
}


func (p *DuplicationModifyRequest) GetAppName() string {
  return p.AppName
}

func (p *DuplicationModifyRequest) GetDupid() int32 {
  return p.Dupid
}
var DuplicationModifyRequest_Status_DEFAULT DuplicationStatus
func (p *DuplicationModifyRequest) GetStatus() DuplicationStatus {
  if !p.IsSetStatus() {
    return DuplicationModifyRequest_Status_DEFAULT
  }
return *p.Status
}
var DuplicationModifyRequest_FailMode_DEFAULT DuplicationFailMode
func (p *DuplicationModifyRequest) GetFailMode() DuplicationFailMode {
  if !p.IsSetFailMode() {
    return DuplicationModifyRequest_FailMode_DEFAULT
  }
return *p.FailMode
}
func (p *DuplicationModifyRequest) IsSetStatus() bool {
  return p.Status != nil
}

func (p *DuplicationModifyRequest) IsSetFailMode() bool {
  return p.FailMode != nil
}

func (p *DuplicationModifyRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DuplicationModifyRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *DuplicationModifyRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Dupid = v
}
  return nil
}

func (p *DuplicationModifyRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := DuplicationStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *DuplicationModifyRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := DuplicationFailMode(v)
  p.FailMode = &temp
}
  return nil
}

func (p *DuplicationModifyRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "duplication_modify_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DuplicationModifyRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *DuplicationModifyRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dupid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dupid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Dupid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dupid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dupid: ", p), err) }
  return err
}

func (p *DuplicationModifyRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  }
  return err
}

func (p *DuplicationModifyRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFailMode() {
    if err := oprot.WriteFieldBegin(ctx, "fail_mode", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fail_mode: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.FailMode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fail_mode (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fail_mode: ", p), err) }
  }
  return err
}

func (p *DuplicationModifyRequest) Equals(other *DuplicationModifyRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if p.Dupid != other.Dupid { return false }
  if p.Status != other.Status {
    if p.Status == nil || other.Status == nil {
      return false
    }
    if (*p.Status) != (*other.Status) { return false }
  }
  if p.FailMode != other.FailMode {
    if p.FailMode == nil || other.FailMode == nil {
      return false
    }
    if (*p.FailMode) != (*other.FailMode) { return false }
  }
  return true
}

func (p *DuplicationModifyRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DuplicationModifyRequest(%+v)", *p)
}

func (p *DuplicationModifyRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - Appid
type DuplicationModifyResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Appid int32 `thrift:"appid,2" db:"appid" json:"appid"`
}

func NewDuplicationModifyResponse() *DuplicationModifyResponse {
  return &DuplicationModifyResponse{}
}

var DuplicationModifyResponse_Err_DEFAULT *base.ErrorCode
func (p *DuplicationModifyResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return DuplicationModifyResponse_Err_DEFAULT
  }
return p.Err
}

func (p *DuplicationModifyResponse) GetAppid() int32 {
  return p.Appid
}
func (p *DuplicationModifyResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *DuplicationModifyResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DuplicationModifyResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DuplicationModifyResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *DuplicationModifyResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "duplication_modify_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DuplicationModifyResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *DuplicationModifyResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *DuplicationModifyResponse) Equals(other *DuplicationModifyResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.Appid != other.Appid { return false }
  return true
}

func (p *DuplicationModifyResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DuplicationModifyResponse(%+v)", *p)
}

func (p *DuplicationModifyResponse) Validate() error {
  return nil
}
// Attributes:
//  - Dupid
//  - Status
//  - Remote
//  - CreateTs
//  - Progress
//  - FailMode
type DuplicationEntry struct {
  Dupid int32 `thrift:"dupid,1" db:"dupid" json:"dupid"`
  Status DuplicationStatus `thrift:"status,2" db:"status" json:"status"`
  Remote string `thrift:"remote,3" db:"remote" json:"remote"`
  CreateTs int64 `thrift:"create_ts,4" db:"create_ts" json:"create_ts"`
  Progress map[int32]int64 `thrift:"progress,5" db:"progress" json:"progress,omitempty"`
  // unused field # 6
  FailMode *DuplicationFailMode `thrift:"fail_mode,7" db:"fail_mode" json:"fail_mode,omitempty"`
}

func NewDuplicationEntry() *DuplicationEntry {
  return &DuplicationEntry{}
}


func (p *DuplicationEntry) GetDupid() int32 {
  return p.Dupid
}

func (p *DuplicationEntry) GetStatus() DuplicationStatus {
  return p.Status
}

func (p *DuplicationEntry) GetRemote() string {
  return p.Remote
}

func (p *DuplicationEntry) GetCreateTs() int64 {
  return p.CreateTs
}
var DuplicationEntry_Progress_DEFAULT map[int32]int64

func (p *DuplicationEntry) GetProgress() map[int32]int64 {
  return p.Progress
}
var DuplicationEntry_FailMode_DEFAULT DuplicationFailMode
func (p *DuplicationEntry) GetFailMode() DuplicationFailMode {
  if !p.IsSetFailMode() {
    return DuplicationEntry_FailMode_DEFAULT
  }
return *p.FailMode
}
func (p *DuplicationEntry) IsSetProgress() bool {
  return p.Progress != nil
}

func (p *DuplicationEntry) IsSetFailMode() bool {
  return p.FailMode != nil
}

func (p *DuplicationEntry) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DuplicationEntry)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dupid = v
}
  return nil
}

func (p *DuplicationEntry)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := DuplicationStatus(v)
  p.Status = temp
}
  return nil
}

func (p *DuplicationEntry)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Remote = v
}
  return nil
}

func (p *DuplicationEntry)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreateTs = v
}
  return nil
}

func (p *DuplicationEntry)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]int64, size)
  p.Progress =  tMap
  for i := 0; i < size; i ++ {
var _key0 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Progress[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DuplicationEntry)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := DuplicationFailMode(v)
  p.FailMode = &temp
}
  return nil
}

func (p *DuplicationEntry) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "duplication_entry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DuplicationEntry) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dupid", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dupid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Dupid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dupid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dupid: ", p), err) }
  return err
}

func (p *DuplicationEntry) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *DuplicationEntry) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "remote", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remote: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Remote)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remote (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remote: ", p), err) }
  return err
}

func (p *DuplicationEntry) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "create_ts", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:create_ts: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreateTs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_ts (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:create_ts: ", p), err) }
  return err
}

func (p *DuplicationEntry) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetProgress() {
    if err := oprot.WriteFieldBegin(ctx, "progress", thrift.MAP, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:progress: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.I64, len(p.Progress)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Progress {
      if err := oprot.WriteI32(ctx, int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI64(ctx, int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:progress: ", p), err) }
  }
  return err
}

func (p *DuplicationEntry) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFailMode() {
    if err := oprot.WriteFieldBegin(ctx, "fail_mode", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:fail_mode: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.FailMode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fail_mode (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:fail_mode: ", p), err) }
  }
  return err
}

func (p *DuplicationEntry) Equals(other *DuplicationEntry) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Dupid != other.Dupid { return false }
  if p.Status != other.Status { return false }
  if p.Remote != other.Remote { return false }
  if p.CreateTs != other.CreateTs { return false }
  if len(p.Progress) != len(other.Progress) { return false }
  for k, _tgt := range p.Progress {
    _src2 := other.Progress[k]
    if _tgt != _src2 { return false }
  }
  if p.FailMode != other.FailMode {
    if p.FailMode == nil || other.FailMode == nil {
      return false
    }
    if (*p.FailMode) != (*other.FailMode) { return false }
  }
  return true
}

func (p *DuplicationEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DuplicationEntry(%+v)", *p)
}

func (p *DuplicationEntry) Validate() error {
  return nil
}
// Attributes:
//  - AppName
type DuplicationQueryRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
}

func NewDuplicationQueryRequest() *DuplicationQueryRequest {
  return &DuplicationQueryRequest{}
}


func (p *DuplicationQueryRequest) GetAppName() string {
  return p.AppName
}
func (p *DuplicationQueryRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DuplicationQueryRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *DuplicationQueryRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "duplication_query_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DuplicationQueryRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *DuplicationQueryRequest) Equals(other *DuplicationQueryRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  return true
}

func (p *DuplicationQueryRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DuplicationQueryRequest(%+v)", *p)
}

func (p *DuplicationQueryRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - Appid
//  - EntryList
type DuplicationQueryResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  // unused field # 2
  Appid int32 `thrift:"appid,3" db:"appid" json:"appid"`
  EntryList []*DuplicationEntry `thrift:"entry_list,4" db:"entry_list" json:"entry_list"`
}

func NewDuplicationQueryResponse() *DuplicationQueryResponse {
  return &DuplicationQueryResponse{}
}

var DuplicationQueryResponse_Err_DEFAULT *base.ErrorCode
func (p *DuplicationQueryResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return DuplicationQueryResponse_Err_DEFAULT
  }
return p.Err
}

func (p *DuplicationQueryResponse) GetAppid() int32 {
  return p.Appid
}

func (p *DuplicationQueryResponse) GetEntryList() []*DuplicationEntry {
  return p.EntryList
}
func (p *DuplicationQueryResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *DuplicationQueryResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DuplicationQueryResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DuplicationQueryResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *DuplicationQueryResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DuplicationEntry, 0, size)
  p.EntryList =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &DuplicationEntry{}
    if err := _elem3.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.EntryList = append(p.EntryList, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DuplicationQueryResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "duplication_query_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DuplicationQueryResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *DuplicationQueryResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appid: ", p), err) }
  return err
}

func (p *DuplicationQueryResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entry_list", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:entry_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.EntryList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EntryList {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:entry_list: ", p), err) }
  return err
}

func (p *DuplicationQueryResponse) Equals(other *DuplicationQueryResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.Appid != other.Appid { return false }
  if len(p.EntryList) != len(other.EntryList) { return false }
  for i, _tgt := range p.EntryList {
    _src4 := other.EntryList[i]
    if !_tgt.Equals(_src4) { return false }
  }
  return true
}

func (p *DuplicationQueryResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DuplicationQueryResponse(%+v)", *p)
}

func (p *DuplicationQueryResponse) Validate() error {
  return nil
}
// Attributes:
//  - Dupid
//  - ConfirmedDecree
//  - CheckpointPrepared
type DuplicationConfirmEntry struct {
  Dupid int32 `thrift:"dupid,1" db:"dupid" json:"dupid"`
  ConfirmedDecree int64 `thrift:"confirmed_decree,2" db:"confirmed_decree" json:"confirmed_decree"`
  CheckpointPrepared bool `thrift:"checkpoint_prepared,3" db:"checkpoint_prepared" json:"checkpoint_prepared"`
}

func NewDuplicationConfirmEntry() *DuplicationConfirmEntry {
  return &DuplicationConfirmEntry{}
}


func (p *DuplicationConfirmEntry) GetDupid() int32 {
  return p.Dupid
}

func (p *DuplicationConfirmEntry) GetConfirmedDecree() int64 {
  return p.ConfirmedDecree
}
var DuplicationConfirmEntry_CheckpointPrepared_DEFAULT bool = false

func (p *DuplicationConfirmEntry) GetCheckpointPrepared() bool {
  return p.CheckpointPrepared
}
func (p *DuplicationConfirmEntry) IsSetCheckpointPrepared() bool {
  return p.CheckpointPrepared != DuplicationConfirmEntry_CheckpointPrepared_DEFAULT
}

func (p *DuplicationConfirmEntry) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DuplicationConfirmEntry)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dupid = v
}
  return nil
}

func (p *DuplicationConfirmEntry)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConfirmedDecree = v
}
  return nil
}

func (p *DuplicationConfirmEntry)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CheckpointPrepared = v
}
  return nil
}

func (p *DuplicationConfirmEntry) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "duplication_confirm_entry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DuplicationConfirmEntry) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dupid", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dupid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Dupid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dupid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dupid: ", p), err) }
  return err
}

func (p *DuplicationConfirmEntry) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "confirmed_decree", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:confirmed_decree: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ConfirmedDecree)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.confirmed_decree (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:confirmed_decree: ", p), err) }
  return err
}

func (p *DuplicationConfirmEntry) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCheckpointPrepared() {
    if err := oprot.WriteFieldBegin(ctx, "checkpoint_prepared", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:checkpoint_prepared: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.CheckpointPrepared)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.checkpoint_prepared (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:checkpoint_prepared: ", p), err) }
  }
  return err
}

func (p *DuplicationConfirmEntry) Equals(other *DuplicationConfirmEntry) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Dupid != other.Dupid { return false }
  if p.ConfirmedDecree != other.ConfirmedDecree { return false }
  if p.CheckpointPrepared != other.CheckpointPrepared { return false }
  return true
}

func (p *DuplicationConfirmEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DuplicationConfirmEntry(%+v)", *p)
}

func (p *DuplicationConfirmEntry) Validate() error {
  return nil
}
// Attributes:
//  - Node
//  - ConfirmList
type DuplicationSyncRequest struct {
  Node *base.RPCAddress `thrift:"node,1" db:"node" json:"node"`
  ConfirmList map[*base.Gpid][]*DuplicationConfirmEntry `thrift:"confirm_list,2" db:"confirm_list" json:"confirm_list"`
}

func NewDuplicationSyncRequest() *DuplicationSyncRequest {
  return &DuplicationSyncRequest{}
}

var DuplicationSyncRequest_Node_DEFAULT *base.RPCAddress
func (p *DuplicationSyncRequest) GetNode() *base.RPCAddress {
  if !p.IsSetNode() {
    return DuplicationSyncRequest_Node_DEFAULT
  }
return p.Node
}

func (p *DuplicationSyncRequest) GetConfirmList() map[*base.Gpid][]*DuplicationConfirmEntry {
  return p.ConfirmList
}
func (p *DuplicationSyncRequest) IsSetNode() bool {
  return p.Node != nil
}

func (p *DuplicationSyncRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DuplicationSyncRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Node = &base.RPCAddress{}
  if err := p.Node.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *DuplicationSyncRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[*base.Gpid][]*DuplicationConfirmEntry, size)
  p.ConfirmList =  tMap
  for i := 0; i < size; i ++ {
    _key5 := &base.Gpid{}
    if err := _key5.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _key5), err)
    }
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*DuplicationConfirmEntry, 0, size)
    _val6 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem7 := &DuplicationConfirmEntry{}
      if err := _elem7.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
      }
      _val6 = append(_val6, _elem7)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.ConfirmList[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DuplicationSyncRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "duplication_sync_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DuplicationSyncRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
  if err := p.Node.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  return err
}

func (p *DuplicationSyncRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "confirm_list", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:confirm_list: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRUCT, thrift.LIST, len(p.ConfirmList)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ConfirmList {
    if err := k.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", k), err)
    }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:confirm_list: ", p), err) }
  return err
}

func (p *DuplicationSyncRequest) Equals(other *DuplicationSyncRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Node.Equals(other.Node) { return false }
  if len(p.ConfirmList) != len(other.ConfirmList) { return false }
  for k, _tgt := range p.ConfirmList {
    _src8 := other.ConfirmList[k]
    if len(_tgt) != len(_src8) { return false }
    for i, _tgt := range _tgt {
      _src9 := _src8[i]
      if !_tgt.Equals(_src9) { return false }
    }
  }
  return true
}

func (p *DuplicationSyncRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DuplicationSyncRequest(%+v)", *p)
}

func (p *DuplicationSyncRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - DupMap
type DuplicationSyncResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  DupMap map[int32]map[int32]*DuplicationEntry `thrift:"dup_map,2" db:"dup_map" json:"dup_map"`
}

func NewDuplicationSyncResponse() *DuplicationSyncResponse {
  return &DuplicationSyncResponse{}
}

var DuplicationSyncResponse_Err_DEFAULT *base.ErrorCode
func (p *DuplicationSyncResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return DuplicationSyncResponse_Err_DEFAULT
  }
return p.Err
}

func (p *DuplicationSyncResponse) GetDupMap() map[int32]map[int32]*DuplicationEntry {
  return p.DupMap
}
func (p *DuplicationSyncResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *DuplicationSyncResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DuplicationSyncResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DuplicationSyncResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]map[int32]*DuplicationEntry, size)
  p.DupMap =  tMap
  for i := 0; i < size; i ++ {
var _key10 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key10 = v
}
    _, _, size, err := iprot.ReadMapBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[int32]*DuplicationEntry, size)
    _val11 :=  tMap
    for i := 0; i < size; i ++ {
var _key12 int32
      if v, err := iprot.ReadI32(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key12 = v
}
      _val13 := &DuplicationEntry{}
      if err := _val13.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val13), err)
      }
      _val11[_key12] = _val13
    }
    if err := iprot.ReadMapEnd(ctx); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.DupMap[_key10] = _val11
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DuplicationSyncResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "duplication_sync_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DuplicationSyncResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *DuplicationSyncResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dup_map", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dup_map: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.MAP, len(p.DupMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.DupMap {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteI32(ctx, int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dup_map: ", p), err) }
  return err
}

func (p *DuplicationSyncResponse) Equals(other *DuplicationSyncResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.DupMap) != len(other.DupMap) { return false }
  for k, _tgt := range p.DupMap {
    _src14 := other.DupMap[k]
    if len(_tgt) != len(_src14) { return false }
    for k, _tgt := range _tgt {
      _src15 := _src14[k]
      if !_tgt.Equals(_src15) { return false }
    }
  }
  return true
}

func (p *DuplicationSyncResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DuplicationSyncResponse(%+v)", *p)
}

func (p *DuplicationSyncResponse) Validate() error {
  return nil
}
