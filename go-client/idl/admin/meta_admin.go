// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package admin

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"github.com/apache/incubator-pegasus/go-client/idl/base"
	"github.com/apache/incubator-pegasus/go-client/idl/replication"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = base.GoUnusedProtection__
var _ = replication.GoUnusedProtection__
type ConfigType int64
const (
  ConfigType_CT_INVALID ConfigType = 0
  ConfigType_CT_ASSIGN_PRIMARY ConfigType = 1
  ConfigType_CT_UPGRADE_TO_PRIMARY ConfigType = 2
  ConfigType_CT_ADD_SECONDARY ConfigType = 3
  ConfigType_CT_UPGRADE_TO_SECONDARY ConfigType = 4
  ConfigType_CT_DOWNGRADE_TO_SECONDARY ConfigType = 5
  ConfigType_CT_DOWNGRADE_TO_INACTIVE ConfigType = 6
  ConfigType_CT_REMOVE ConfigType = 7
  ConfigType_CT_ADD_SECONDARY_FOR_LB ConfigType = 8
  ConfigType_CT_PRIMARY_FORCE_UPDATE_BALLOT ConfigType = 9
  ConfigType_CT_DROP_PARTITION ConfigType = 10
  ConfigType_CT_REGISTER_CHILD ConfigType = 11
)

func (p ConfigType) String() string {
  switch p {
  case ConfigType_CT_INVALID: return "CT_INVALID"
  case ConfigType_CT_ASSIGN_PRIMARY: return "CT_ASSIGN_PRIMARY"
  case ConfigType_CT_UPGRADE_TO_PRIMARY: return "CT_UPGRADE_TO_PRIMARY"
  case ConfigType_CT_ADD_SECONDARY: return "CT_ADD_SECONDARY"
  case ConfigType_CT_UPGRADE_TO_SECONDARY: return "CT_UPGRADE_TO_SECONDARY"
  case ConfigType_CT_DOWNGRADE_TO_SECONDARY: return "CT_DOWNGRADE_TO_SECONDARY"
  case ConfigType_CT_DOWNGRADE_TO_INACTIVE: return "CT_DOWNGRADE_TO_INACTIVE"
  case ConfigType_CT_REMOVE: return "CT_REMOVE"
  case ConfigType_CT_ADD_SECONDARY_FOR_LB: return "CT_ADD_SECONDARY_FOR_LB"
  case ConfigType_CT_PRIMARY_FORCE_UPDATE_BALLOT: return "CT_PRIMARY_FORCE_UPDATE_BALLOT"
  case ConfigType_CT_DROP_PARTITION: return "CT_DROP_PARTITION"
  case ConfigType_CT_REGISTER_CHILD: return "CT_REGISTER_CHILD"
  }
  return "<UNSET>"
}

func ConfigTypeFromString(s string) (ConfigType, error) {
  switch s {
  case "CT_INVALID": return ConfigType_CT_INVALID, nil 
  case "CT_ASSIGN_PRIMARY": return ConfigType_CT_ASSIGN_PRIMARY, nil 
  case "CT_UPGRADE_TO_PRIMARY": return ConfigType_CT_UPGRADE_TO_PRIMARY, nil 
  case "CT_ADD_SECONDARY": return ConfigType_CT_ADD_SECONDARY, nil 
  case "CT_UPGRADE_TO_SECONDARY": return ConfigType_CT_UPGRADE_TO_SECONDARY, nil 
  case "CT_DOWNGRADE_TO_SECONDARY": return ConfigType_CT_DOWNGRADE_TO_SECONDARY, nil 
  case "CT_DOWNGRADE_TO_INACTIVE": return ConfigType_CT_DOWNGRADE_TO_INACTIVE, nil 
  case "CT_REMOVE": return ConfigType_CT_REMOVE, nil 
  case "CT_ADD_SECONDARY_FOR_LB": return ConfigType_CT_ADD_SECONDARY_FOR_LB, nil 
  case "CT_PRIMARY_FORCE_UPDATE_BALLOT": return ConfigType_CT_PRIMARY_FORCE_UPDATE_BALLOT, nil 
  case "CT_DROP_PARTITION": return ConfigType_CT_DROP_PARTITION, nil 
  case "CT_REGISTER_CHILD": return ConfigType_CT_REGISTER_CHILD, nil 
  }
  return ConfigType(0), fmt.Errorf("not a valid ConfigType string")
}


func ConfigTypePtr(v ConfigType) *ConfigType { return &v }

func (p ConfigType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ConfigType) UnmarshalText(text []byte) error {
q, err := ConfigTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ConfigType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ConfigType(v)
return nil
}

func (p * ConfigType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type NodeStatus int64
const (
  NodeStatus_NS_INVALID NodeStatus = 0
  NodeStatus_NS_ALIVE NodeStatus = 1
  NodeStatus_NS_UNALIVE NodeStatus = 2
)

func (p NodeStatus) String() string {
  switch p {
  case NodeStatus_NS_INVALID: return "NS_INVALID"
  case NodeStatus_NS_ALIVE: return "NS_ALIVE"
  case NodeStatus_NS_UNALIVE: return "NS_UNALIVE"
  }
  return "<UNSET>"
}

func NodeStatusFromString(s string) (NodeStatus, error) {
  switch s {
  case "NS_INVALID": return NodeStatus_NS_INVALID, nil 
  case "NS_ALIVE": return NodeStatus_NS_ALIVE, nil 
  case "NS_UNALIVE": return NodeStatus_NS_UNALIVE, nil 
  }
  return NodeStatus(0), fmt.Errorf("not a valid NodeStatus string")
}


func NodeStatusPtr(v NodeStatus) *NodeStatus { return &v }

func (p NodeStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NodeStatus) UnmarshalText(text []byte) error {
q, err := NodeStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NodeStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NodeStatus(v)
return nil
}

func (p * NodeStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AppEnvOperation int64
const (
  AppEnvOperation_APP_ENV_OP_INVALID AppEnvOperation = 0
  AppEnvOperation_APP_ENV_OP_SET AppEnvOperation = 1
  AppEnvOperation_APP_ENV_OP_DEL AppEnvOperation = 2
  AppEnvOperation_APP_ENV_OP_CLEAR AppEnvOperation = 3
)

func (p AppEnvOperation) String() string {
  switch p {
  case AppEnvOperation_APP_ENV_OP_INVALID: return "APP_ENV_OP_INVALID"
  case AppEnvOperation_APP_ENV_OP_SET: return "APP_ENV_OP_SET"
  case AppEnvOperation_APP_ENV_OP_DEL: return "APP_ENV_OP_DEL"
  case AppEnvOperation_APP_ENV_OP_CLEAR: return "APP_ENV_OP_CLEAR"
  }
  return "<UNSET>"
}

func AppEnvOperationFromString(s string) (AppEnvOperation, error) {
  switch s {
  case "APP_ENV_OP_INVALID": return AppEnvOperation_APP_ENV_OP_INVALID, nil 
  case "APP_ENV_OP_SET": return AppEnvOperation_APP_ENV_OP_SET, nil 
  case "APP_ENV_OP_DEL": return AppEnvOperation_APP_ENV_OP_DEL, nil 
  case "APP_ENV_OP_CLEAR": return AppEnvOperation_APP_ENV_OP_CLEAR, nil 
  }
  return AppEnvOperation(0), fmt.Errorf("not a valid AppEnvOperation string")
}


func AppEnvOperationPtr(v AppEnvOperation) *AppEnvOperation { return &v }

func (p AppEnvOperation) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AppEnvOperation) UnmarshalText(text []byte) error {
q, err := AppEnvOperationFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AppEnvOperation) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AppEnvOperation(v)
return nil
}

func (p * AppEnvOperation) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MetaFunctionLevel int64
const (
  MetaFunctionLevel_fl_stopped MetaFunctionLevel = 100
  MetaFunctionLevel_fl_blind MetaFunctionLevel = 200
  MetaFunctionLevel_fl_freezed MetaFunctionLevel = 300
  MetaFunctionLevel_fl_steady MetaFunctionLevel = 400
  MetaFunctionLevel_fl_lively MetaFunctionLevel = 500
  MetaFunctionLevel_fl_invalid MetaFunctionLevel = 10000
)

func (p MetaFunctionLevel) String() string {
  switch p {
  case MetaFunctionLevel_fl_stopped: return "fl_stopped"
  case MetaFunctionLevel_fl_blind: return "fl_blind"
  case MetaFunctionLevel_fl_freezed: return "fl_freezed"
  case MetaFunctionLevel_fl_steady: return "fl_steady"
  case MetaFunctionLevel_fl_lively: return "fl_lively"
  case MetaFunctionLevel_fl_invalid: return "fl_invalid"
  }
  return "<UNSET>"
}

func MetaFunctionLevelFromString(s string) (MetaFunctionLevel, error) {
  switch s {
  case "fl_stopped": return MetaFunctionLevel_fl_stopped, nil 
  case "fl_blind": return MetaFunctionLevel_fl_blind, nil 
  case "fl_freezed": return MetaFunctionLevel_fl_freezed, nil 
  case "fl_steady": return MetaFunctionLevel_fl_steady, nil 
  case "fl_lively": return MetaFunctionLevel_fl_lively, nil 
  case "fl_invalid": return MetaFunctionLevel_fl_invalid, nil 
  }
  return MetaFunctionLevel(0), fmt.Errorf("not a valid MetaFunctionLevel string")
}


func MetaFunctionLevelPtr(v MetaFunctionLevel) *MetaFunctionLevel { return &v }

func (p MetaFunctionLevel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MetaFunctionLevel) UnmarshalText(text []byte) error {
q, err := MetaFunctionLevelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MetaFunctionLevel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MetaFunctionLevel(v)
return nil
}

func (p * MetaFunctionLevel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type BalancerRequestType int64
const (
  BalancerRequestType_move_primary BalancerRequestType = 0
  BalancerRequestType_copy_primary BalancerRequestType = 1
  BalancerRequestType_copy_secondary BalancerRequestType = 2
)

func (p BalancerRequestType) String() string {
  switch p {
  case BalancerRequestType_move_primary: return "move_primary"
  case BalancerRequestType_copy_primary: return "copy_primary"
  case BalancerRequestType_copy_secondary: return "copy_secondary"
  }
  return "<UNSET>"
}

func BalancerRequestTypeFromString(s string) (BalancerRequestType, error) {
  switch s {
  case "move_primary": return BalancerRequestType_move_primary, nil 
  case "copy_primary": return BalancerRequestType_copy_primary, nil 
  case "copy_secondary": return BalancerRequestType_copy_secondary, nil 
  }
  return BalancerRequestType(0), fmt.Errorf("not a valid BalancerRequestType string")
}


func BalancerRequestTypePtr(v BalancerRequestType) *BalancerRequestType { return &v }

func (p BalancerRequestType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BalancerRequestType) UnmarshalText(text []byte) error {
q, err := BalancerRequestTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BalancerRequestType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BalancerRequestType(v)
return nil
}

func (p * BalancerRequestType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Info
//  - Config
//  - Type
//  - Node
//  - HostNode
//  - MetaSplitStatus
type ConfigurationUpdateRequest struct {
  Info *replication.AppInfo `thrift:"info,1" db:"info" json:"info"`
  Config *replication.PartitionConfiguration `thrift:"config,2" db:"config" json:"config"`
  Type ConfigType `thrift:"type,3" db:"type" json:"type"`
  Node *base.RPCAddress `thrift:"node,4" db:"node" json:"node"`
  HostNode *base.RPCAddress `thrift:"host_node,5" db:"host_node" json:"host_node"`
  MetaSplitStatus *SplitStatus `thrift:"meta_split_status,6" db:"meta_split_status" json:"meta_split_status,omitempty"`
}

func NewConfigurationUpdateRequest() *ConfigurationUpdateRequest {
  return &ConfigurationUpdateRequest{
Type: 0,
}
}

var ConfigurationUpdateRequest_Info_DEFAULT *replication.AppInfo
func (p *ConfigurationUpdateRequest) GetInfo() *replication.AppInfo {
  if !p.IsSetInfo() {
    return ConfigurationUpdateRequest_Info_DEFAULT
  }
return p.Info
}
var ConfigurationUpdateRequest_Config_DEFAULT *replication.PartitionConfiguration
func (p *ConfigurationUpdateRequest) GetConfig() *replication.PartitionConfiguration {
  if !p.IsSetConfig() {
    return ConfigurationUpdateRequest_Config_DEFAULT
  }
return p.Config
}

func (p *ConfigurationUpdateRequest) GetType() ConfigType {
  return p.Type
}
var ConfigurationUpdateRequest_Node_DEFAULT *base.RPCAddress
func (p *ConfigurationUpdateRequest) GetNode() *base.RPCAddress {
  if !p.IsSetNode() {
    return ConfigurationUpdateRequest_Node_DEFAULT
  }
return p.Node
}
var ConfigurationUpdateRequest_HostNode_DEFAULT *base.RPCAddress
func (p *ConfigurationUpdateRequest) GetHostNode() *base.RPCAddress {
  if !p.IsSetHostNode() {
    return ConfigurationUpdateRequest_HostNode_DEFAULT
  }
return p.HostNode
}
var ConfigurationUpdateRequest_MetaSplitStatus_DEFAULT SplitStatus
func (p *ConfigurationUpdateRequest) GetMetaSplitStatus() SplitStatus {
  if !p.IsSetMetaSplitStatus() {
    return ConfigurationUpdateRequest_MetaSplitStatus_DEFAULT
  }
return *p.MetaSplitStatus
}
func (p *ConfigurationUpdateRequest) IsSetInfo() bool {
  return p.Info != nil
}

func (p *ConfigurationUpdateRequest) IsSetConfig() bool {
  return p.Config != nil
}

func (p *ConfigurationUpdateRequest) IsSetNode() bool {
  return p.Node != nil
}

func (p *ConfigurationUpdateRequest) IsSetHostNode() bool {
  return p.HostNode != nil
}

func (p *ConfigurationUpdateRequest) IsSetMetaSplitStatus() bool {
  return p.MetaSplitStatus != nil
}

func (p *ConfigurationUpdateRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationUpdateRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Info = &replication.AppInfo{
  Status: 0,

  InitPartitionCount: -1,
}
  if err := p.Info.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *ConfigurationUpdateRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Config = &replication.PartitionConfiguration{}
  if err := p.Config.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *ConfigurationUpdateRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ConfigType(v)
  p.Type = temp
}
  return nil
}

func (p *ConfigurationUpdateRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Node = &base.RPCAddress{}
  if err := p.Node.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *ConfigurationUpdateRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.HostNode = &base.RPCAddress{}
  if err := p.HostNode.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HostNode), err)
  }
  return nil
}

func (p *ConfigurationUpdateRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := SplitStatus(v)
  p.MetaSplitStatus = &temp
}
  return nil
}

func (p *ConfigurationUpdateRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_update_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationUpdateRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:info: ", p), err) }
  if err := p.Info.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:info: ", p), err) }
  return err
}

func (p *ConfigurationUpdateRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "config", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:config: ", p), err) }
  if err := p.Config.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:config: ", p), err) }
  return err
}

func (p *ConfigurationUpdateRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *ConfigurationUpdateRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:node: ", p), err) }
  if err := p.Node.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:node: ", p), err) }
  return err
}

func (p *ConfigurationUpdateRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host_node", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:host_node: ", p), err) }
  if err := p.HostNode.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HostNode), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:host_node: ", p), err) }
  return err
}

func (p *ConfigurationUpdateRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMetaSplitStatus() {
    if err := oprot.WriteFieldBegin(ctx, "meta_split_status", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:meta_split_status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.MetaSplitStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.meta_split_status (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:meta_split_status: ", p), err) }
  }
  return err
}

func (p *ConfigurationUpdateRequest) Equals(other *ConfigurationUpdateRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Info.Equals(other.Info) { return false }
  if !p.Config.Equals(other.Config) { return false }
  if p.Type != other.Type { return false }
  if !p.Node.Equals(other.Node) { return false }
  if !p.HostNode.Equals(other.HostNode) { return false }
  if p.MetaSplitStatus != other.MetaSplitStatus {
    if p.MetaSplitStatus == nil || other.MetaSplitStatus == nil {
      return false
    }
    if (*p.MetaSplitStatus) != (*other.MetaSplitStatus) { return false }
  }
  return true
}

func (p *ConfigurationUpdateRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationUpdateRequest(%+v)", *p)
}

func (p *ConfigurationUpdateRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - Config
type ConfigurationUpdateResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Config *replication.PartitionConfiguration `thrift:"config,2" db:"config" json:"config"`
}

func NewConfigurationUpdateResponse() *ConfigurationUpdateResponse {
  return &ConfigurationUpdateResponse{}
}

var ConfigurationUpdateResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationUpdateResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationUpdateResponse_Err_DEFAULT
  }
return p.Err
}
var ConfigurationUpdateResponse_Config_DEFAULT *replication.PartitionConfiguration
func (p *ConfigurationUpdateResponse) GetConfig() *replication.PartitionConfiguration {
  if !p.IsSetConfig() {
    return ConfigurationUpdateResponse_Config_DEFAULT
  }
return p.Config
}
func (p *ConfigurationUpdateResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationUpdateResponse) IsSetConfig() bool {
  return p.Config != nil
}

func (p *ConfigurationUpdateResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationUpdateResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationUpdateResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Config = &replication.PartitionConfiguration{}
  if err := p.Config.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *ConfigurationUpdateResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_update_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationUpdateResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationUpdateResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "config", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:config: ", p), err) }
  if err := p.Config.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:config: ", p), err) }
  return err
}

func (p *ConfigurationUpdateResponse) Equals(other *ConfigurationUpdateResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if !p.Config.Equals(other.Config) { return false }
  return true
}

func (p *ConfigurationUpdateResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationUpdateResponse(%+v)", *p)
}

func (p *ConfigurationUpdateResponse) Validate() error {
  return nil
}
// Attributes:
//  - GeoTags
//  - TotalCapacityMb
type ReplicaServerInfo struct {
  GeoTags map[string]string `thrift:"geo_tags,1" db:"geo_tags" json:"geo_tags"`
  TotalCapacityMb int64 `thrift:"total_capacity_mb,2" db:"total_capacity_mb" json:"total_capacity_mb"`
}

func NewReplicaServerInfo() *ReplicaServerInfo {
  return &ReplicaServerInfo{}
}


func (p *ReplicaServerInfo) GetGeoTags() map[string]string {
  return p.GeoTags
}

func (p *ReplicaServerInfo) GetTotalCapacityMb() int64 {
  return p.TotalCapacityMb
}
func (p *ReplicaServerInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicaServerInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.GeoTags =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.GeoTags[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ReplicaServerInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TotalCapacityMb = v
}
  return nil
}

func (p *ReplicaServerInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "replica_server_info"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicaServerInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "geo_tags", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:geo_tags: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.GeoTags)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.GeoTags {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:geo_tags: ", p), err) }
  return err
}

func (p *ReplicaServerInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "total_capacity_mb", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:total_capacity_mb: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TotalCapacityMb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_capacity_mb (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:total_capacity_mb: ", p), err) }
  return err
}

func (p *ReplicaServerInfo) Equals(other *ReplicaServerInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.GeoTags) != len(other.GeoTags) { return false }
  for k, _tgt := range p.GeoTags {
    _src2 := other.GeoTags[k]
    if _tgt != _src2 { return false }
  }
  if p.TotalCapacityMb != other.TotalCapacityMb { return false }
  return true
}

func (p *ReplicaServerInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicaServerInfo(%+v)", *p)
}

func (p *ReplicaServerInfo) Validate() error {
  return nil
}
// Attributes:
//  - Node
//  - StoredReplicas
//  - Info
type ConfigurationQueryByNodeRequest struct {
  Node *base.RPCAddress `thrift:"node,1" db:"node" json:"node"`
  StoredReplicas []*ReplicaInfo `thrift:"stored_replicas,2" db:"stored_replicas" json:"stored_replicas,omitempty"`
  Info *ReplicaServerInfo `thrift:"info,3" db:"info" json:"info,omitempty"`
}

func NewConfigurationQueryByNodeRequest() *ConfigurationQueryByNodeRequest {
  return &ConfigurationQueryByNodeRequest{}
}

var ConfigurationQueryByNodeRequest_Node_DEFAULT *base.RPCAddress
func (p *ConfigurationQueryByNodeRequest) GetNode() *base.RPCAddress {
  if !p.IsSetNode() {
    return ConfigurationQueryByNodeRequest_Node_DEFAULT
  }
return p.Node
}
var ConfigurationQueryByNodeRequest_StoredReplicas_DEFAULT []*ReplicaInfo

func (p *ConfigurationQueryByNodeRequest) GetStoredReplicas() []*ReplicaInfo {
  return p.StoredReplicas
}
var ConfigurationQueryByNodeRequest_Info_DEFAULT *ReplicaServerInfo
func (p *ConfigurationQueryByNodeRequest) GetInfo() *ReplicaServerInfo {
  if !p.IsSetInfo() {
    return ConfigurationQueryByNodeRequest_Info_DEFAULT
  }
return p.Info
}
func (p *ConfigurationQueryByNodeRequest) IsSetNode() bool {
  return p.Node != nil
}

func (p *ConfigurationQueryByNodeRequest) IsSetStoredReplicas() bool {
  return p.StoredReplicas != nil
}

func (p *ConfigurationQueryByNodeRequest) IsSetInfo() bool {
  return p.Info != nil
}

func (p *ConfigurationQueryByNodeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Node = &base.RPCAddress{}
  if err := p.Node.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ReplicaInfo, 0, size)
  p.StoredReplicas =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &ReplicaInfo{}
    if err := _elem3.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.StoredReplicas = append(p.StoredReplicas, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Info = &ReplicaServerInfo{}
  if err := p.Info.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_query_by_node_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationQueryByNodeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
  if err := p.Node.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  return err
}

func (p *ConfigurationQueryByNodeRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStoredReplicas() {
    if err := oprot.WriteFieldBegin(ctx, "stored_replicas", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stored_replicas: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.StoredReplicas)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StoredReplicas {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stored_replicas: ", p), err) }
  }
  return err
}

func (p *ConfigurationQueryByNodeRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetInfo() {
    if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:info: ", p), err) }
    if err := p.Info.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:info: ", p), err) }
  }
  return err
}

func (p *ConfigurationQueryByNodeRequest) Equals(other *ConfigurationQueryByNodeRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Node.Equals(other.Node) { return false }
  if len(p.StoredReplicas) != len(other.StoredReplicas) { return false }
  for i, _tgt := range p.StoredReplicas {
    _src4 := other.StoredReplicas[i]
    if !_tgt.Equals(_src4) { return false }
  }
  if !p.Info.Equals(other.Info) { return false }
  return true
}

func (p *ConfigurationQueryByNodeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationQueryByNodeRequest(%+v)", *p)
}

func (p *ConfigurationQueryByNodeRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - Partitions
//  - GcReplicas
type ConfigurationQueryByNodeResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Partitions []*ConfigurationUpdateRequest `thrift:"partitions,2" db:"partitions" json:"partitions"`
  GcReplicas []*ReplicaInfo `thrift:"gc_replicas,3" db:"gc_replicas" json:"gc_replicas,omitempty"`
}

func NewConfigurationQueryByNodeResponse() *ConfigurationQueryByNodeResponse {
  return &ConfigurationQueryByNodeResponse{}
}

var ConfigurationQueryByNodeResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationQueryByNodeResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationQueryByNodeResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationQueryByNodeResponse) GetPartitions() []*ConfigurationUpdateRequest {
  return p.Partitions
}
var ConfigurationQueryByNodeResponse_GcReplicas_DEFAULT []*ReplicaInfo

func (p *ConfigurationQueryByNodeResponse) GetGcReplicas() []*ReplicaInfo {
  return p.GcReplicas
}
func (p *ConfigurationQueryByNodeResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationQueryByNodeResponse) IsSetGcReplicas() bool {
  return p.GcReplicas != nil
}

func (p *ConfigurationQueryByNodeResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigurationUpdateRequest, 0, size)
  p.Partitions =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &ConfigurationUpdateRequest{
    Type: 0,
}
    if err := _elem5.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.Partitions = append(p.Partitions, _elem5)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ReplicaInfo, 0, size)
  p.GcReplicas =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &ReplicaInfo{}
    if err := _elem6.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.GcReplicas = append(p.GcReplicas, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_query_by_node_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationQueryByNodeResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationQueryByNodeResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitions", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partitions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Partitions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Partitions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partitions: ", p), err) }
  return err
}

func (p *ConfigurationQueryByNodeResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGcReplicas() {
    if err := oprot.WriteFieldBegin(ctx, "gc_replicas", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gc_replicas: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.GcReplicas)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.GcReplicas {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gc_replicas: ", p), err) }
  }
  return err
}

func (p *ConfigurationQueryByNodeResponse) Equals(other *ConfigurationQueryByNodeResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.Partitions) != len(other.Partitions) { return false }
  for i, _tgt := range p.Partitions {
    _src7 := other.Partitions[i]
    if !_tgt.Equals(_src7) { return false }
  }
  if len(p.GcReplicas) != len(other.GcReplicas) { return false }
  for i, _tgt := range p.GcReplicas {
    _src8 := other.GcReplicas[i]
    if !_tgt.Equals(_src8) { return false }
  }
  return true
}

func (p *ConfigurationQueryByNodeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationQueryByNodeResponse(%+v)", *p)
}

func (p *ConfigurationQueryByNodeResponse) Validate() error {
  return nil
}
// Attributes:
//  - RecoverySet
//  - SkipBadNodes
//  - SkipLostPartitions
type ConfigurationRecoveryRequest struct {
  RecoverySet []*base.RPCAddress `thrift:"recovery_set,1" db:"recovery_set" json:"recovery_set"`
  SkipBadNodes bool `thrift:"skip_bad_nodes,2" db:"skip_bad_nodes" json:"skip_bad_nodes"`
  SkipLostPartitions bool `thrift:"skip_lost_partitions,3" db:"skip_lost_partitions" json:"skip_lost_partitions"`
}

func NewConfigurationRecoveryRequest() *ConfigurationRecoveryRequest {
  return &ConfigurationRecoveryRequest{}
}


func (p *ConfigurationRecoveryRequest) GetRecoverySet() []*base.RPCAddress {
  return p.RecoverySet
}

func (p *ConfigurationRecoveryRequest) GetSkipBadNodes() bool {
  return p.SkipBadNodes
}

func (p *ConfigurationRecoveryRequest) GetSkipLostPartitions() bool {
  return p.SkipLostPartitions
}
func (p *ConfigurationRecoveryRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationRecoveryRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*base.RPCAddress, 0, size)
  p.RecoverySet =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &base.RPCAddress{}
    if err := _elem9.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.RecoverySet = append(p.RecoverySet, _elem9)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationRecoveryRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SkipBadNodes = v
}
  return nil
}

func (p *ConfigurationRecoveryRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SkipLostPartitions = v
}
  return nil
}

func (p *ConfigurationRecoveryRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_recovery_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationRecoveryRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recovery_set", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:recovery_set: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RecoverySet)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RecoverySet {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:recovery_set: ", p), err) }
  return err
}

func (p *ConfigurationRecoveryRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "skip_bad_nodes", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:skip_bad_nodes: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SkipBadNodes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.skip_bad_nodes (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:skip_bad_nodes: ", p), err) }
  return err
}

func (p *ConfigurationRecoveryRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "skip_lost_partitions", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:skip_lost_partitions: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SkipLostPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.skip_lost_partitions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:skip_lost_partitions: ", p), err) }
  return err
}

func (p *ConfigurationRecoveryRequest) Equals(other *ConfigurationRecoveryRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.RecoverySet) != len(other.RecoverySet) { return false }
  for i, _tgt := range p.RecoverySet {
    _src10 := other.RecoverySet[i]
    if !_tgt.Equals(_src10) { return false }
  }
  if p.SkipBadNodes != other.SkipBadNodes { return false }
  if p.SkipLostPartitions != other.SkipLostPartitions { return false }
  return true
}

func (p *ConfigurationRecoveryRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationRecoveryRequest(%+v)", *p)
}

func (p *ConfigurationRecoveryRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - HintMessage
type ConfigurationRecoveryResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  HintMessage string `thrift:"hint_message,2" db:"hint_message" json:"hint_message"`
}

func NewConfigurationRecoveryResponse() *ConfigurationRecoveryResponse {
  return &ConfigurationRecoveryResponse{}
}

var ConfigurationRecoveryResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationRecoveryResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationRecoveryResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationRecoveryResponse) GetHintMessage() string {
  return p.HintMessage
}
func (p *ConfigurationRecoveryResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationRecoveryResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationRecoveryResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationRecoveryResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HintMessage = v
}
  return nil
}

func (p *ConfigurationRecoveryResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_recovery_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationRecoveryResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationRecoveryResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hint_message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hint_message: ", p), err) }
  return err
}

func (p *ConfigurationRecoveryResponse) Equals(other *ConfigurationRecoveryResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.HintMessage != other.HintMessage { return false }
  return true
}

func (p *ConfigurationRecoveryResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationRecoveryResponse(%+v)", *p)
}

func (p *ConfigurationRecoveryResponse) Validate() error {
  return nil
}
// Attributes:
//  - PartitionCount
//  - ReplicaCount
//  - SuccessIfExist
//  - AppType
//  - IsStateful
//  - Envs
type CreateAppOptions struct {
  PartitionCount int32 `thrift:"partition_count,1" db:"partition_count" json:"partition_count"`
  ReplicaCount int32 `thrift:"replica_count,2" db:"replica_count" json:"replica_count"`
  SuccessIfExist bool `thrift:"success_if_exist,3" db:"success_if_exist" json:"success_if_exist"`
  AppType string `thrift:"app_type,4" db:"app_type" json:"app_type"`
  IsStateful bool `thrift:"is_stateful,5" db:"is_stateful" json:"is_stateful"`
  Envs map[string]string `thrift:"envs,6" db:"envs" json:"envs"`
}

func NewCreateAppOptions() *CreateAppOptions {
  return &CreateAppOptions{}
}


func (p *CreateAppOptions) GetPartitionCount() int32 {
  return p.PartitionCount
}

func (p *CreateAppOptions) GetReplicaCount() int32 {
  return p.ReplicaCount
}

func (p *CreateAppOptions) GetSuccessIfExist() bool {
  return p.SuccessIfExist
}

func (p *CreateAppOptions) GetAppType() string {
  return p.AppType
}

func (p *CreateAppOptions) GetIsStateful() bool {
  return p.IsStateful
}

func (p *CreateAppOptions) GetEnvs() map[string]string {
  return p.Envs
}
func (p *CreateAppOptions) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateAppOptions)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PartitionCount = v
}
  return nil
}

func (p *CreateAppOptions)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReplicaCount = v
}
  return nil
}

func (p *CreateAppOptions)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SuccessIfExist = v
}
  return nil
}

func (p *CreateAppOptions)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AppType = v
}
  return nil
}

func (p *CreateAppOptions)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsStateful = v
}
  return nil
}

func (p *CreateAppOptions)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Envs =  tMap
  for i := 0; i < size; i ++ {
var _key11 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key11 = v
}
var _val12 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val12 = v
}
    p.Envs[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CreateAppOptions) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_app_options"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateAppOptions) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_count", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partition_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_count (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partition_count: ", p), err) }
  return err
}

func (p *CreateAppOptions) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "replica_count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:replica_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReplicaCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.replica_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:replica_count: ", p), err) }
  return err
}

func (p *CreateAppOptions) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "success_if_exist", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:success_if_exist: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SuccessIfExist)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.success_if_exist (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:success_if_exist: ", p), err) }
  return err
}

func (p *CreateAppOptions) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_type", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:app_type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:app_type: ", p), err) }
  return err
}

func (p *CreateAppOptions) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "is_stateful", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_stateful: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsStateful)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_stateful (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_stateful: ", p), err) }
  return err
}

func (p *CreateAppOptions) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "envs", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:envs: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Envs)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Envs {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:envs: ", p), err) }
  return err
}

func (p *CreateAppOptions) Equals(other *CreateAppOptions) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PartitionCount != other.PartitionCount { return false }
  if p.ReplicaCount != other.ReplicaCount { return false }
  if p.SuccessIfExist != other.SuccessIfExist { return false }
  if p.AppType != other.AppType { return false }
  if p.IsStateful != other.IsStateful { return false }
  if len(p.Envs) != len(other.Envs) { return false }
  for k, _tgt := range p.Envs {
    _src13 := other.Envs[k]
    if _tgt != _src13 { return false }
  }
  return true
}

func (p *CreateAppOptions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateAppOptions(%+v)", *p)
}

func (p *CreateAppOptions) Validate() error {
  return nil
}
// Attributes:
//  - AppName
//  - Options
type ConfigurationCreateAppRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  Options *CreateAppOptions `thrift:"options,2" db:"options" json:"options"`
}

func NewConfigurationCreateAppRequest() *ConfigurationCreateAppRequest {
  return &ConfigurationCreateAppRequest{}
}


func (p *ConfigurationCreateAppRequest) GetAppName() string {
  return p.AppName
}
var ConfigurationCreateAppRequest_Options_DEFAULT *CreateAppOptions
func (p *ConfigurationCreateAppRequest) GetOptions() *CreateAppOptions {
  if !p.IsSetOptions() {
    return ConfigurationCreateAppRequest_Options_DEFAULT
  }
return p.Options
}
func (p *ConfigurationCreateAppRequest) IsSetOptions() bool {
  return p.Options != nil
}

func (p *ConfigurationCreateAppRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationCreateAppRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *ConfigurationCreateAppRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Options = &CreateAppOptions{}
  if err := p.Options.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
  }
  return nil
}

func (p *ConfigurationCreateAppRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_create_app_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationCreateAppRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *ConfigurationCreateAppRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "options", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err) }
  if err := p.Options.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err) }
  return err
}

func (p *ConfigurationCreateAppRequest) Equals(other *ConfigurationCreateAppRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if !p.Options.Equals(other.Options) { return false }
  return true
}

func (p *ConfigurationCreateAppRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationCreateAppRequest(%+v)", *p)
}

func (p *ConfigurationCreateAppRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - Appid
type ConfigurationCreateAppResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Appid int32 `thrift:"appid,2" db:"appid" json:"appid"`
}

func NewConfigurationCreateAppResponse() *ConfigurationCreateAppResponse {
  return &ConfigurationCreateAppResponse{}
}

var ConfigurationCreateAppResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationCreateAppResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationCreateAppResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationCreateAppResponse) GetAppid() int32 {
  return p.Appid
}
func (p *ConfigurationCreateAppResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationCreateAppResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationCreateAppResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationCreateAppResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *ConfigurationCreateAppResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_create_app_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationCreateAppResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationCreateAppResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *ConfigurationCreateAppResponse) Equals(other *ConfigurationCreateAppResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.Appid != other.Appid { return false }
  return true
}

func (p *ConfigurationCreateAppResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationCreateAppResponse(%+v)", *p)
}

func (p *ConfigurationCreateAppResponse) Validate() error {
  return nil
}
// Attributes:
//  - SuccessIfNotExist
//  - ReserveSeconds
type DropAppOptions struct {
  SuccessIfNotExist bool `thrift:"success_if_not_exist,1" db:"success_if_not_exist" json:"success_if_not_exist"`
  ReserveSeconds *int64 `thrift:"reserve_seconds,2" db:"reserve_seconds" json:"reserve_seconds,omitempty"`
}

func NewDropAppOptions() *DropAppOptions {
  return &DropAppOptions{}
}


func (p *DropAppOptions) GetSuccessIfNotExist() bool {
  return p.SuccessIfNotExist
}
var DropAppOptions_ReserveSeconds_DEFAULT int64
func (p *DropAppOptions) GetReserveSeconds() int64 {
  if !p.IsSetReserveSeconds() {
    return DropAppOptions_ReserveSeconds_DEFAULT
  }
return *p.ReserveSeconds
}
func (p *DropAppOptions) IsSetReserveSeconds() bool {
  return p.ReserveSeconds != nil
}

func (p *DropAppOptions) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropAppOptions)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SuccessIfNotExist = v
}
  return nil
}

func (p *DropAppOptions)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReserveSeconds = &v
}
  return nil
}

func (p *DropAppOptions) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_app_options"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropAppOptions) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "success_if_not_exist", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success_if_not_exist: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SuccessIfNotExist)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.success_if_not_exist (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success_if_not_exist: ", p), err) }
  return err
}

func (p *DropAppOptions) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReserveSeconds() {
    if err := oprot.WriteFieldBegin(ctx, "reserve_seconds", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reserve_seconds: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ReserveSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reserve_seconds (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reserve_seconds: ", p), err) }
  }
  return err
}

func (p *DropAppOptions) Equals(other *DropAppOptions) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SuccessIfNotExist != other.SuccessIfNotExist { return false }
  if p.ReserveSeconds != other.ReserveSeconds {
    if p.ReserveSeconds == nil || other.ReserveSeconds == nil {
      return false
    }
    if (*p.ReserveSeconds) != (*other.ReserveSeconds) { return false }
  }
  return true
}

func (p *DropAppOptions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropAppOptions(%+v)", *p)
}

func (p *DropAppOptions) Validate() error {
  return nil
}
// Attributes:
//  - AppName
//  - Options
type ConfigurationDropAppRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  Options *DropAppOptions `thrift:"options,2" db:"options" json:"options"`
}

func NewConfigurationDropAppRequest() *ConfigurationDropAppRequest {
  return &ConfigurationDropAppRequest{}
}


func (p *ConfigurationDropAppRequest) GetAppName() string {
  return p.AppName
}
var ConfigurationDropAppRequest_Options_DEFAULT *DropAppOptions
func (p *ConfigurationDropAppRequest) GetOptions() *DropAppOptions {
  if !p.IsSetOptions() {
    return ConfigurationDropAppRequest_Options_DEFAULT
  }
return p.Options
}
func (p *ConfigurationDropAppRequest) IsSetOptions() bool {
  return p.Options != nil
}

func (p *ConfigurationDropAppRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationDropAppRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *ConfigurationDropAppRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Options = &DropAppOptions{}
  if err := p.Options.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
  }
  return nil
}

func (p *ConfigurationDropAppRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_drop_app_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationDropAppRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *ConfigurationDropAppRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "options", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err) }
  if err := p.Options.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err) }
  return err
}

func (p *ConfigurationDropAppRequest) Equals(other *ConfigurationDropAppRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if !p.Options.Equals(other.Options) { return false }
  return true
}

func (p *ConfigurationDropAppRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationDropAppRequest(%+v)", *p)
}

func (p *ConfigurationDropAppRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
type ConfigurationDropAppResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
}

func NewConfigurationDropAppResponse() *ConfigurationDropAppResponse {
  return &ConfigurationDropAppResponse{}
}

var ConfigurationDropAppResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationDropAppResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationDropAppResponse_Err_DEFAULT
  }
return p.Err
}
func (p *ConfigurationDropAppResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationDropAppResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationDropAppResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationDropAppResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_drop_app_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationDropAppResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationDropAppResponse) Equals(other *ConfigurationDropAppResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  return true
}

func (p *ConfigurationDropAppResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationDropAppResponse(%+v)", *p)
}

func (p *ConfigurationDropAppResponse) Validate() error {
  return nil
}
// Attributes:
//  - OldAppName
//  - NewAppName_
type ConfigurationRenameAppRequest struct {
  OldAppName string `thrift:"old_app_name,1" db:"old_app_name" json:"old_app_name"`
  NewAppName_ string `thrift:"new_app_name,2" db:"new_app_name" json:"new_app_name"`
}

func NewConfigurationRenameAppRequest() *ConfigurationRenameAppRequest {
  return &ConfigurationRenameAppRequest{}
}


func (p *ConfigurationRenameAppRequest) GetOldAppName() string {
  return p.OldAppName
}

func (p *ConfigurationRenameAppRequest) GetNewAppName_() string {
  return p.NewAppName_
}
func (p *ConfigurationRenameAppRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationRenameAppRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OldAppName = v
}
  return nil
}

func (p *ConfigurationRenameAppRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewAppName_ = v
}
  return nil
}

func (p *ConfigurationRenameAppRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_rename_app_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationRenameAppRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "old_app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:old_app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OldAppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old_app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:old_app_name: ", p), err) }
  return err
}

func (p *ConfigurationRenameAppRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_app_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NewAppName_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_app_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_app_name: ", p), err) }
  return err
}

func (p *ConfigurationRenameAppRequest) Equals(other *ConfigurationRenameAppRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.OldAppName != other.OldAppName { return false }
  if p.NewAppName_ != other.NewAppName_ { return false }
  return true
}

func (p *ConfigurationRenameAppRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationRenameAppRequest(%+v)", *p)
}

func (p *ConfigurationRenameAppRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - HintMessage
type ConfigurationRenameAppResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  HintMessage string `thrift:"hint_message,2" db:"hint_message" json:"hint_message"`
}

func NewConfigurationRenameAppResponse() *ConfigurationRenameAppResponse {
  return &ConfigurationRenameAppResponse{}
}

var ConfigurationRenameAppResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationRenameAppResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationRenameAppResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationRenameAppResponse) GetHintMessage() string {
  return p.HintMessage
}
func (p *ConfigurationRenameAppResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationRenameAppResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationRenameAppResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationRenameAppResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HintMessage = v
}
  return nil
}

func (p *ConfigurationRenameAppResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_rename_app_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationRenameAppResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationRenameAppResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hint_message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hint_message: ", p), err) }
  return err
}

func (p *ConfigurationRenameAppResponse) Equals(other *ConfigurationRenameAppResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.HintMessage != other.HintMessage { return false }
  return true
}

func (p *ConfigurationRenameAppResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationRenameAppResponse(%+v)", *p)
}

func (p *ConfigurationRenameAppResponse) Validate() error {
  return nil
}
// Attributes:
//  - AppID
//  - NewAppName_
type ConfigurationRecallAppRequest struct {
  AppID int32 `thrift:"app_id,1" db:"app_id" json:"app_id"`
  NewAppName_ string `thrift:"new_app_name,2" db:"new_app_name" json:"new_app_name"`
}

func NewConfigurationRecallAppRequest() *ConfigurationRecallAppRequest {
  return &ConfigurationRecallAppRequest{}
}


func (p *ConfigurationRecallAppRequest) GetAppID() int32 {
  return p.AppID
}

func (p *ConfigurationRecallAppRequest) GetNewAppName_() string {
  return p.NewAppName_
}
func (p *ConfigurationRecallAppRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationRecallAppRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *ConfigurationRecallAppRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewAppName_ = v
}
  return nil
}

func (p *ConfigurationRecallAppRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_recall_app_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationRecallAppRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_id: ", p), err) }
  return err
}

func (p *ConfigurationRecallAppRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_app_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NewAppName_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_app_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_app_name: ", p), err) }
  return err
}

func (p *ConfigurationRecallAppRequest) Equals(other *ConfigurationRecallAppRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppID != other.AppID { return false }
  if p.NewAppName_ != other.NewAppName_ { return false }
  return true
}

func (p *ConfigurationRecallAppRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationRecallAppRequest(%+v)", *p)
}

func (p *ConfigurationRecallAppRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - Info
type ConfigurationRecallAppResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Info *replication.AppInfo `thrift:"info,2" db:"info" json:"info"`
}

func NewConfigurationRecallAppResponse() *ConfigurationRecallAppResponse {
  return &ConfigurationRecallAppResponse{}
}

var ConfigurationRecallAppResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationRecallAppResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationRecallAppResponse_Err_DEFAULT
  }
return p.Err
}
var ConfigurationRecallAppResponse_Info_DEFAULT *replication.AppInfo
func (p *ConfigurationRecallAppResponse) GetInfo() *replication.AppInfo {
  if !p.IsSetInfo() {
    return ConfigurationRecallAppResponse_Info_DEFAULT
  }
return p.Info
}
func (p *ConfigurationRecallAppResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationRecallAppResponse) IsSetInfo() bool {
  return p.Info != nil
}

func (p *ConfigurationRecallAppResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationRecallAppResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationRecallAppResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Info = &replication.AppInfo{
  Status: 0,

  InitPartitionCount: -1,
}
  if err := p.Info.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *ConfigurationRecallAppResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_recall_app_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationRecallAppResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationRecallAppResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
  if err := p.Info.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  return err
}

func (p *ConfigurationRecallAppResponse) Equals(other *ConfigurationRecallAppResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if !p.Info.Equals(other.Info) { return false }
  return true
}

func (p *ConfigurationRecallAppResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationRecallAppResponse(%+v)", *p)
}

func (p *ConfigurationRecallAppResponse) Validate() error {
  return nil
}
// Attributes:
//  - Status
type ConfigurationListAppsRequest struct {
  Status replication.AppStatus `thrift:"status,1" db:"status" json:"status"`
}

func NewConfigurationListAppsRequest() *ConfigurationListAppsRequest {
  return &ConfigurationListAppsRequest{
Status: 0,
}
}


func (p *ConfigurationListAppsRequest) GetStatus() replication.AppStatus {
  return p.Status
}
func (p *ConfigurationListAppsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationListAppsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := replication.AppStatus(v)
  p.Status = temp
}
  return nil
}

func (p *ConfigurationListAppsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_list_apps_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationListAppsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *ConfigurationListAppsRequest) Equals(other *ConfigurationListAppsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *ConfigurationListAppsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationListAppsRequest(%+v)", *p)
}

func (p *ConfigurationListAppsRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - Infos
type ConfigurationListAppsResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Infos []*replication.AppInfo `thrift:"infos,2" db:"infos" json:"infos"`
}

func NewConfigurationListAppsResponse() *ConfigurationListAppsResponse {
  return &ConfigurationListAppsResponse{}
}

var ConfigurationListAppsResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationListAppsResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationListAppsResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationListAppsResponse) GetInfos() []*replication.AppInfo {
  return p.Infos
}
func (p *ConfigurationListAppsResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationListAppsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationListAppsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationListAppsResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*replication.AppInfo, 0, size)
  p.Infos =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &replication.AppInfo{
    Status: 0,

    InitPartitionCount: -1,
}
    if err := _elem14.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Infos = append(p.Infos, _elem14)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationListAppsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_list_apps_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationListAppsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationListAppsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "infos", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:infos: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Infos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Infos {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:infos: ", p), err) }
  return err
}

func (p *ConfigurationListAppsResponse) Equals(other *ConfigurationListAppsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.Infos) != len(other.Infos) { return false }
  for i, _tgt := range p.Infos {
    _src15 := other.Infos[i]
    if !_tgt.Equals(_src15) { return false }
  }
  return true
}

func (p *ConfigurationListAppsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationListAppsResponse(%+v)", *p)
}

func (p *ConfigurationListAppsResponse) Validate() error {
  return nil
}
// Attributes:
//  - MetaServer
type QueryAppInfoRequest struct {
  MetaServer *base.RPCAddress `thrift:"meta_server,1" db:"meta_server" json:"meta_server"`
}

func NewQueryAppInfoRequest() *QueryAppInfoRequest {
  return &QueryAppInfoRequest{}
}

var QueryAppInfoRequest_MetaServer_DEFAULT *base.RPCAddress
func (p *QueryAppInfoRequest) GetMetaServer() *base.RPCAddress {
  if !p.IsSetMetaServer() {
    return QueryAppInfoRequest_MetaServer_DEFAULT
  }
return p.MetaServer
}
func (p *QueryAppInfoRequest) IsSetMetaServer() bool {
  return p.MetaServer != nil
}

func (p *QueryAppInfoRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryAppInfoRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.MetaServer = &base.RPCAddress{}
  if err := p.MetaServer.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MetaServer), err)
  }
  return nil
}

func (p *QueryAppInfoRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_app_info_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryAppInfoRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "meta_server", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:meta_server: ", p), err) }
  if err := p.MetaServer.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MetaServer), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:meta_server: ", p), err) }
  return err
}

func (p *QueryAppInfoRequest) Equals(other *QueryAppInfoRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.MetaServer.Equals(other.MetaServer) { return false }
  return true
}

func (p *QueryAppInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryAppInfoRequest(%+v)", *p)
}

func (p *QueryAppInfoRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - Apps
type QueryAppInfoResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Apps []*replication.AppInfo `thrift:"apps,2" db:"apps" json:"apps"`
}

func NewQueryAppInfoResponse() *QueryAppInfoResponse {
  return &QueryAppInfoResponse{}
}

var QueryAppInfoResponse_Err_DEFAULT *base.ErrorCode
func (p *QueryAppInfoResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return QueryAppInfoResponse_Err_DEFAULT
  }
return p.Err
}

func (p *QueryAppInfoResponse) GetApps() []*replication.AppInfo {
  return p.Apps
}
func (p *QueryAppInfoResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *QueryAppInfoResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryAppInfoResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *QueryAppInfoResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*replication.AppInfo, 0, size)
  p.Apps =  tSlice
  for i := 0; i < size; i ++ {
    _elem16 := &replication.AppInfo{
    Status: 0,

    InitPartitionCount: -1,
}
    if err := _elem16.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
    }
    p.Apps = append(p.Apps, _elem16)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *QueryAppInfoResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_app_info_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryAppInfoResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *QueryAppInfoResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "apps", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:apps: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Apps)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Apps {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:apps: ", p), err) }
  return err
}

func (p *QueryAppInfoResponse) Equals(other *QueryAppInfoResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.Apps) != len(other.Apps) { return false }
  for i, _tgt := range p.Apps {
    _src17 := other.Apps[i]
    if !_tgt.Equals(_src17) { return false }
  }
  return true
}

func (p *QueryAppInfoResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryAppInfoResponse(%+v)", *p)
}

func (p *QueryAppInfoResponse) Validate() error {
  return nil
}
// Attributes:
//  - AppName
//  - Op
//  - Keys
//  - Values
//  - ClearPrefix
type ConfigurationUpdateAppEnvRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  Op AppEnvOperation `thrift:"op,2" db:"op" json:"op"`
  Keys []string `thrift:"keys,3" db:"keys" json:"keys,omitempty"`
  Values []string `thrift:"values,4" db:"values" json:"values,omitempty"`
  ClearPrefix *string `thrift:"clear_prefix,5" db:"clear_prefix" json:"clear_prefix,omitempty"`
}

func NewConfigurationUpdateAppEnvRequest() *ConfigurationUpdateAppEnvRequest {
  return &ConfigurationUpdateAppEnvRequest{
Op: 0,
}
}


func (p *ConfigurationUpdateAppEnvRequest) GetAppName() string {
  return p.AppName
}

func (p *ConfigurationUpdateAppEnvRequest) GetOp() AppEnvOperation {
  return p.Op
}
var ConfigurationUpdateAppEnvRequest_Keys_DEFAULT []string

func (p *ConfigurationUpdateAppEnvRequest) GetKeys() []string {
  return p.Keys
}
var ConfigurationUpdateAppEnvRequest_Values_DEFAULT []string

func (p *ConfigurationUpdateAppEnvRequest) GetValues() []string {
  return p.Values
}
var ConfigurationUpdateAppEnvRequest_ClearPrefix_DEFAULT string
func (p *ConfigurationUpdateAppEnvRequest) GetClearPrefix() string {
  if !p.IsSetClearPrefix() {
    return ConfigurationUpdateAppEnvRequest_ClearPrefix_DEFAULT
  }
return *p.ClearPrefix
}
func (p *ConfigurationUpdateAppEnvRequest) IsSetKeys() bool {
  return p.Keys != nil
}

func (p *ConfigurationUpdateAppEnvRequest) IsSetValues() bool {
  return p.Values != nil
}

func (p *ConfigurationUpdateAppEnvRequest) IsSetClearPrefix() bool {
  return p.ClearPrefix != nil
}

func (p *ConfigurationUpdateAppEnvRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := AppEnvOperation(v)
  p.Op = temp
}
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.Keys = append(p.Keys, _elem18)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem19 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem19 = v
}
    p.Values = append(p.Values, _elem19)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ClearPrefix = &v
}
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_update_app_env_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *ConfigurationUpdateAppEnvRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "op", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err) }
  return err
}

func (p *ConfigurationUpdateAppEnvRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetKeys() {
    if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:keys: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Keys {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:keys: ", p), err) }
  }
  return err
}

func (p *ConfigurationUpdateAppEnvRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetValues() {
    if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:values: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Values)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Values {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:values: ", p), err) }
  }
  return err
}

func (p *ConfigurationUpdateAppEnvRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetClearPrefix() {
    if err := oprot.WriteFieldBegin(ctx, "clear_prefix", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:clear_prefix: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ClearPrefix)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.clear_prefix (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:clear_prefix: ", p), err) }
  }
  return err
}

func (p *ConfigurationUpdateAppEnvRequest) Equals(other *ConfigurationUpdateAppEnvRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if p.Op != other.Op { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src20 := other.Keys[i]
    if _tgt != _src20 { return false }
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src21 := other.Values[i]
    if _tgt != _src21 { return false }
  }
  if p.ClearPrefix != other.ClearPrefix {
    if p.ClearPrefix == nil || other.ClearPrefix == nil {
      return false
    }
    if (*p.ClearPrefix) != (*other.ClearPrefix) { return false }
  }
  return true
}

func (p *ConfigurationUpdateAppEnvRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationUpdateAppEnvRequest(%+v)", *p)
}

func (p *ConfigurationUpdateAppEnvRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - HintMessage
type ConfigurationUpdateAppEnvResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  HintMessage string `thrift:"hint_message,2" db:"hint_message" json:"hint_message"`
}

func NewConfigurationUpdateAppEnvResponse() *ConfigurationUpdateAppEnvResponse {
  return &ConfigurationUpdateAppEnvResponse{}
}

var ConfigurationUpdateAppEnvResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationUpdateAppEnvResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationUpdateAppEnvResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationUpdateAppEnvResponse) GetHintMessage() string {
  return p.HintMessage
}
func (p *ConfigurationUpdateAppEnvResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationUpdateAppEnvResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationUpdateAppEnvResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationUpdateAppEnvResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HintMessage = v
}
  return nil
}

func (p *ConfigurationUpdateAppEnvResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_update_app_env_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationUpdateAppEnvResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationUpdateAppEnvResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hint_message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hint_message: ", p), err) }
  return err
}

func (p *ConfigurationUpdateAppEnvResponse) Equals(other *ConfigurationUpdateAppEnvResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.HintMessage != other.HintMessage { return false }
  return true
}

func (p *ConfigurationUpdateAppEnvResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationUpdateAppEnvResponse(%+v)", *p)
}

func (p *ConfigurationUpdateAppEnvResponse) Validate() error {
  return nil
}
// Attributes:
//  - AppName
//  - TriggerTime
//  - TargetLevel
//  - Bottommost
//  - MaxRunningCount
type StartAppManualCompactRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  TriggerTime *int64 `thrift:"trigger_time,2" db:"trigger_time" json:"trigger_time,omitempty"`
  TargetLevel *int32 `thrift:"target_level,3" db:"target_level" json:"target_level,omitempty"`
  Bottommost *bool `thrift:"bottommost,4" db:"bottommost" json:"bottommost,omitempty"`
  MaxRunningCount *int32 `thrift:"max_running_count,5" db:"max_running_count" json:"max_running_count,omitempty"`
}

func NewStartAppManualCompactRequest() *StartAppManualCompactRequest {
  return &StartAppManualCompactRequest{}
}


func (p *StartAppManualCompactRequest) GetAppName() string {
  return p.AppName
}
var StartAppManualCompactRequest_TriggerTime_DEFAULT int64
func (p *StartAppManualCompactRequest) GetTriggerTime() int64 {
  if !p.IsSetTriggerTime() {
    return StartAppManualCompactRequest_TriggerTime_DEFAULT
  }
return *p.TriggerTime
}
var StartAppManualCompactRequest_TargetLevel_DEFAULT int32
func (p *StartAppManualCompactRequest) GetTargetLevel() int32 {
  if !p.IsSetTargetLevel() {
    return StartAppManualCompactRequest_TargetLevel_DEFAULT
  }
return *p.TargetLevel
}
var StartAppManualCompactRequest_Bottommost_DEFAULT bool
func (p *StartAppManualCompactRequest) GetBottommost() bool {
  if !p.IsSetBottommost() {
    return StartAppManualCompactRequest_Bottommost_DEFAULT
  }
return *p.Bottommost
}
var StartAppManualCompactRequest_MaxRunningCount_DEFAULT int32
func (p *StartAppManualCompactRequest) GetMaxRunningCount() int32 {
  if !p.IsSetMaxRunningCount() {
    return StartAppManualCompactRequest_MaxRunningCount_DEFAULT
  }
return *p.MaxRunningCount
}
func (p *StartAppManualCompactRequest) IsSetTriggerTime() bool {
  return p.TriggerTime != nil
}

func (p *StartAppManualCompactRequest) IsSetTargetLevel() bool {
  return p.TargetLevel != nil
}

func (p *StartAppManualCompactRequest) IsSetBottommost() bool {
  return p.Bottommost != nil
}

func (p *StartAppManualCompactRequest) IsSetMaxRunningCount() bool {
  return p.MaxRunningCount != nil
}

func (p *StartAppManualCompactRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StartAppManualCompactRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *StartAppManualCompactRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TriggerTime = &v
}
  return nil
}

func (p *StartAppManualCompactRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TargetLevel = &v
}
  return nil
}

func (p *StartAppManualCompactRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Bottommost = &v
}
  return nil
}

func (p *StartAppManualCompactRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxRunningCount = &v
}
  return nil
}

func (p *StartAppManualCompactRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_app_manual_compact_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StartAppManualCompactRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *StartAppManualCompactRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTriggerTime() {
    if err := oprot.WriteFieldBegin(ctx, "trigger_time", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trigger_time: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TriggerTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.trigger_time (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trigger_time: ", p), err) }
  }
  return err
}

func (p *StartAppManualCompactRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTargetLevel() {
    if err := oprot.WriteFieldBegin(ctx, "target_level", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:target_level: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.TargetLevel)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.target_level (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:target_level: ", p), err) }
  }
  return err
}

func (p *StartAppManualCompactRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBottommost() {
    if err := oprot.WriteFieldBegin(ctx, "bottommost", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:bottommost: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Bottommost)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bottommost (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:bottommost: ", p), err) }
  }
  return err
}

func (p *StartAppManualCompactRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxRunningCount() {
    if err := oprot.WriteFieldBegin(ctx, "max_running_count", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:max_running_count: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.MaxRunningCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.max_running_count (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:max_running_count: ", p), err) }
  }
  return err
}

func (p *StartAppManualCompactRequest) Equals(other *StartAppManualCompactRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if p.TriggerTime != other.TriggerTime {
    if p.TriggerTime == nil || other.TriggerTime == nil {
      return false
    }
    if (*p.TriggerTime) != (*other.TriggerTime) { return false }
  }
  if p.TargetLevel != other.TargetLevel {
    if p.TargetLevel == nil || other.TargetLevel == nil {
      return false
    }
    if (*p.TargetLevel) != (*other.TargetLevel) { return false }
  }
  if p.Bottommost != other.Bottommost {
    if p.Bottommost == nil || other.Bottommost == nil {
      return false
    }
    if (*p.Bottommost) != (*other.Bottommost) { return false }
  }
  if p.MaxRunningCount != other.MaxRunningCount {
    if p.MaxRunningCount == nil || other.MaxRunningCount == nil {
      return false
    }
    if (*p.MaxRunningCount) != (*other.MaxRunningCount) { return false }
  }
  return true
}

func (p *StartAppManualCompactRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StartAppManualCompactRequest(%+v)", *p)
}

func (p *StartAppManualCompactRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - HintMsg
type StartAppManualCompactResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  HintMsg string `thrift:"hint_msg,2" db:"hint_msg" json:"hint_msg"`
}

func NewStartAppManualCompactResponse() *StartAppManualCompactResponse {
  return &StartAppManualCompactResponse{}
}

var StartAppManualCompactResponse_Err_DEFAULT *base.ErrorCode
func (p *StartAppManualCompactResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return StartAppManualCompactResponse_Err_DEFAULT
  }
return p.Err
}

func (p *StartAppManualCompactResponse) GetHintMsg() string {
  return p.HintMsg
}
func (p *StartAppManualCompactResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *StartAppManualCompactResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StartAppManualCompactResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *StartAppManualCompactResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HintMsg = v
}
  return nil
}

func (p *StartAppManualCompactResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_app_manual_compact_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StartAppManualCompactResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *StartAppManualCompactResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hint_msg: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hint_msg: ", p), err) }
  return err
}

func (p *StartAppManualCompactResponse) Equals(other *StartAppManualCompactResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.HintMsg != other.HintMsg { return false }
  return true
}

func (p *StartAppManualCompactResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StartAppManualCompactResponse(%+v)", *p)
}

func (p *StartAppManualCompactResponse) Validate() error {
  return nil
}
// Attributes:
//  - AppName
type QueryAppManualCompactRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
}

func NewQueryAppManualCompactRequest() *QueryAppManualCompactRequest {
  return &QueryAppManualCompactRequest{}
}


func (p *QueryAppManualCompactRequest) GetAppName() string {
  return p.AppName
}
func (p *QueryAppManualCompactRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryAppManualCompactRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *QueryAppManualCompactRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_app_manual_compact_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryAppManualCompactRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *QueryAppManualCompactRequest) Equals(other *QueryAppManualCompactRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  return true
}

func (p *QueryAppManualCompactRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryAppManualCompactRequest(%+v)", *p)
}

func (p *QueryAppManualCompactRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - HintMsg
//  - Progress
type QueryAppManualCompactResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  HintMsg string `thrift:"hint_msg,2" db:"hint_msg" json:"hint_msg"`
  Progress *int32 `thrift:"progress,3" db:"progress" json:"progress,omitempty"`
}

func NewQueryAppManualCompactResponse() *QueryAppManualCompactResponse {
  return &QueryAppManualCompactResponse{}
}

var QueryAppManualCompactResponse_Err_DEFAULT *base.ErrorCode
func (p *QueryAppManualCompactResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return QueryAppManualCompactResponse_Err_DEFAULT
  }
return p.Err
}

func (p *QueryAppManualCompactResponse) GetHintMsg() string {
  return p.HintMsg
}
var QueryAppManualCompactResponse_Progress_DEFAULT int32
func (p *QueryAppManualCompactResponse) GetProgress() int32 {
  if !p.IsSetProgress() {
    return QueryAppManualCompactResponse_Progress_DEFAULT
  }
return *p.Progress
}
func (p *QueryAppManualCompactResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *QueryAppManualCompactResponse) IsSetProgress() bool {
  return p.Progress != nil
}

func (p *QueryAppManualCompactResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryAppManualCompactResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *QueryAppManualCompactResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HintMsg = v
}
  return nil
}

func (p *QueryAppManualCompactResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Progress = &v
}
  return nil
}

func (p *QueryAppManualCompactResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_app_manual_compact_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryAppManualCompactResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *QueryAppManualCompactResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hint_msg: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hint_msg: ", p), err) }
  return err
}

func (p *QueryAppManualCompactResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetProgress() {
    if err := oprot.WriteFieldBegin(ctx, "progress", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:progress: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Progress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.progress (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:progress: ", p), err) }
  }
  return err
}

func (p *QueryAppManualCompactResponse) Equals(other *QueryAppManualCompactResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.HintMsg != other.HintMsg { return false }
  if p.Progress != other.Progress {
    if p.Progress == nil || other.Progress == nil {
      return false
    }
    if (*p.Progress) != (*other.Progress) { return false }
  }
  return true
}

func (p *QueryAppManualCompactResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryAppManualCompactResponse(%+v)", *p)
}

func (p *QueryAppManualCompactResponse) Validate() error {
  return nil
}
// Attributes:
//  - Status
//  - Address
type NodeInfo struct {
  Status NodeStatus `thrift:"status,1" db:"status" json:"status"`
  Address *base.RPCAddress `thrift:"address,2" db:"address" json:"address"`
}

func NewNodeInfo() *NodeInfo {
  return &NodeInfo{
Status: 0,
}
}


func (p *NodeInfo) GetStatus() NodeStatus {
  return p.Status
}
var NodeInfo_Address_DEFAULT *base.RPCAddress
func (p *NodeInfo) GetAddress() *base.RPCAddress {
  if !p.IsSetAddress() {
    return NodeInfo_Address_DEFAULT
  }
return p.Address
}
func (p *NodeInfo) IsSetAddress() bool {
  return p.Address != nil
}

func (p *NodeInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NodeInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := NodeStatus(v)
  p.Status = temp
}
  return nil
}

func (p *NodeInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Address = &base.RPCAddress{}
  if err := p.Address.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Address), err)
  }
  return nil
}

func (p *NodeInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "node_info"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NodeInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *NodeInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err) }
  if err := p.Address.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Address), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err) }
  return err
}

func (p *NodeInfo) Equals(other *NodeInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if !p.Address.Equals(other.Address) { return false }
  return true
}

func (p *NodeInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NodeInfo(%+v)", *p)
}

func (p *NodeInfo) Validate() error {
  return nil
}
// Attributes:
//  - Status
type ConfigurationListNodesRequest struct {
  Status NodeStatus `thrift:"status,1" db:"status" json:"status"`
}

func NewConfigurationListNodesRequest() *ConfigurationListNodesRequest {
  return &ConfigurationListNodesRequest{
Status: 0,
}
}


func (p *ConfigurationListNodesRequest) GetStatus() NodeStatus {
  return p.Status
}
func (p *ConfigurationListNodesRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationListNodesRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := NodeStatus(v)
  p.Status = temp
}
  return nil
}

func (p *ConfigurationListNodesRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_list_nodes_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationListNodesRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *ConfigurationListNodesRequest) Equals(other *ConfigurationListNodesRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *ConfigurationListNodesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationListNodesRequest(%+v)", *p)
}

func (p *ConfigurationListNodesRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - Infos
type ConfigurationListNodesResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Infos []*NodeInfo `thrift:"infos,2" db:"infos" json:"infos"`
}

func NewConfigurationListNodesResponse() *ConfigurationListNodesResponse {
  return &ConfigurationListNodesResponse{}
}

var ConfigurationListNodesResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationListNodesResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationListNodesResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationListNodesResponse) GetInfos() []*NodeInfo {
  return p.Infos
}
func (p *ConfigurationListNodesResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationListNodesResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationListNodesResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationListNodesResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NodeInfo, 0, size)
  p.Infos =  tSlice
  for i := 0; i < size; i ++ {
    _elem22 := &NodeInfo{
    Status: 0,
}
    if err := _elem22.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
    }
    p.Infos = append(p.Infos, _elem22)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationListNodesResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_list_nodes_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationListNodesResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationListNodesResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "infos", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:infos: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Infos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Infos {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:infos: ", p), err) }
  return err
}

func (p *ConfigurationListNodesResponse) Equals(other *ConfigurationListNodesResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.Infos) != len(other.Infos) { return false }
  for i, _tgt := range p.Infos {
    _src23 := other.Infos[i]
    if !_tgt.Equals(_src23) { return false }
  }
  return true
}

func (p *ConfigurationListNodesResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationListNodesResponse(%+v)", *p)
}

func (p *ConfigurationListNodesResponse) Validate() error {
  return nil
}
type ConfigurationClusterInfoRequest struct {
}

func NewConfigurationClusterInfoRequest() *ConfigurationClusterInfoRequest {
  return &ConfigurationClusterInfoRequest{}
}

func (p *ConfigurationClusterInfoRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationClusterInfoRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_cluster_info_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationClusterInfoRequest) Equals(other *ConfigurationClusterInfoRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *ConfigurationClusterInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationClusterInfoRequest(%+v)", *p)
}

func (p *ConfigurationClusterInfoRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - Keys
//  - Values
type ConfigurationClusterInfoResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Keys []string `thrift:"keys,2" db:"keys" json:"keys"`
  Values []string `thrift:"values,3" db:"values" json:"values"`
}

func NewConfigurationClusterInfoResponse() *ConfigurationClusterInfoResponse {
  return &ConfigurationClusterInfoResponse{}
}

var ConfigurationClusterInfoResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationClusterInfoResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationClusterInfoResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationClusterInfoResponse) GetKeys() []string {
  return p.Keys
}

func (p *ConfigurationClusterInfoResponse) GetValues() []string {
  return p.Values
}
func (p *ConfigurationClusterInfoResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationClusterInfoResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationClusterInfoResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationClusterInfoResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem24 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem24 = v
}
    p.Keys = append(p.Keys, _elem24)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationClusterInfoResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem25 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem25 = v
}
    p.Values = append(p.Values, _elem25)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationClusterInfoResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_cluster_info_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationClusterInfoResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationClusterInfoResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *ConfigurationClusterInfoResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err) }
  return err
}

func (p *ConfigurationClusterInfoResponse) Equals(other *ConfigurationClusterInfoResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src26 := other.Keys[i]
    if _tgt != _src26 { return false }
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src27 := other.Values[i]
    if _tgt != _src27 { return false }
  }
  return true
}

func (p *ConfigurationClusterInfoResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationClusterInfoResponse(%+v)", *p)
}

func (p *ConfigurationClusterInfoResponse) Validate() error {
  return nil
}
// Attributes:
//  - Level
type ConfigurationMetaControlRequest struct {
  Level MetaFunctionLevel `thrift:"level,1" db:"level" json:"level"`
}

func NewConfigurationMetaControlRequest() *ConfigurationMetaControlRequest {
  return &ConfigurationMetaControlRequest{}
}


func (p *ConfigurationMetaControlRequest) GetLevel() MetaFunctionLevel {
  return p.Level
}
func (p *ConfigurationMetaControlRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationMetaControlRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MetaFunctionLevel(v)
  p.Level = temp
}
  return nil
}

func (p *ConfigurationMetaControlRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_meta_control_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationMetaControlRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "level", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:level: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:level: ", p), err) }
  return err
}

func (p *ConfigurationMetaControlRequest) Equals(other *ConfigurationMetaControlRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Level != other.Level { return false }
  return true
}

func (p *ConfigurationMetaControlRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationMetaControlRequest(%+v)", *p)
}

func (p *ConfigurationMetaControlRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - OldLevel
type ConfigurationMetaControlResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  OldLevel MetaFunctionLevel `thrift:"old_level,2" db:"old_level" json:"old_level"`
}

func NewConfigurationMetaControlResponse() *ConfigurationMetaControlResponse {
  return &ConfigurationMetaControlResponse{}
}

var ConfigurationMetaControlResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationMetaControlResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationMetaControlResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationMetaControlResponse) GetOldLevel() MetaFunctionLevel {
  return p.OldLevel
}
func (p *ConfigurationMetaControlResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationMetaControlResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationMetaControlResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationMetaControlResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MetaFunctionLevel(v)
  p.OldLevel = temp
}
  return nil
}

func (p *ConfigurationMetaControlResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_meta_control_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationMetaControlResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationMetaControlResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "old_level", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:old_level: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OldLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old_level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:old_level: ", p), err) }
  return err
}

func (p *ConfigurationMetaControlResponse) Equals(other *ConfigurationMetaControlResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.OldLevel != other.OldLevel { return false }
  return true
}

func (p *ConfigurationMetaControlResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationMetaControlResponse(%+v)", *p)
}

func (p *ConfigurationMetaControlResponse) Validate() error {
  return nil
}
// Attributes:
//  - Target
//  - Node
//  - Type
type ConfigurationProposalAction struct {
  Target *base.RPCAddress `thrift:"target,1" db:"target" json:"target"`
  Node *base.RPCAddress `thrift:"node,2" db:"node" json:"node"`
  Type ConfigType `thrift:"type,3" db:"type" json:"type"`
}

func NewConfigurationProposalAction() *ConfigurationProposalAction {
  return &ConfigurationProposalAction{}
}

var ConfigurationProposalAction_Target_DEFAULT *base.RPCAddress
func (p *ConfigurationProposalAction) GetTarget() *base.RPCAddress {
  if !p.IsSetTarget() {
    return ConfigurationProposalAction_Target_DEFAULT
  }
return p.Target
}
var ConfigurationProposalAction_Node_DEFAULT *base.RPCAddress
func (p *ConfigurationProposalAction) GetNode() *base.RPCAddress {
  if !p.IsSetNode() {
    return ConfigurationProposalAction_Node_DEFAULT
  }
return p.Node
}

func (p *ConfigurationProposalAction) GetType() ConfigType {
  return p.Type
}
func (p *ConfigurationProposalAction) IsSetTarget() bool {
  return p.Target != nil
}

func (p *ConfigurationProposalAction) IsSetNode() bool {
  return p.Node != nil
}

func (p *ConfigurationProposalAction) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationProposalAction)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Target = &base.RPCAddress{}
  if err := p.Target.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Target), err)
  }
  return nil
}

func (p *ConfigurationProposalAction)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Node = &base.RPCAddress{}
  if err := p.Node.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *ConfigurationProposalAction)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ConfigType(v)
  p.Type = temp
}
  return nil
}

func (p *ConfigurationProposalAction) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_proposal_action"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationProposalAction) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "target", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:target: ", p), err) }
  if err := p.Target.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Target), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:target: ", p), err) }
  return err
}

func (p *ConfigurationProposalAction) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:node: ", p), err) }
  if err := p.Node.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:node: ", p), err) }
  return err
}

func (p *ConfigurationProposalAction) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *ConfigurationProposalAction) Equals(other *ConfigurationProposalAction) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Target.Equals(other.Target) { return false }
  if !p.Node.Equals(other.Node) { return false }
  if p.Type != other.Type { return false }
  return true
}

func (p *ConfigurationProposalAction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationProposalAction(%+v)", *p)
}

func (p *ConfigurationProposalAction) Validate() error {
  return nil
}
// Attributes:
//  - Gpid
//  - ActionList
//  - Force
//  - BalanceType
type ConfigurationBalancerRequest struct {
  Gpid *base.Gpid `thrift:"gpid,1" db:"gpid" json:"gpid"`
  ActionList []*ConfigurationProposalAction `thrift:"action_list,2" db:"action_list" json:"action_list"`
  Force bool `thrift:"force,3" db:"force" json:"force"`
  BalanceType *BalancerRequestType `thrift:"balance_type,4" db:"balance_type" json:"balance_type,omitempty"`
}

func NewConfigurationBalancerRequest() *ConfigurationBalancerRequest {
  return &ConfigurationBalancerRequest{}
}

var ConfigurationBalancerRequest_Gpid_DEFAULT *base.Gpid
func (p *ConfigurationBalancerRequest) GetGpid() *base.Gpid {
  if !p.IsSetGpid() {
    return ConfigurationBalancerRequest_Gpid_DEFAULT
  }
return p.Gpid
}

func (p *ConfigurationBalancerRequest) GetActionList() []*ConfigurationProposalAction {
  return p.ActionList
}
var ConfigurationBalancerRequest_Force_DEFAULT bool = false

func (p *ConfigurationBalancerRequest) GetForce() bool {
  return p.Force
}
var ConfigurationBalancerRequest_BalanceType_DEFAULT BalancerRequestType
func (p *ConfigurationBalancerRequest) GetBalanceType() BalancerRequestType {
  if !p.IsSetBalanceType() {
    return ConfigurationBalancerRequest_BalanceType_DEFAULT
  }
return *p.BalanceType
}
func (p *ConfigurationBalancerRequest) IsSetGpid() bool {
  return p.Gpid != nil
}

func (p *ConfigurationBalancerRequest) IsSetForce() bool {
  return p.Force != ConfigurationBalancerRequest_Force_DEFAULT
}

func (p *ConfigurationBalancerRequest) IsSetBalanceType() bool {
  return p.BalanceType != nil
}

func (p *ConfigurationBalancerRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationBalancerRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Gpid = &base.Gpid{}
  if err := p.Gpid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Gpid), err)
  }
  return nil
}

func (p *ConfigurationBalancerRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigurationProposalAction, 0, size)
  p.ActionList =  tSlice
  for i := 0; i < size; i ++ {
    _elem28 := &ConfigurationProposalAction{}
    if err := _elem28.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
    }
    p.ActionList = append(p.ActionList, _elem28)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationBalancerRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Force = v
}
  return nil
}

func (p *ConfigurationBalancerRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := BalancerRequestType(v)
  p.BalanceType = &temp
}
  return nil
}

func (p *ConfigurationBalancerRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_balancer_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationBalancerRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gpid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gpid: ", p), err) }
  if err := p.Gpid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Gpid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gpid: ", p), err) }
  return err
}

func (p *ConfigurationBalancerRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "action_list", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:action_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ActionList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ActionList {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:action_list: ", p), err) }
  return err
}

func (p *ConfigurationBalancerRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetForce() {
    if err := oprot.WriteFieldBegin(ctx, "force", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:force: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.Force)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.force (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:force: ", p), err) }
  }
  return err
}

func (p *ConfigurationBalancerRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBalanceType() {
    if err := oprot.WriteFieldBegin(ctx, "balance_type", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:balance_type: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.BalanceType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.balance_type (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:balance_type: ", p), err) }
  }
  return err
}

func (p *ConfigurationBalancerRequest) Equals(other *ConfigurationBalancerRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Gpid.Equals(other.Gpid) { return false }
  if len(p.ActionList) != len(other.ActionList) { return false }
  for i, _tgt := range p.ActionList {
    _src29 := other.ActionList[i]
    if !_tgt.Equals(_src29) { return false }
  }
  if p.Force != other.Force { return false }
  if p.BalanceType != other.BalanceType {
    if p.BalanceType == nil || other.BalanceType == nil {
      return false
    }
    if (*p.BalanceType) != (*other.BalanceType) { return false }
  }
  return true
}

func (p *ConfigurationBalancerRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationBalancerRequest(%+v)", *p)
}

func (p *ConfigurationBalancerRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
type ConfigurationBalancerResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
}

func NewConfigurationBalancerResponse() *ConfigurationBalancerResponse {
  return &ConfigurationBalancerResponse{}
}

var ConfigurationBalancerResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationBalancerResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationBalancerResponse_Err_DEFAULT
  }
return p.Err
}
func (p *ConfigurationBalancerResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationBalancerResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationBalancerResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationBalancerResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_balancer_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationBalancerResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationBalancerResponse) Equals(other *ConfigurationBalancerResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  return true
}

func (p *ConfigurationBalancerResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationBalancerResponse(%+v)", *p)
}

func (p *ConfigurationBalancerResponse) Validate() error {
  return nil
}
// Attributes:
//  - Pid
type DddDiagnoseRequest struct {
  Pid *base.Gpid `thrift:"pid,1" db:"pid" json:"pid"`
}

func NewDddDiagnoseRequest() *DddDiagnoseRequest {
  return &DddDiagnoseRequest{}
}

var DddDiagnoseRequest_Pid_DEFAULT *base.Gpid
func (p *DddDiagnoseRequest) GetPid() *base.Gpid {
  if !p.IsSetPid() {
    return DddDiagnoseRequest_Pid_DEFAULT
  }
return p.Pid
}
func (p *DddDiagnoseRequest) IsSetPid() bool {
  return p.Pid != nil
}

func (p *DddDiagnoseRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DddDiagnoseRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Pid = &base.Gpid{}
  if err := p.Pid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pid), err)
  }
  return nil
}

func (p *DddDiagnoseRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ddd_diagnose_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DddDiagnoseRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pid: ", p), err) }
  if err := p.Pid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pid: ", p), err) }
  return err
}

func (p *DddDiagnoseRequest) Equals(other *DddDiagnoseRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Pid.Equals(other.Pid) { return false }
  return true
}

func (p *DddDiagnoseRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DddDiagnoseRequest(%+v)", *p)
}

func (p *DddDiagnoseRequest) Validate() error {
  return nil
}
// Attributes:
//  - Node
//  - DropTimeMs
//  - IsAlive
//  - IsCollected
//  - Ballot
//  - LastCommittedDecree
//  - LastPreparedDecree
type DddNodeInfo struct {
  Node *base.RPCAddress `thrift:"node,1" db:"node" json:"node"`
  DropTimeMs int64 `thrift:"drop_time_ms,2" db:"drop_time_ms" json:"drop_time_ms"`
  IsAlive bool `thrift:"is_alive,3" db:"is_alive" json:"is_alive"`
  IsCollected bool `thrift:"is_collected,4" db:"is_collected" json:"is_collected"`
  Ballot int64 `thrift:"ballot,5" db:"ballot" json:"ballot"`
  LastCommittedDecree int64 `thrift:"last_committed_decree,6" db:"last_committed_decree" json:"last_committed_decree"`
  LastPreparedDecree int64 `thrift:"last_prepared_decree,7" db:"last_prepared_decree" json:"last_prepared_decree"`
}

func NewDddNodeInfo() *DddNodeInfo {
  return &DddNodeInfo{}
}

var DddNodeInfo_Node_DEFAULT *base.RPCAddress
func (p *DddNodeInfo) GetNode() *base.RPCAddress {
  if !p.IsSetNode() {
    return DddNodeInfo_Node_DEFAULT
  }
return p.Node
}

func (p *DddNodeInfo) GetDropTimeMs() int64 {
  return p.DropTimeMs
}

func (p *DddNodeInfo) GetIsAlive() bool {
  return p.IsAlive
}

func (p *DddNodeInfo) GetIsCollected() bool {
  return p.IsCollected
}

func (p *DddNodeInfo) GetBallot() int64 {
  return p.Ballot
}

func (p *DddNodeInfo) GetLastCommittedDecree() int64 {
  return p.LastCommittedDecree
}

func (p *DddNodeInfo) GetLastPreparedDecree() int64 {
  return p.LastPreparedDecree
}
func (p *DddNodeInfo) IsSetNode() bool {
  return p.Node != nil
}

func (p *DddNodeInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DddNodeInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Node = &base.RPCAddress{}
  if err := p.Node.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *DddNodeInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DropTimeMs = v
}
  return nil
}

func (p *DddNodeInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsAlive = v
}
  return nil
}

func (p *DddNodeInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsCollected = v
}
  return nil
}

func (p *DddNodeInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Ballot = v
}
  return nil
}

func (p *DddNodeInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastCommittedDecree = v
}
  return nil
}

func (p *DddNodeInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LastPreparedDecree = v
}
  return nil
}

func (p *DddNodeInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ddd_node_info"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DddNodeInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
  if err := p.Node.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  return err
}

func (p *DddNodeInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "drop_time_ms", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:drop_time_ms: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.DropTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.drop_time_ms (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:drop_time_ms: ", p), err) }
  return err
}

func (p *DddNodeInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "is_alive", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_alive: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsAlive)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_alive (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_alive: ", p), err) }
  return err
}

func (p *DddNodeInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "is_collected", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_collected: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsCollected)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_collected (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_collected: ", p), err) }
  return err
}

func (p *DddNodeInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ballot", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ballot: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Ballot)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ballot (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ballot: ", p), err) }
  return err
}

func (p *DddNodeInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "last_committed_decree", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:last_committed_decree: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastCommittedDecree)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_committed_decree (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:last_committed_decree: ", p), err) }
  return err
}

func (p *DddNodeInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "last_prepared_decree", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:last_prepared_decree: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastPreparedDecree)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_prepared_decree (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:last_prepared_decree: ", p), err) }
  return err
}

func (p *DddNodeInfo) Equals(other *DddNodeInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Node.Equals(other.Node) { return false }
  if p.DropTimeMs != other.DropTimeMs { return false }
  if p.IsAlive != other.IsAlive { return false }
  if p.IsCollected != other.IsCollected { return false }
  if p.Ballot != other.Ballot { return false }
  if p.LastCommittedDecree != other.LastCommittedDecree { return false }
  if p.LastPreparedDecree != other.LastPreparedDecree { return false }
  return true
}

func (p *DddNodeInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DddNodeInfo(%+v)", *p)
}

func (p *DddNodeInfo) Validate() error {
  return nil
}
// Attributes:
//  - Config
//  - Dropped
//  - Reason
type DddPartitionInfo struct {
  Config *replication.PartitionConfiguration `thrift:"config,1" db:"config" json:"config"`
  Dropped []*DddNodeInfo `thrift:"dropped,2" db:"dropped" json:"dropped"`
  Reason string `thrift:"reason,3" db:"reason" json:"reason"`
}

func NewDddPartitionInfo() *DddPartitionInfo {
  return &DddPartitionInfo{}
}

var DddPartitionInfo_Config_DEFAULT *replication.PartitionConfiguration
func (p *DddPartitionInfo) GetConfig() *replication.PartitionConfiguration {
  if !p.IsSetConfig() {
    return DddPartitionInfo_Config_DEFAULT
  }
return p.Config
}

func (p *DddPartitionInfo) GetDropped() []*DddNodeInfo {
  return p.Dropped
}

func (p *DddPartitionInfo) GetReason() string {
  return p.Reason
}
func (p *DddPartitionInfo) IsSetConfig() bool {
  return p.Config != nil
}

func (p *DddPartitionInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DddPartitionInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Config = &replication.PartitionConfiguration{}
  if err := p.Config.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *DddPartitionInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DddNodeInfo, 0, size)
  p.Dropped =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := &DddNodeInfo{}
    if err := _elem30.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.Dropped = append(p.Dropped, _elem30)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DddPartitionInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *DddPartitionInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ddd_partition_info"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DddPartitionInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "config", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:config: ", p), err) }
  if err := p.Config.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:config: ", p), err) }
  return err
}

func (p *DddPartitionInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dropped", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dropped: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Dropped)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Dropped {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dropped: ", p), err) }
  return err
}

func (p *DddPartitionInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reason", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reason: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reason: ", p), err) }
  return err
}

func (p *DddPartitionInfo) Equals(other *DddPartitionInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Config.Equals(other.Config) { return false }
  if len(p.Dropped) != len(other.Dropped) { return false }
  for i, _tgt := range p.Dropped {
    _src31 := other.Dropped[i]
    if !_tgt.Equals(_src31) { return false }
  }
  if p.Reason != other.Reason { return false }
  return true
}

func (p *DddPartitionInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DddPartitionInfo(%+v)", *p)
}

func (p *DddPartitionInfo) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - Partitions
type DddDiagnoseResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Partitions []*DddPartitionInfo `thrift:"partitions,2" db:"partitions" json:"partitions"`
}

func NewDddDiagnoseResponse() *DddDiagnoseResponse {
  return &DddDiagnoseResponse{}
}

var DddDiagnoseResponse_Err_DEFAULT *base.ErrorCode
func (p *DddDiagnoseResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return DddDiagnoseResponse_Err_DEFAULT
  }
return p.Err
}

func (p *DddDiagnoseResponse) GetPartitions() []*DddPartitionInfo {
  return p.Partitions
}
func (p *DddDiagnoseResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *DddDiagnoseResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DddDiagnoseResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DddDiagnoseResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DddPartitionInfo, 0, size)
  p.Partitions =  tSlice
  for i := 0; i < size; i ++ {
    _elem32 := &DddPartitionInfo{}
    if err := _elem32.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
    }
    p.Partitions = append(p.Partitions, _elem32)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DddDiagnoseResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ddd_diagnose_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DddDiagnoseResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *DddDiagnoseResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitions", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partitions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Partitions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Partitions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partitions: ", p), err) }
  return err
}

func (p *DddDiagnoseResponse) Equals(other *DddDiagnoseResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.Partitions) != len(other.Partitions) { return false }
  for i, _tgt := range p.Partitions {
    _src33 := other.Partitions[i]
    if !_tgt.Equals(_src33) { return false }
  }
  return true
}

func (p *DddDiagnoseResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DddDiagnoseResponse(%+v)", *p)
}

func (p *DddDiagnoseResponse) Validate() error {
  return nil
}
// Attributes:
//  - AppName
type ConfigurationGetMaxReplicaCountRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
}

func NewConfigurationGetMaxReplicaCountRequest() *ConfigurationGetMaxReplicaCountRequest {
  return &ConfigurationGetMaxReplicaCountRequest{}
}


func (p *ConfigurationGetMaxReplicaCountRequest) GetAppName() string {
  return p.AppName
}
func (p *ConfigurationGetMaxReplicaCountRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationGetMaxReplicaCountRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *ConfigurationGetMaxReplicaCountRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_get_max_replica_count_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationGetMaxReplicaCountRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *ConfigurationGetMaxReplicaCountRequest) Equals(other *ConfigurationGetMaxReplicaCountRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  return true
}

func (p *ConfigurationGetMaxReplicaCountRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationGetMaxReplicaCountRequest(%+v)", *p)
}

func (p *ConfigurationGetMaxReplicaCountRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - MaxReplicaCount
//  - HintMessage
type ConfigurationGetMaxReplicaCountResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  MaxReplicaCount int32 `thrift:"max_replica_count,2" db:"max_replica_count" json:"max_replica_count"`
  HintMessage string `thrift:"hint_message,3" db:"hint_message" json:"hint_message"`
}

func NewConfigurationGetMaxReplicaCountResponse() *ConfigurationGetMaxReplicaCountResponse {
  return &ConfigurationGetMaxReplicaCountResponse{}
}

var ConfigurationGetMaxReplicaCountResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationGetMaxReplicaCountResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationGetMaxReplicaCountResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationGetMaxReplicaCountResponse) GetMaxReplicaCount() int32 {
  return p.MaxReplicaCount
}

func (p *ConfigurationGetMaxReplicaCountResponse) GetHintMessage() string {
  return p.HintMessage
}
func (p *ConfigurationGetMaxReplicaCountResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationGetMaxReplicaCountResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationGetMaxReplicaCountResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationGetMaxReplicaCountResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MaxReplicaCount = v
}
  return nil
}

func (p *ConfigurationGetMaxReplicaCountResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HintMessage = v
}
  return nil
}

func (p *ConfigurationGetMaxReplicaCountResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_get_max_replica_count_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationGetMaxReplicaCountResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationGetMaxReplicaCountResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_replica_count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max_replica_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxReplicaCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_replica_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max_replica_count: ", p), err) }
  return err
}

func (p *ConfigurationGetMaxReplicaCountResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_message", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hint_message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_message (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hint_message: ", p), err) }
  return err
}

func (p *ConfigurationGetMaxReplicaCountResponse) Equals(other *ConfigurationGetMaxReplicaCountResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.MaxReplicaCount != other.MaxReplicaCount { return false }
  if p.HintMessage != other.HintMessage { return false }
  return true
}

func (p *ConfigurationGetMaxReplicaCountResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationGetMaxReplicaCountResponse(%+v)", *p)
}

func (p *ConfigurationGetMaxReplicaCountResponse) Validate() error {
  return nil
}
// Attributes:
//  - AppName
//  - MaxReplicaCount
type ConfigurationSetMaxReplicaCountRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  MaxReplicaCount int32 `thrift:"max_replica_count,2" db:"max_replica_count" json:"max_replica_count"`
}

func NewConfigurationSetMaxReplicaCountRequest() *ConfigurationSetMaxReplicaCountRequest {
  return &ConfigurationSetMaxReplicaCountRequest{}
}


func (p *ConfigurationSetMaxReplicaCountRequest) GetAppName() string {
  return p.AppName
}

func (p *ConfigurationSetMaxReplicaCountRequest) GetMaxReplicaCount() int32 {
  return p.MaxReplicaCount
}
func (p *ConfigurationSetMaxReplicaCountRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationSetMaxReplicaCountRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *ConfigurationSetMaxReplicaCountRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MaxReplicaCount = v
}
  return nil
}

func (p *ConfigurationSetMaxReplicaCountRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_set_max_replica_count_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationSetMaxReplicaCountRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *ConfigurationSetMaxReplicaCountRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_replica_count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max_replica_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxReplicaCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_replica_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max_replica_count: ", p), err) }
  return err
}

func (p *ConfigurationSetMaxReplicaCountRequest) Equals(other *ConfigurationSetMaxReplicaCountRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if p.MaxReplicaCount != other.MaxReplicaCount { return false }
  return true
}

func (p *ConfigurationSetMaxReplicaCountRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationSetMaxReplicaCountRequest(%+v)", *p)
}

func (p *ConfigurationSetMaxReplicaCountRequest) Validate() error {
  return nil
}
// Attributes:
//  - Err
//  - OldMaxReplicaCount
//  - HintMessage
type ConfigurationSetMaxReplicaCountResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  OldMaxReplicaCount int32 `thrift:"old_max_replica_count,2" db:"old_max_replica_count" json:"old_max_replica_count"`
  HintMessage string `thrift:"hint_message,3" db:"hint_message" json:"hint_message"`
}

func NewConfigurationSetMaxReplicaCountResponse() *ConfigurationSetMaxReplicaCountResponse {
  return &ConfigurationSetMaxReplicaCountResponse{}
}

var ConfigurationSetMaxReplicaCountResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationSetMaxReplicaCountResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationSetMaxReplicaCountResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationSetMaxReplicaCountResponse) GetOldMaxReplicaCount() int32 {
  return p.OldMaxReplicaCount
}

func (p *ConfigurationSetMaxReplicaCountResponse) GetHintMessage() string {
  return p.HintMessage
}
func (p *ConfigurationSetMaxReplicaCountResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationSetMaxReplicaCountResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationSetMaxReplicaCountResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationSetMaxReplicaCountResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OldMaxReplicaCount = v
}
  return nil
}

func (p *ConfigurationSetMaxReplicaCountResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HintMessage = v
}
  return nil
}

func (p *ConfigurationSetMaxReplicaCountResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_set_max_replica_count_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationSetMaxReplicaCountResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationSetMaxReplicaCountResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "old_max_replica_count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:old_max_replica_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OldMaxReplicaCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old_max_replica_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:old_max_replica_count: ", p), err) }
  return err
}

func (p *ConfigurationSetMaxReplicaCountResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_message", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hint_message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_message (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hint_message: ", p), err) }
  return err
}

func (p *ConfigurationSetMaxReplicaCountResponse) Equals(other *ConfigurationSetMaxReplicaCountResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.OldMaxReplicaCount != other.OldMaxReplicaCount { return false }
  if p.HintMessage != other.HintMessage { return false }
  return true
}

func (p *ConfigurationSetMaxReplicaCountResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationSetMaxReplicaCountResponse(%+v)", *p)
}

func (p *ConfigurationSetMaxReplicaCountResponse) Validate() error {
  return nil
}
type AdminClient interface {
  // Parameters:
  //  - Req
  CreateApp(ctx context.Context, req *ConfigurationCreateAppRequest) (_r *ConfigurationCreateAppResponse, _err error)
  // Parameters:
  //  - Req
  DropApp(ctx context.Context, req *ConfigurationDropAppRequest) (_r *ConfigurationDropAppResponse, _err error)
  // Parameters:
  //  - Req
  RecallApp(ctx context.Context, req *ConfigurationRecallAppRequest) (_r *ConfigurationRecallAppResponse, _err error)
  // Parameters:
  //  - Req
  ListApps(ctx context.Context, req *ConfigurationListAppsRequest) (_r *ConfigurationListAppsResponse, _err error)
  // Parameters:
  //  - Req
  AddDuplication(ctx context.Context, req *DuplicationAddRequest) (_r *DuplicationAddResponse, _err error)
  // Parameters:
  //  - Req
  QueryDuplication(ctx context.Context, req *DuplicationQueryRequest) (_r *DuplicationQueryResponse, _err error)
  // Parameters:
  //  - Req
  ModifyDuplication(ctx context.Context, req *DuplicationModifyRequest) (_r *DuplicationModifyResponse, _err error)
  // Parameters:
  //  - Req
  QueryAppInfo(ctx context.Context, req *QueryAppInfoRequest) (_r *QueryAppInfoResponse, _err error)
  // Parameters:
  //  - Req
  UpdateAppEnv(ctx context.Context, req *ConfigurationUpdateAppEnvRequest) (_r *ConfigurationUpdateAppEnvResponse, _err error)
  // Parameters:
  //  - Req
  ListNodes(ctx context.Context, req *ConfigurationListNodesRequest) (_r *ConfigurationListNodesResponse, _err error)
  // Parameters:
  //  - Req
  QueryClusterInfo(ctx context.Context, req *ConfigurationClusterInfoRequest) (_r *ConfigurationClusterInfoResponse, _err error)
  // Parameters:
  //  - Req
  MetaControl(ctx context.Context, req *ConfigurationMetaControlRequest) (_r *ConfigurationMetaControlResponse, _err error)
  // Parameters:
  //  - Req
  QueryBackupPolicy(ctx context.Context, req *ConfigurationQueryBackupPolicyRequest) (_r *ConfigurationQueryBackupPolicyResponse, _err error)
  // Parameters:
  //  - Req
  Balance(ctx context.Context, req *ConfigurationBalancerRequest) (_r *ConfigurationBalancerResponse, _err error)
  // Parameters:
  //  - Req
  StartBackupApp(ctx context.Context, req *StartBackupAppRequest) (_r *StartBackupAppResponse, _err error)
  // Parameters:
  //  - Req
  QueryBackupStatus(ctx context.Context, req *QueryBackupStatusRequest) (_r *QueryBackupStatusResponse, _err error)
  // Parameters:
  //  - Req
  RestoreApp(ctx context.Context, req *ConfigurationRestoreRequest) (_r *ConfigurationCreateAppResponse, _err error)
  // Parameters:
  //  - Req
  StartPartitionSplit(ctx context.Context, req *StartPartitionSplitRequest) (_r *StartPartitionSplitResponse, _err error)
  // Parameters:
  //  - Req
  QuerySplitStatus(ctx context.Context, req *QuerySplitRequest) (_r *QuerySplitResponse, _err error)
  // Parameters:
  //  - Req
  ControlPartitionSplit(ctx context.Context, req *ControlSplitRequest) (_r *ControlSplitResponse, _err error)
  // Parameters:
  //  - Req
  StartBulkLoad(ctx context.Context, req *StartBulkLoadRequest) (_r *StartBulkLoadResponse, _err error)
  // Parameters:
  //  - Req
  QueryBulkLoadStatus(ctx context.Context, req *QueryBulkLoadRequest) (_r *QueryBulkLoadResponse, _err error)
  // Parameters:
  //  - Req
  ControlBulkLoad(ctx context.Context, req *ControlBulkLoadRequest) (_r *ControlBulkLoadResponse, _err error)
  // Parameters:
  //  - Req
  ClearBulkLoad(ctx context.Context, req *ClearBulkLoadStateRequest) (_r *ClearBulkLoadStateResponse, _err error)
  // Parameters:
  //  - Req
  StartManualCompact(ctx context.Context, req *StartAppManualCompactRequest) (_r *StartAppManualCompactResponse, _err error)
  // Parameters:
  //  - Req
  QueryManualCompact(ctx context.Context, req *QueryAppManualCompactRequest) (_r *QueryAppManualCompactResponse, _err error)
}

type AdminClientClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewAdminClientClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AdminClientClient {
  return &AdminClientClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewAdminClientClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AdminClientClient {
  return &AdminClientClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewAdminClientClient(c thrift.TClient) *AdminClientClient {
  return &AdminClientClient{
    c: c,
  }
}

func (p *AdminClientClient) Client_() thrift.TClient {
  return p.c
}

func (p *AdminClientClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *AdminClientClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *AdminClientClient) CreateApp(ctx context.Context, req *ConfigurationCreateAppRequest) (_r *ConfigurationCreateAppResponse, _err error) {
  var _args34 AdminClientCreateAppArgs
  _args34.Req = req
  var _result36 AdminClientCreateAppResult
  var _meta35 thrift.ResponseMeta
  _meta35, _err = p.Client_().Call(ctx, "create_app", &_args34, &_result36)
  p.SetLastResponseMeta_(_meta35)
  if _err != nil {
    return
  }
  if _ret37 := _result36.GetSuccess(); _ret37 != nil {
    return _ret37, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "create_app failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) DropApp(ctx context.Context, req *ConfigurationDropAppRequest) (_r *ConfigurationDropAppResponse, _err error) {
  var _args38 AdminClientDropAppArgs
  _args38.Req = req
  var _result40 AdminClientDropAppResult
  var _meta39 thrift.ResponseMeta
  _meta39, _err = p.Client_().Call(ctx, "drop_app", &_args38, &_result40)
  p.SetLastResponseMeta_(_meta39)
  if _err != nil {
    return
  }
  if _ret41 := _result40.GetSuccess(); _ret41 != nil {
    return _ret41, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "drop_app failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) RecallApp(ctx context.Context, req *ConfigurationRecallAppRequest) (_r *ConfigurationRecallAppResponse, _err error) {
  var _args42 AdminClientRecallAppArgs
  _args42.Req = req
  var _result44 AdminClientRecallAppResult
  var _meta43 thrift.ResponseMeta
  _meta43, _err = p.Client_().Call(ctx, "recall_app", &_args42, &_result44)
  p.SetLastResponseMeta_(_meta43)
  if _err != nil {
    return
  }
  if _ret45 := _result44.GetSuccess(); _ret45 != nil {
    return _ret45, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "recall_app failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) ListApps(ctx context.Context, req *ConfigurationListAppsRequest) (_r *ConfigurationListAppsResponse, _err error) {
  var _args46 AdminClientListAppsArgs
  _args46.Req = req
  var _result48 AdminClientListAppsResult
  var _meta47 thrift.ResponseMeta
  _meta47, _err = p.Client_().Call(ctx, "list_apps", &_args46, &_result48)
  p.SetLastResponseMeta_(_meta47)
  if _err != nil {
    return
  }
  if _ret49 := _result48.GetSuccess(); _ret49 != nil {
    return _ret49, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "list_apps failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) AddDuplication(ctx context.Context, req *DuplicationAddRequest) (_r *DuplicationAddResponse, _err error) {
  var _args50 AdminClientAddDuplicationArgs
  _args50.Req = req
  var _result52 AdminClientAddDuplicationResult
  var _meta51 thrift.ResponseMeta
  _meta51, _err = p.Client_().Call(ctx, "add_duplication", &_args50, &_result52)
  p.SetLastResponseMeta_(_meta51)
  if _err != nil {
    return
  }
  if _ret53 := _result52.GetSuccess(); _ret53 != nil {
    return _ret53, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "add_duplication failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) QueryDuplication(ctx context.Context, req *DuplicationQueryRequest) (_r *DuplicationQueryResponse, _err error) {
  var _args54 AdminClientQueryDuplicationArgs
  _args54.Req = req
  var _result56 AdminClientQueryDuplicationResult
  var _meta55 thrift.ResponseMeta
  _meta55, _err = p.Client_().Call(ctx, "query_duplication", &_args54, &_result56)
  p.SetLastResponseMeta_(_meta55)
  if _err != nil {
    return
  }
  if _ret57 := _result56.GetSuccess(); _ret57 != nil {
    return _ret57, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "query_duplication failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) ModifyDuplication(ctx context.Context, req *DuplicationModifyRequest) (_r *DuplicationModifyResponse, _err error) {
  var _args58 AdminClientModifyDuplicationArgs
  _args58.Req = req
  var _result60 AdminClientModifyDuplicationResult
  var _meta59 thrift.ResponseMeta
  _meta59, _err = p.Client_().Call(ctx, "modify_duplication", &_args58, &_result60)
  p.SetLastResponseMeta_(_meta59)
  if _err != nil {
    return
  }
  if _ret61 := _result60.GetSuccess(); _ret61 != nil {
    return _ret61, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "modify_duplication failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) QueryAppInfo(ctx context.Context, req *QueryAppInfoRequest) (_r *QueryAppInfoResponse, _err error) {
  var _args62 AdminClientQueryAppInfoArgs
  _args62.Req = req
  var _result64 AdminClientQueryAppInfoResult
  var _meta63 thrift.ResponseMeta
  _meta63, _err = p.Client_().Call(ctx, "query_app_info", &_args62, &_result64)
  p.SetLastResponseMeta_(_meta63)
  if _err != nil {
    return
  }
  if _ret65 := _result64.GetSuccess(); _ret65 != nil {
    return _ret65, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "query_app_info failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) UpdateAppEnv(ctx context.Context, req *ConfigurationUpdateAppEnvRequest) (_r *ConfigurationUpdateAppEnvResponse, _err error) {
  var _args66 AdminClientUpdateAppEnvArgs
  _args66.Req = req
  var _result68 AdminClientUpdateAppEnvResult
  var _meta67 thrift.ResponseMeta
  _meta67, _err = p.Client_().Call(ctx, "update_app_env", &_args66, &_result68)
  p.SetLastResponseMeta_(_meta67)
  if _err != nil {
    return
  }
  if _ret69 := _result68.GetSuccess(); _ret69 != nil {
    return _ret69, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "update_app_env failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) ListNodes(ctx context.Context, req *ConfigurationListNodesRequest) (_r *ConfigurationListNodesResponse, _err error) {
  var _args70 AdminClientListNodesArgs
  _args70.Req = req
  var _result72 AdminClientListNodesResult
  var _meta71 thrift.ResponseMeta
  _meta71, _err = p.Client_().Call(ctx, "list_nodes", &_args70, &_result72)
  p.SetLastResponseMeta_(_meta71)
  if _err != nil {
    return
  }
  if _ret73 := _result72.GetSuccess(); _ret73 != nil {
    return _ret73, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "list_nodes failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) QueryClusterInfo(ctx context.Context, req *ConfigurationClusterInfoRequest) (_r *ConfigurationClusterInfoResponse, _err error) {
  var _args74 AdminClientQueryClusterInfoArgs
  _args74.Req = req
  var _result76 AdminClientQueryClusterInfoResult
  var _meta75 thrift.ResponseMeta
  _meta75, _err = p.Client_().Call(ctx, "query_cluster_info", &_args74, &_result76)
  p.SetLastResponseMeta_(_meta75)
  if _err != nil {
    return
  }
  if _ret77 := _result76.GetSuccess(); _ret77 != nil {
    return _ret77, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "query_cluster_info failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) MetaControl(ctx context.Context, req *ConfigurationMetaControlRequest) (_r *ConfigurationMetaControlResponse, _err error) {
  var _args78 AdminClientMetaControlArgs
  _args78.Req = req
  var _result80 AdminClientMetaControlResult
  var _meta79 thrift.ResponseMeta
  _meta79, _err = p.Client_().Call(ctx, "meta_control", &_args78, &_result80)
  p.SetLastResponseMeta_(_meta79)
  if _err != nil {
    return
  }
  if _ret81 := _result80.GetSuccess(); _ret81 != nil {
    return _ret81, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "meta_control failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) QueryBackupPolicy(ctx context.Context, req *ConfigurationQueryBackupPolicyRequest) (_r *ConfigurationQueryBackupPolicyResponse, _err error) {
  var _args82 AdminClientQueryBackupPolicyArgs
  _args82.Req = req
  var _result84 AdminClientQueryBackupPolicyResult
  var _meta83 thrift.ResponseMeta
  _meta83, _err = p.Client_().Call(ctx, "query_backup_policy", &_args82, &_result84)
  p.SetLastResponseMeta_(_meta83)
  if _err != nil {
    return
  }
  if _ret85 := _result84.GetSuccess(); _ret85 != nil {
    return _ret85, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "query_backup_policy failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) Balance(ctx context.Context, req *ConfigurationBalancerRequest) (_r *ConfigurationBalancerResponse, _err error) {
  var _args86 AdminClientBalanceArgs
  _args86.Req = req
  var _result88 AdminClientBalanceResult
  var _meta87 thrift.ResponseMeta
  _meta87, _err = p.Client_().Call(ctx, "balance", &_args86, &_result88)
  p.SetLastResponseMeta_(_meta87)
  if _err != nil {
    return
  }
  if _ret89 := _result88.GetSuccess(); _ret89 != nil {
    return _ret89, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "balance failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) StartBackupApp(ctx context.Context, req *StartBackupAppRequest) (_r *StartBackupAppResponse, _err error) {
  var _args90 AdminClientStartBackupAppArgs
  _args90.Req = req
  var _result92 AdminClientStartBackupAppResult
  var _meta91 thrift.ResponseMeta
  _meta91, _err = p.Client_().Call(ctx, "start_backup_app", &_args90, &_result92)
  p.SetLastResponseMeta_(_meta91)
  if _err != nil {
    return
  }
  if _ret93 := _result92.GetSuccess(); _ret93 != nil {
    return _ret93, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "start_backup_app failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) QueryBackupStatus(ctx context.Context, req *QueryBackupStatusRequest) (_r *QueryBackupStatusResponse, _err error) {
  var _args94 AdminClientQueryBackupStatusArgs
  _args94.Req = req
  var _result96 AdminClientQueryBackupStatusResult
  var _meta95 thrift.ResponseMeta
  _meta95, _err = p.Client_().Call(ctx, "query_backup_status", &_args94, &_result96)
  p.SetLastResponseMeta_(_meta95)
  if _err != nil {
    return
  }
  if _ret97 := _result96.GetSuccess(); _ret97 != nil {
    return _ret97, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "query_backup_status failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) RestoreApp(ctx context.Context, req *ConfigurationRestoreRequest) (_r *ConfigurationCreateAppResponse, _err error) {
  var _args98 AdminClientRestoreAppArgs
  _args98.Req = req
  var _result100 AdminClientRestoreAppResult
  var _meta99 thrift.ResponseMeta
  _meta99, _err = p.Client_().Call(ctx, "restore_app", &_args98, &_result100)
  p.SetLastResponseMeta_(_meta99)
  if _err != nil {
    return
  }
  if _ret101 := _result100.GetSuccess(); _ret101 != nil {
    return _ret101, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "restore_app failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) StartPartitionSplit(ctx context.Context, req *StartPartitionSplitRequest) (_r *StartPartitionSplitResponse, _err error) {
  var _args102 AdminClientStartPartitionSplitArgs
  _args102.Req = req
  var _result104 AdminClientStartPartitionSplitResult
  var _meta103 thrift.ResponseMeta
  _meta103, _err = p.Client_().Call(ctx, "start_partition_split", &_args102, &_result104)
  p.SetLastResponseMeta_(_meta103)
  if _err != nil {
    return
  }
  if _ret105 := _result104.GetSuccess(); _ret105 != nil {
    return _ret105, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "start_partition_split failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) QuerySplitStatus(ctx context.Context, req *QuerySplitRequest) (_r *QuerySplitResponse, _err error) {
  var _args106 AdminClientQuerySplitStatusArgs
  _args106.Req = req
  var _result108 AdminClientQuerySplitStatusResult
  var _meta107 thrift.ResponseMeta
  _meta107, _err = p.Client_().Call(ctx, "query_split_status", &_args106, &_result108)
  p.SetLastResponseMeta_(_meta107)
  if _err != nil {
    return
  }
  if _ret109 := _result108.GetSuccess(); _ret109 != nil {
    return _ret109, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "query_split_status failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) ControlPartitionSplit(ctx context.Context, req *ControlSplitRequest) (_r *ControlSplitResponse, _err error) {
  var _args110 AdminClientControlPartitionSplitArgs
  _args110.Req = req
  var _result112 AdminClientControlPartitionSplitResult
  var _meta111 thrift.ResponseMeta
  _meta111, _err = p.Client_().Call(ctx, "control_partition_split", &_args110, &_result112)
  p.SetLastResponseMeta_(_meta111)
  if _err != nil {
    return
  }
  if _ret113 := _result112.GetSuccess(); _ret113 != nil {
    return _ret113, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "control_partition_split failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) StartBulkLoad(ctx context.Context, req *StartBulkLoadRequest) (_r *StartBulkLoadResponse, _err error) {
  var _args114 AdminClientStartBulkLoadArgs
  _args114.Req = req
  var _result116 AdminClientStartBulkLoadResult
  var _meta115 thrift.ResponseMeta
  _meta115, _err = p.Client_().Call(ctx, "start_bulk_load", &_args114, &_result116)
  p.SetLastResponseMeta_(_meta115)
  if _err != nil {
    return
  }
  if _ret117 := _result116.GetSuccess(); _ret117 != nil {
    return _ret117, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "start_bulk_load failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) QueryBulkLoadStatus(ctx context.Context, req *QueryBulkLoadRequest) (_r *QueryBulkLoadResponse, _err error) {
  var _args118 AdminClientQueryBulkLoadStatusArgs
  _args118.Req = req
  var _result120 AdminClientQueryBulkLoadStatusResult
  var _meta119 thrift.ResponseMeta
  _meta119, _err = p.Client_().Call(ctx, "query_bulk_load_status", &_args118, &_result120)
  p.SetLastResponseMeta_(_meta119)
  if _err != nil {
    return
  }
  if _ret121 := _result120.GetSuccess(); _ret121 != nil {
    return _ret121, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "query_bulk_load_status failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) ControlBulkLoad(ctx context.Context, req *ControlBulkLoadRequest) (_r *ControlBulkLoadResponse, _err error) {
  var _args122 AdminClientControlBulkLoadArgs
  _args122.Req = req
  var _result124 AdminClientControlBulkLoadResult
  var _meta123 thrift.ResponseMeta
  _meta123, _err = p.Client_().Call(ctx, "control_bulk_load", &_args122, &_result124)
  p.SetLastResponseMeta_(_meta123)
  if _err != nil {
    return
  }
  if _ret125 := _result124.GetSuccess(); _ret125 != nil {
    return _ret125, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "control_bulk_load failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) ClearBulkLoad(ctx context.Context, req *ClearBulkLoadStateRequest) (_r *ClearBulkLoadStateResponse, _err error) {
  var _args126 AdminClientClearBulkLoadArgs
  _args126.Req = req
  var _result128 AdminClientClearBulkLoadResult
  var _meta127 thrift.ResponseMeta
  _meta127, _err = p.Client_().Call(ctx, "clear_bulk_load", &_args126, &_result128)
  p.SetLastResponseMeta_(_meta127)
  if _err != nil {
    return
  }
  if _ret129 := _result128.GetSuccess(); _ret129 != nil {
    return _ret129, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "clear_bulk_load failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) StartManualCompact(ctx context.Context, req *StartAppManualCompactRequest) (_r *StartAppManualCompactResponse, _err error) {
  var _args130 AdminClientStartManualCompactArgs
  _args130.Req = req
  var _result132 AdminClientStartManualCompactResult
  var _meta131 thrift.ResponseMeta
  _meta131, _err = p.Client_().Call(ctx, "start_manual_compact", &_args130, &_result132)
  p.SetLastResponseMeta_(_meta131)
  if _err != nil {
    return
  }
  if _ret133 := _result132.GetSuccess(); _ret133 != nil {
    return _ret133, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "start_manual_compact failed: unknown result")
}

// Parameters:
//  - Req
func (p *AdminClientClient) QueryManualCompact(ctx context.Context, req *QueryAppManualCompactRequest) (_r *QueryAppManualCompactResponse, _err error) {
  var _args134 AdminClientQueryManualCompactArgs
  _args134.Req = req
  var _result136 AdminClientQueryManualCompactResult
  var _meta135 thrift.ResponseMeta
  _meta135, _err = p.Client_().Call(ctx, "query_manual_compact", &_args134, &_result136)
  p.SetLastResponseMeta_(_meta135)
  if _err != nil {
    return
  }
  if _ret137 := _result136.GetSuccess(); _ret137 != nil {
    return _ret137, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "query_manual_compact failed: unknown result")
}

type AdminClientProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler AdminClient
}

func (p *AdminClientProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *AdminClientProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *AdminClientProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewAdminClientProcessor(handler AdminClient) *AdminClientProcessor {

  self138 := &AdminClientProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self138.processorMap["create_app"] = &adminClientProcessorCreateApp{handler:handler}
  self138.processorMap["drop_app"] = &adminClientProcessorDropApp{handler:handler}
  self138.processorMap["recall_app"] = &adminClientProcessorRecallApp{handler:handler}
  self138.processorMap["list_apps"] = &adminClientProcessorListApps{handler:handler}
  self138.processorMap["add_duplication"] = &adminClientProcessorAddDuplication{handler:handler}
  self138.processorMap["query_duplication"] = &adminClientProcessorQueryDuplication{handler:handler}
  self138.processorMap["modify_duplication"] = &adminClientProcessorModifyDuplication{handler:handler}
  self138.processorMap["query_app_info"] = &adminClientProcessorQueryAppInfo{handler:handler}
  self138.processorMap["update_app_env"] = &adminClientProcessorUpdateAppEnv{handler:handler}
  self138.processorMap["list_nodes"] = &adminClientProcessorListNodes{handler:handler}
  self138.processorMap["query_cluster_info"] = &adminClientProcessorQueryClusterInfo{handler:handler}
  self138.processorMap["meta_control"] = &adminClientProcessorMetaControl{handler:handler}
  self138.processorMap["query_backup_policy"] = &adminClientProcessorQueryBackupPolicy{handler:handler}
  self138.processorMap["balance"] = &adminClientProcessorBalance{handler:handler}
  self138.processorMap["start_backup_app"] = &adminClientProcessorStartBackupApp{handler:handler}
  self138.processorMap["query_backup_status"] = &adminClientProcessorQueryBackupStatus{handler:handler}
  self138.processorMap["restore_app"] = &adminClientProcessorRestoreApp{handler:handler}
  self138.processorMap["start_partition_split"] = &adminClientProcessorStartPartitionSplit{handler:handler}
  self138.processorMap["query_split_status"] = &adminClientProcessorQuerySplitStatus{handler:handler}
  self138.processorMap["control_partition_split"] = &adminClientProcessorControlPartitionSplit{handler:handler}
  self138.processorMap["start_bulk_load"] = &adminClientProcessorStartBulkLoad{handler:handler}
  self138.processorMap["query_bulk_load_status"] = &adminClientProcessorQueryBulkLoadStatus{handler:handler}
  self138.processorMap["control_bulk_load"] = &adminClientProcessorControlBulkLoad{handler:handler}
  self138.processorMap["clear_bulk_load"] = &adminClientProcessorClearBulkLoad{handler:handler}
  self138.processorMap["start_manual_compact"] = &adminClientProcessorStartManualCompact{handler:handler}
  self138.processorMap["query_manual_compact"] = &adminClientProcessorQueryManualCompact{handler:handler}
return self138
}

func (p *AdminClientProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x139 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x139.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x139

}

type adminClientProcessorCreateApp struct {
  handler AdminClient
}

func (p *adminClientProcessorCreateApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err140 error
  args := AdminClientCreateAppArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "create_app", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientCreateAppResult{}
  if retval, err2 := p.handler.CreateApp(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc141 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_app: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "create_app", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err140 = thrift.WrapTException(err2)
    }
    if err2 := _exc141.Write(ctx, oprot); _write_err140 == nil && err2 != nil {
      _write_err140 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err140 == nil && err2 != nil {
      _write_err140 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err140 == nil && err2 != nil {
      _write_err140 = thrift.WrapTException(err2)
    }
    if _write_err140 != nil {
      return false, thrift.WrapTException(_write_err140)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "create_app", thrift.REPLY, seqId); err2 != nil {
    _write_err140 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err140 == nil && err2 != nil {
    _write_err140 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err140 == nil && err2 != nil {
    _write_err140 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err140 == nil && err2 != nil {
    _write_err140 = thrift.WrapTException(err2)
  }
  if _write_err140 != nil {
    return false, thrift.WrapTException(_write_err140)
  }
  return true, err
}

type adminClientProcessorDropApp struct {
  handler AdminClient
}

func (p *adminClientProcessorDropApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err142 error
  args := AdminClientDropAppArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_app", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientDropAppResult{}
  if retval, err2 := p.handler.DropApp(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc143 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_app: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "drop_app", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err142 = thrift.WrapTException(err2)
    }
    if err2 := _exc143.Write(ctx, oprot); _write_err142 == nil && err2 != nil {
      _write_err142 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err142 == nil && err2 != nil {
      _write_err142 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err142 == nil && err2 != nil {
      _write_err142 = thrift.WrapTException(err2)
    }
    if _write_err142 != nil {
      return false, thrift.WrapTException(_write_err142)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "drop_app", thrift.REPLY, seqId); err2 != nil {
    _write_err142 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err142 == nil && err2 != nil {
    _write_err142 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err142 == nil && err2 != nil {
    _write_err142 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err142 == nil && err2 != nil {
    _write_err142 = thrift.WrapTException(err2)
  }
  if _write_err142 != nil {
    return false, thrift.WrapTException(_write_err142)
  }
  return true, err
}

type adminClientProcessorRecallApp struct {
  handler AdminClient
}

func (p *adminClientProcessorRecallApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err144 error
  args := AdminClientRecallAppArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "recall_app", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientRecallAppResult{}
  if retval, err2 := p.handler.RecallApp(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc145 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing recall_app: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "recall_app", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err144 = thrift.WrapTException(err2)
    }
    if err2 := _exc145.Write(ctx, oprot); _write_err144 == nil && err2 != nil {
      _write_err144 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err144 == nil && err2 != nil {
      _write_err144 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err144 == nil && err2 != nil {
      _write_err144 = thrift.WrapTException(err2)
    }
    if _write_err144 != nil {
      return false, thrift.WrapTException(_write_err144)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "recall_app", thrift.REPLY, seqId); err2 != nil {
    _write_err144 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err144 == nil && err2 != nil {
    _write_err144 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err144 == nil && err2 != nil {
    _write_err144 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err144 == nil && err2 != nil {
    _write_err144 = thrift.WrapTException(err2)
  }
  if _write_err144 != nil {
    return false, thrift.WrapTException(_write_err144)
  }
  return true, err
}

type adminClientProcessorListApps struct {
  handler AdminClient
}

func (p *adminClientProcessorListApps) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err146 error
  args := AdminClientListAppsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "list_apps", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientListAppsResult{}
  if retval, err2 := p.handler.ListApps(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc147 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_apps: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "list_apps", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err146 = thrift.WrapTException(err2)
    }
    if err2 := _exc147.Write(ctx, oprot); _write_err146 == nil && err2 != nil {
      _write_err146 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err146 == nil && err2 != nil {
      _write_err146 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err146 == nil && err2 != nil {
      _write_err146 = thrift.WrapTException(err2)
    }
    if _write_err146 != nil {
      return false, thrift.WrapTException(_write_err146)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "list_apps", thrift.REPLY, seqId); err2 != nil {
    _write_err146 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err146 == nil && err2 != nil {
    _write_err146 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err146 == nil && err2 != nil {
    _write_err146 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err146 == nil && err2 != nil {
    _write_err146 = thrift.WrapTException(err2)
  }
  if _write_err146 != nil {
    return false, thrift.WrapTException(_write_err146)
  }
  return true, err
}

type adminClientProcessorAddDuplication struct {
  handler AdminClient
}

func (p *adminClientProcessorAddDuplication) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err148 error
  args := AdminClientAddDuplicationArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_duplication", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientAddDuplicationResult{}
  if retval, err2 := p.handler.AddDuplication(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc149 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_duplication: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "add_duplication", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err148 = thrift.WrapTException(err2)
    }
    if err2 := _exc149.Write(ctx, oprot); _write_err148 == nil && err2 != nil {
      _write_err148 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err148 == nil && err2 != nil {
      _write_err148 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err148 == nil && err2 != nil {
      _write_err148 = thrift.WrapTException(err2)
    }
    if _write_err148 != nil {
      return false, thrift.WrapTException(_write_err148)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "add_duplication", thrift.REPLY, seqId); err2 != nil {
    _write_err148 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err148 == nil && err2 != nil {
    _write_err148 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err148 == nil && err2 != nil {
    _write_err148 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err148 == nil && err2 != nil {
    _write_err148 = thrift.WrapTException(err2)
  }
  if _write_err148 != nil {
    return false, thrift.WrapTException(_write_err148)
  }
  return true, err
}

type adminClientProcessorQueryDuplication struct {
  handler AdminClient
}

func (p *adminClientProcessorQueryDuplication) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err150 error
  args := AdminClientQueryDuplicationArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "query_duplication", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientQueryDuplicationResult{}
  if retval, err2 := p.handler.QueryDuplication(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc151 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_duplication: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "query_duplication", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err150 = thrift.WrapTException(err2)
    }
    if err2 := _exc151.Write(ctx, oprot); _write_err150 == nil && err2 != nil {
      _write_err150 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err150 == nil && err2 != nil {
      _write_err150 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err150 == nil && err2 != nil {
      _write_err150 = thrift.WrapTException(err2)
    }
    if _write_err150 != nil {
      return false, thrift.WrapTException(_write_err150)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "query_duplication", thrift.REPLY, seqId); err2 != nil {
    _write_err150 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err150 == nil && err2 != nil {
    _write_err150 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err150 == nil && err2 != nil {
    _write_err150 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err150 == nil && err2 != nil {
    _write_err150 = thrift.WrapTException(err2)
  }
  if _write_err150 != nil {
    return false, thrift.WrapTException(_write_err150)
  }
  return true, err
}

type adminClientProcessorModifyDuplication struct {
  handler AdminClient
}

func (p *adminClientProcessorModifyDuplication) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err152 error
  args := AdminClientModifyDuplicationArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "modify_duplication", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientModifyDuplicationResult{}
  if retval, err2 := p.handler.ModifyDuplication(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc153 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing modify_duplication: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "modify_duplication", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err152 = thrift.WrapTException(err2)
    }
    if err2 := _exc153.Write(ctx, oprot); _write_err152 == nil && err2 != nil {
      _write_err152 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err152 == nil && err2 != nil {
      _write_err152 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err152 == nil && err2 != nil {
      _write_err152 = thrift.WrapTException(err2)
    }
    if _write_err152 != nil {
      return false, thrift.WrapTException(_write_err152)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "modify_duplication", thrift.REPLY, seqId); err2 != nil {
    _write_err152 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err152 == nil && err2 != nil {
    _write_err152 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err152 == nil && err2 != nil {
    _write_err152 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err152 == nil && err2 != nil {
    _write_err152 = thrift.WrapTException(err2)
  }
  if _write_err152 != nil {
    return false, thrift.WrapTException(_write_err152)
  }
  return true, err
}

type adminClientProcessorQueryAppInfo struct {
  handler AdminClient
}

func (p *adminClientProcessorQueryAppInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err154 error
  args := AdminClientQueryAppInfoArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "query_app_info", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientQueryAppInfoResult{}
  if retval, err2 := p.handler.QueryAppInfo(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc155 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_app_info: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "query_app_info", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err154 = thrift.WrapTException(err2)
    }
    if err2 := _exc155.Write(ctx, oprot); _write_err154 == nil && err2 != nil {
      _write_err154 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err154 == nil && err2 != nil {
      _write_err154 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err154 == nil && err2 != nil {
      _write_err154 = thrift.WrapTException(err2)
    }
    if _write_err154 != nil {
      return false, thrift.WrapTException(_write_err154)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "query_app_info", thrift.REPLY, seqId); err2 != nil {
    _write_err154 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err154 == nil && err2 != nil {
    _write_err154 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err154 == nil && err2 != nil {
    _write_err154 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err154 == nil && err2 != nil {
    _write_err154 = thrift.WrapTException(err2)
  }
  if _write_err154 != nil {
    return false, thrift.WrapTException(_write_err154)
  }
  return true, err
}

type adminClientProcessorUpdateAppEnv struct {
  handler AdminClient
}

func (p *adminClientProcessorUpdateAppEnv) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err156 error
  args := AdminClientUpdateAppEnvArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_app_env", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientUpdateAppEnvResult{}
  if retval, err2 := p.handler.UpdateAppEnv(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc157 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_app_env: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "update_app_env", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err156 = thrift.WrapTException(err2)
    }
    if err2 := _exc157.Write(ctx, oprot); _write_err156 == nil && err2 != nil {
      _write_err156 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err156 == nil && err2 != nil {
      _write_err156 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err156 == nil && err2 != nil {
      _write_err156 = thrift.WrapTException(err2)
    }
    if _write_err156 != nil {
      return false, thrift.WrapTException(_write_err156)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "update_app_env", thrift.REPLY, seqId); err2 != nil {
    _write_err156 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err156 == nil && err2 != nil {
    _write_err156 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err156 == nil && err2 != nil {
    _write_err156 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err156 == nil && err2 != nil {
    _write_err156 = thrift.WrapTException(err2)
  }
  if _write_err156 != nil {
    return false, thrift.WrapTException(_write_err156)
  }
  return true, err
}

type adminClientProcessorListNodes struct {
  handler AdminClient
}

func (p *adminClientProcessorListNodes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err158 error
  args := AdminClientListNodesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "list_nodes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientListNodesResult{}
  if retval, err2 := p.handler.ListNodes(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc159 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_nodes: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "list_nodes", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err158 = thrift.WrapTException(err2)
    }
    if err2 := _exc159.Write(ctx, oprot); _write_err158 == nil && err2 != nil {
      _write_err158 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err158 == nil && err2 != nil {
      _write_err158 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err158 == nil && err2 != nil {
      _write_err158 = thrift.WrapTException(err2)
    }
    if _write_err158 != nil {
      return false, thrift.WrapTException(_write_err158)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "list_nodes", thrift.REPLY, seqId); err2 != nil {
    _write_err158 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err158 == nil && err2 != nil {
    _write_err158 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err158 == nil && err2 != nil {
    _write_err158 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err158 == nil && err2 != nil {
    _write_err158 = thrift.WrapTException(err2)
  }
  if _write_err158 != nil {
    return false, thrift.WrapTException(_write_err158)
  }
  return true, err
}

type adminClientProcessorQueryClusterInfo struct {
  handler AdminClient
}

func (p *adminClientProcessorQueryClusterInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err160 error
  args := AdminClientQueryClusterInfoArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "query_cluster_info", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientQueryClusterInfoResult{}
  if retval, err2 := p.handler.QueryClusterInfo(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc161 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_cluster_info: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "query_cluster_info", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err160 = thrift.WrapTException(err2)
    }
    if err2 := _exc161.Write(ctx, oprot); _write_err160 == nil && err2 != nil {
      _write_err160 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err160 == nil && err2 != nil {
      _write_err160 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err160 == nil && err2 != nil {
      _write_err160 = thrift.WrapTException(err2)
    }
    if _write_err160 != nil {
      return false, thrift.WrapTException(_write_err160)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "query_cluster_info", thrift.REPLY, seqId); err2 != nil {
    _write_err160 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err160 == nil && err2 != nil {
    _write_err160 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err160 == nil && err2 != nil {
    _write_err160 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err160 == nil && err2 != nil {
    _write_err160 = thrift.WrapTException(err2)
  }
  if _write_err160 != nil {
    return false, thrift.WrapTException(_write_err160)
  }
  return true, err
}

type adminClientProcessorMetaControl struct {
  handler AdminClient
}

func (p *adminClientProcessorMetaControl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err162 error
  args := AdminClientMetaControlArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "meta_control", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientMetaControlResult{}
  if retval, err2 := p.handler.MetaControl(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc163 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing meta_control: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "meta_control", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err162 = thrift.WrapTException(err2)
    }
    if err2 := _exc163.Write(ctx, oprot); _write_err162 == nil && err2 != nil {
      _write_err162 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err162 == nil && err2 != nil {
      _write_err162 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err162 == nil && err2 != nil {
      _write_err162 = thrift.WrapTException(err2)
    }
    if _write_err162 != nil {
      return false, thrift.WrapTException(_write_err162)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "meta_control", thrift.REPLY, seqId); err2 != nil {
    _write_err162 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err162 == nil && err2 != nil {
    _write_err162 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err162 == nil && err2 != nil {
    _write_err162 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err162 == nil && err2 != nil {
    _write_err162 = thrift.WrapTException(err2)
  }
  if _write_err162 != nil {
    return false, thrift.WrapTException(_write_err162)
  }
  return true, err
}

type adminClientProcessorQueryBackupPolicy struct {
  handler AdminClient
}

func (p *adminClientProcessorQueryBackupPolicy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err164 error
  args := AdminClientQueryBackupPolicyArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "query_backup_policy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientQueryBackupPolicyResult{}
  if retval, err2 := p.handler.QueryBackupPolicy(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc165 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_backup_policy: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "query_backup_policy", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err164 = thrift.WrapTException(err2)
    }
    if err2 := _exc165.Write(ctx, oprot); _write_err164 == nil && err2 != nil {
      _write_err164 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err164 == nil && err2 != nil {
      _write_err164 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err164 == nil && err2 != nil {
      _write_err164 = thrift.WrapTException(err2)
    }
    if _write_err164 != nil {
      return false, thrift.WrapTException(_write_err164)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "query_backup_policy", thrift.REPLY, seqId); err2 != nil {
    _write_err164 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err164 == nil && err2 != nil {
    _write_err164 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err164 == nil && err2 != nil {
    _write_err164 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err164 == nil && err2 != nil {
    _write_err164 = thrift.WrapTException(err2)
  }
  if _write_err164 != nil {
    return false, thrift.WrapTException(_write_err164)
  }
  return true, err
}

type adminClientProcessorBalance struct {
  handler AdminClient
}

func (p *adminClientProcessorBalance) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err166 error
  args := AdminClientBalanceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "balance", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientBalanceResult{}
  if retval, err2 := p.handler.Balance(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc167 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing balance: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "balance", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err166 = thrift.WrapTException(err2)
    }
    if err2 := _exc167.Write(ctx, oprot); _write_err166 == nil && err2 != nil {
      _write_err166 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err166 == nil && err2 != nil {
      _write_err166 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err166 == nil && err2 != nil {
      _write_err166 = thrift.WrapTException(err2)
    }
    if _write_err166 != nil {
      return false, thrift.WrapTException(_write_err166)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "balance", thrift.REPLY, seqId); err2 != nil {
    _write_err166 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err166 == nil && err2 != nil {
    _write_err166 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err166 == nil && err2 != nil {
    _write_err166 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err166 == nil && err2 != nil {
    _write_err166 = thrift.WrapTException(err2)
  }
  if _write_err166 != nil {
    return false, thrift.WrapTException(_write_err166)
  }
  return true, err
}

type adminClientProcessorStartBackupApp struct {
  handler AdminClient
}

func (p *adminClientProcessorStartBackupApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err168 error
  args := AdminClientStartBackupAppArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "start_backup_app", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientStartBackupAppResult{}
  if retval, err2 := p.handler.StartBackupApp(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc169 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start_backup_app: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "start_backup_app", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err168 = thrift.WrapTException(err2)
    }
    if err2 := _exc169.Write(ctx, oprot); _write_err168 == nil && err2 != nil {
      _write_err168 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err168 == nil && err2 != nil {
      _write_err168 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err168 == nil && err2 != nil {
      _write_err168 = thrift.WrapTException(err2)
    }
    if _write_err168 != nil {
      return false, thrift.WrapTException(_write_err168)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "start_backup_app", thrift.REPLY, seqId); err2 != nil {
    _write_err168 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err168 == nil && err2 != nil {
    _write_err168 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err168 == nil && err2 != nil {
    _write_err168 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err168 == nil && err2 != nil {
    _write_err168 = thrift.WrapTException(err2)
  }
  if _write_err168 != nil {
    return false, thrift.WrapTException(_write_err168)
  }
  return true, err
}

type adminClientProcessorQueryBackupStatus struct {
  handler AdminClient
}

func (p *adminClientProcessorQueryBackupStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err170 error
  args := AdminClientQueryBackupStatusArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "query_backup_status", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientQueryBackupStatusResult{}
  if retval, err2 := p.handler.QueryBackupStatus(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc171 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_backup_status: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "query_backup_status", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err170 = thrift.WrapTException(err2)
    }
    if err2 := _exc171.Write(ctx, oprot); _write_err170 == nil && err2 != nil {
      _write_err170 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err170 == nil && err2 != nil {
      _write_err170 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err170 == nil && err2 != nil {
      _write_err170 = thrift.WrapTException(err2)
    }
    if _write_err170 != nil {
      return false, thrift.WrapTException(_write_err170)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "query_backup_status", thrift.REPLY, seqId); err2 != nil {
    _write_err170 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err170 == nil && err2 != nil {
    _write_err170 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err170 == nil && err2 != nil {
    _write_err170 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err170 == nil && err2 != nil {
    _write_err170 = thrift.WrapTException(err2)
  }
  if _write_err170 != nil {
    return false, thrift.WrapTException(_write_err170)
  }
  return true, err
}

type adminClientProcessorRestoreApp struct {
  handler AdminClient
}

func (p *adminClientProcessorRestoreApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err172 error
  args := AdminClientRestoreAppArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "restore_app", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientRestoreAppResult{}
  if retval, err2 := p.handler.RestoreApp(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc173 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing restore_app: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "restore_app", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err172 = thrift.WrapTException(err2)
    }
    if err2 := _exc173.Write(ctx, oprot); _write_err172 == nil && err2 != nil {
      _write_err172 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err172 == nil && err2 != nil {
      _write_err172 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err172 == nil && err2 != nil {
      _write_err172 = thrift.WrapTException(err2)
    }
    if _write_err172 != nil {
      return false, thrift.WrapTException(_write_err172)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "restore_app", thrift.REPLY, seqId); err2 != nil {
    _write_err172 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err172 == nil && err2 != nil {
    _write_err172 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err172 == nil && err2 != nil {
    _write_err172 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err172 == nil && err2 != nil {
    _write_err172 = thrift.WrapTException(err2)
  }
  if _write_err172 != nil {
    return false, thrift.WrapTException(_write_err172)
  }
  return true, err
}

type adminClientProcessorStartPartitionSplit struct {
  handler AdminClient
}

func (p *adminClientProcessorStartPartitionSplit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err174 error
  args := AdminClientStartPartitionSplitArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "start_partition_split", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientStartPartitionSplitResult{}
  if retval, err2 := p.handler.StartPartitionSplit(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc175 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start_partition_split: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "start_partition_split", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err174 = thrift.WrapTException(err2)
    }
    if err2 := _exc175.Write(ctx, oprot); _write_err174 == nil && err2 != nil {
      _write_err174 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err174 == nil && err2 != nil {
      _write_err174 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err174 == nil && err2 != nil {
      _write_err174 = thrift.WrapTException(err2)
    }
    if _write_err174 != nil {
      return false, thrift.WrapTException(_write_err174)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "start_partition_split", thrift.REPLY, seqId); err2 != nil {
    _write_err174 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err174 == nil && err2 != nil {
    _write_err174 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err174 == nil && err2 != nil {
    _write_err174 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err174 == nil && err2 != nil {
    _write_err174 = thrift.WrapTException(err2)
  }
  if _write_err174 != nil {
    return false, thrift.WrapTException(_write_err174)
  }
  return true, err
}

type adminClientProcessorQuerySplitStatus struct {
  handler AdminClient
}

func (p *adminClientProcessorQuerySplitStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err176 error
  args := AdminClientQuerySplitStatusArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "query_split_status", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientQuerySplitStatusResult{}
  if retval, err2 := p.handler.QuerySplitStatus(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc177 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_split_status: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "query_split_status", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err176 = thrift.WrapTException(err2)
    }
    if err2 := _exc177.Write(ctx, oprot); _write_err176 == nil && err2 != nil {
      _write_err176 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err176 == nil && err2 != nil {
      _write_err176 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err176 == nil && err2 != nil {
      _write_err176 = thrift.WrapTException(err2)
    }
    if _write_err176 != nil {
      return false, thrift.WrapTException(_write_err176)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "query_split_status", thrift.REPLY, seqId); err2 != nil {
    _write_err176 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err176 == nil && err2 != nil {
    _write_err176 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err176 == nil && err2 != nil {
    _write_err176 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err176 == nil && err2 != nil {
    _write_err176 = thrift.WrapTException(err2)
  }
  if _write_err176 != nil {
    return false, thrift.WrapTException(_write_err176)
  }
  return true, err
}

type adminClientProcessorControlPartitionSplit struct {
  handler AdminClient
}

func (p *adminClientProcessorControlPartitionSplit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err178 error
  args := AdminClientControlPartitionSplitArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "control_partition_split", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientControlPartitionSplitResult{}
  if retval, err2 := p.handler.ControlPartitionSplit(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc179 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing control_partition_split: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "control_partition_split", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err178 = thrift.WrapTException(err2)
    }
    if err2 := _exc179.Write(ctx, oprot); _write_err178 == nil && err2 != nil {
      _write_err178 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err178 == nil && err2 != nil {
      _write_err178 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err178 == nil && err2 != nil {
      _write_err178 = thrift.WrapTException(err2)
    }
    if _write_err178 != nil {
      return false, thrift.WrapTException(_write_err178)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "control_partition_split", thrift.REPLY, seqId); err2 != nil {
    _write_err178 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err178 == nil && err2 != nil {
    _write_err178 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err178 == nil && err2 != nil {
    _write_err178 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err178 == nil && err2 != nil {
    _write_err178 = thrift.WrapTException(err2)
  }
  if _write_err178 != nil {
    return false, thrift.WrapTException(_write_err178)
  }
  return true, err
}

type adminClientProcessorStartBulkLoad struct {
  handler AdminClient
}

func (p *adminClientProcessorStartBulkLoad) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err180 error
  args := AdminClientStartBulkLoadArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "start_bulk_load", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientStartBulkLoadResult{}
  if retval, err2 := p.handler.StartBulkLoad(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc181 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start_bulk_load: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "start_bulk_load", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err180 = thrift.WrapTException(err2)
    }
    if err2 := _exc181.Write(ctx, oprot); _write_err180 == nil && err2 != nil {
      _write_err180 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err180 == nil && err2 != nil {
      _write_err180 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err180 == nil && err2 != nil {
      _write_err180 = thrift.WrapTException(err2)
    }
    if _write_err180 != nil {
      return false, thrift.WrapTException(_write_err180)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "start_bulk_load", thrift.REPLY, seqId); err2 != nil {
    _write_err180 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err180 == nil && err2 != nil {
    _write_err180 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err180 == nil && err2 != nil {
    _write_err180 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err180 == nil && err2 != nil {
    _write_err180 = thrift.WrapTException(err2)
  }
  if _write_err180 != nil {
    return false, thrift.WrapTException(_write_err180)
  }
  return true, err
}

type adminClientProcessorQueryBulkLoadStatus struct {
  handler AdminClient
}

func (p *adminClientProcessorQueryBulkLoadStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err182 error
  args := AdminClientQueryBulkLoadStatusArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "query_bulk_load_status", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientQueryBulkLoadStatusResult{}
  if retval, err2 := p.handler.QueryBulkLoadStatus(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc183 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_bulk_load_status: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "query_bulk_load_status", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err182 = thrift.WrapTException(err2)
    }
    if err2 := _exc183.Write(ctx, oprot); _write_err182 == nil && err2 != nil {
      _write_err182 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err182 == nil && err2 != nil {
      _write_err182 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err182 == nil && err2 != nil {
      _write_err182 = thrift.WrapTException(err2)
    }
    if _write_err182 != nil {
      return false, thrift.WrapTException(_write_err182)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "query_bulk_load_status", thrift.REPLY, seqId); err2 != nil {
    _write_err182 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err182 == nil && err2 != nil {
    _write_err182 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err182 == nil && err2 != nil {
    _write_err182 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err182 == nil && err2 != nil {
    _write_err182 = thrift.WrapTException(err2)
  }
  if _write_err182 != nil {
    return false, thrift.WrapTException(_write_err182)
  }
  return true, err
}

type adminClientProcessorControlBulkLoad struct {
  handler AdminClient
}

func (p *adminClientProcessorControlBulkLoad) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err184 error
  args := AdminClientControlBulkLoadArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "control_bulk_load", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientControlBulkLoadResult{}
  if retval, err2 := p.handler.ControlBulkLoad(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc185 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing control_bulk_load: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "control_bulk_load", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err184 = thrift.WrapTException(err2)
    }
    if err2 := _exc185.Write(ctx, oprot); _write_err184 == nil && err2 != nil {
      _write_err184 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err184 == nil && err2 != nil {
      _write_err184 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err184 == nil && err2 != nil {
      _write_err184 = thrift.WrapTException(err2)
    }
    if _write_err184 != nil {
      return false, thrift.WrapTException(_write_err184)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "control_bulk_load", thrift.REPLY, seqId); err2 != nil {
    _write_err184 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err184 == nil && err2 != nil {
    _write_err184 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err184 == nil && err2 != nil {
    _write_err184 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err184 == nil && err2 != nil {
    _write_err184 = thrift.WrapTException(err2)
  }
  if _write_err184 != nil {
    return false, thrift.WrapTException(_write_err184)
  }
  return true, err
}

type adminClientProcessorClearBulkLoad struct {
  handler AdminClient
}

func (p *adminClientProcessorClearBulkLoad) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err186 error
  args := AdminClientClearBulkLoadArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "clear_bulk_load", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientClearBulkLoadResult{}
  if retval, err2 := p.handler.ClearBulkLoad(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc187 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clear_bulk_load: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "clear_bulk_load", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err186 = thrift.WrapTException(err2)
    }
    if err2 := _exc187.Write(ctx, oprot); _write_err186 == nil && err2 != nil {
      _write_err186 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err186 == nil && err2 != nil {
      _write_err186 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err186 == nil && err2 != nil {
      _write_err186 = thrift.WrapTException(err2)
    }
    if _write_err186 != nil {
      return false, thrift.WrapTException(_write_err186)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "clear_bulk_load", thrift.REPLY, seqId); err2 != nil {
    _write_err186 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err186 == nil && err2 != nil {
    _write_err186 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err186 == nil && err2 != nil {
    _write_err186 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err186 == nil && err2 != nil {
    _write_err186 = thrift.WrapTException(err2)
  }
  if _write_err186 != nil {
    return false, thrift.WrapTException(_write_err186)
  }
  return true, err
}

type adminClientProcessorStartManualCompact struct {
  handler AdminClient
}

func (p *adminClientProcessorStartManualCompact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err188 error
  args := AdminClientStartManualCompactArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "start_manual_compact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientStartManualCompactResult{}
  if retval, err2 := p.handler.StartManualCompact(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc189 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start_manual_compact: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "start_manual_compact", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err188 = thrift.WrapTException(err2)
    }
    if err2 := _exc189.Write(ctx, oprot); _write_err188 == nil && err2 != nil {
      _write_err188 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err188 == nil && err2 != nil {
      _write_err188 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err188 == nil && err2 != nil {
      _write_err188 = thrift.WrapTException(err2)
    }
    if _write_err188 != nil {
      return false, thrift.WrapTException(_write_err188)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "start_manual_compact", thrift.REPLY, seqId); err2 != nil {
    _write_err188 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err188 == nil && err2 != nil {
    _write_err188 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err188 == nil && err2 != nil {
    _write_err188 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err188 == nil && err2 != nil {
    _write_err188 = thrift.WrapTException(err2)
  }
  if _write_err188 != nil {
    return false, thrift.WrapTException(_write_err188)
  }
  return true, err
}

type adminClientProcessorQueryManualCompact struct {
  handler AdminClient
}

func (p *adminClientProcessorQueryManualCompact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err190 error
  args := AdminClientQueryManualCompactArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "query_manual_compact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminClientQueryManualCompactResult{}
  if retval, err2 := p.handler.QueryManualCompact(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc191 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_manual_compact: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "query_manual_compact", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err190 = thrift.WrapTException(err2)
    }
    if err2 := _exc191.Write(ctx, oprot); _write_err190 == nil && err2 != nil {
      _write_err190 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err190 == nil && err2 != nil {
      _write_err190 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err190 == nil && err2 != nil {
      _write_err190 = thrift.WrapTException(err2)
    }
    if _write_err190 != nil {
      return false, thrift.WrapTException(_write_err190)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "query_manual_compact", thrift.REPLY, seqId); err2 != nil {
    _write_err190 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err190 == nil && err2 != nil {
    _write_err190 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err190 == nil && err2 != nil {
    _write_err190 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err190 == nil && err2 != nil {
    _write_err190 = thrift.WrapTException(err2)
  }
  if _write_err190 != nil {
    return false, thrift.WrapTException(_write_err190)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type AdminClientCreateAppArgs struct {
  Req *ConfigurationCreateAppRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientCreateAppArgs() *AdminClientCreateAppArgs {
  return &AdminClientCreateAppArgs{}
}

var AdminClientCreateAppArgs_Req_DEFAULT *ConfigurationCreateAppRequest
func (p *AdminClientCreateAppArgs) GetReq() *ConfigurationCreateAppRequest {
  if !p.IsSetReq() {
    return AdminClientCreateAppArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientCreateAppArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientCreateAppArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientCreateAppArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ConfigurationCreateAppRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientCreateAppArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_app_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientCreateAppArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientCreateAppArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientCreateAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientCreateAppResult struct {
  Success *ConfigurationCreateAppResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientCreateAppResult() *AdminClientCreateAppResult {
  return &AdminClientCreateAppResult{}
}

var AdminClientCreateAppResult_Success_DEFAULT *ConfigurationCreateAppResponse
func (p *AdminClientCreateAppResult) GetSuccess() *ConfigurationCreateAppResponse {
  if !p.IsSetSuccess() {
    return AdminClientCreateAppResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientCreateAppResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientCreateAppResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientCreateAppResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ConfigurationCreateAppResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientCreateAppResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_app_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientCreateAppResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientCreateAppResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientCreateAppResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientDropAppArgs struct {
  Req *ConfigurationDropAppRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientDropAppArgs() *AdminClientDropAppArgs {
  return &AdminClientDropAppArgs{}
}

var AdminClientDropAppArgs_Req_DEFAULT *ConfigurationDropAppRequest
func (p *AdminClientDropAppArgs) GetReq() *ConfigurationDropAppRequest {
  if !p.IsSetReq() {
    return AdminClientDropAppArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientDropAppArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientDropAppArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientDropAppArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ConfigurationDropAppRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientDropAppArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_app_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientDropAppArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientDropAppArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientDropAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientDropAppResult struct {
  Success *ConfigurationDropAppResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientDropAppResult() *AdminClientDropAppResult {
  return &AdminClientDropAppResult{}
}

var AdminClientDropAppResult_Success_DEFAULT *ConfigurationDropAppResponse
func (p *AdminClientDropAppResult) GetSuccess() *ConfigurationDropAppResponse {
  if !p.IsSetSuccess() {
    return AdminClientDropAppResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientDropAppResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientDropAppResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientDropAppResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ConfigurationDropAppResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientDropAppResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_app_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientDropAppResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientDropAppResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientDropAppResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientRecallAppArgs struct {
  Req *ConfigurationRecallAppRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientRecallAppArgs() *AdminClientRecallAppArgs {
  return &AdminClientRecallAppArgs{}
}

var AdminClientRecallAppArgs_Req_DEFAULT *ConfigurationRecallAppRequest
func (p *AdminClientRecallAppArgs) GetReq() *ConfigurationRecallAppRequest {
  if !p.IsSetReq() {
    return AdminClientRecallAppArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientRecallAppArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientRecallAppArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientRecallAppArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ConfigurationRecallAppRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientRecallAppArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "recall_app_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientRecallAppArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientRecallAppArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientRecallAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientRecallAppResult struct {
  Success *ConfigurationRecallAppResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientRecallAppResult() *AdminClientRecallAppResult {
  return &AdminClientRecallAppResult{}
}

var AdminClientRecallAppResult_Success_DEFAULT *ConfigurationRecallAppResponse
func (p *AdminClientRecallAppResult) GetSuccess() *ConfigurationRecallAppResponse {
  if !p.IsSetSuccess() {
    return AdminClientRecallAppResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientRecallAppResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientRecallAppResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientRecallAppResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ConfigurationRecallAppResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientRecallAppResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "recall_app_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientRecallAppResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientRecallAppResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientRecallAppResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientListAppsArgs struct {
  Req *ConfigurationListAppsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientListAppsArgs() *AdminClientListAppsArgs {
  return &AdminClientListAppsArgs{}
}

var AdminClientListAppsArgs_Req_DEFAULT *ConfigurationListAppsRequest
func (p *AdminClientListAppsArgs) GetReq() *ConfigurationListAppsRequest {
  if !p.IsSetReq() {
    return AdminClientListAppsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientListAppsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientListAppsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientListAppsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ConfigurationListAppsRequest{
  Status: 0,
}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientListAppsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "list_apps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientListAppsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientListAppsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientListAppsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientListAppsResult struct {
  Success *ConfigurationListAppsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientListAppsResult() *AdminClientListAppsResult {
  return &AdminClientListAppsResult{}
}

var AdminClientListAppsResult_Success_DEFAULT *ConfigurationListAppsResponse
func (p *AdminClientListAppsResult) GetSuccess() *ConfigurationListAppsResponse {
  if !p.IsSetSuccess() {
    return AdminClientListAppsResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientListAppsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientListAppsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientListAppsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ConfigurationListAppsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientListAppsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "list_apps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientListAppsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientListAppsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientListAppsResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientAddDuplicationArgs struct {
  Req *DuplicationAddRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientAddDuplicationArgs() *AdminClientAddDuplicationArgs {
  return &AdminClientAddDuplicationArgs{}
}

var AdminClientAddDuplicationArgs_Req_DEFAULT *DuplicationAddRequest
func (p *AdminClientAddDuplicationArgs) GetReq() *DuplicationAddRequest {
  if !p.IsSetReq() {
    return AdminClientAddDuplicationArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientAddDuplicationArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientAddDuplicationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientAddDuplicationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DuplicationAddRequest{
  IsDuplicatingCheckpoint: true,
}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientAddDuplicationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_duplication_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientAddDuplicationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientAddDuplicationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientAddDuplicationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientAddDuplicationResult struct {
  Success *DuplicationAddResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientAddDuplicationResult() *AdminClientAddDuplicationResult {
  return &AdminClientAddDuplicationResult{}
}

var AdminClientAddDuplicationResult_Success_DEFAULT *DuplicationAddResponse
func (p *AdminClientAddDuplicationResult) GetSuccess() *DuplicationAddResponse {
  if !p.IsSetSuccess() {
    return AdminClientAddDuplicationResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientAddDuplicationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientAddDuplicationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientAddDuplicationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DuplicationAddResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientAddDuplicationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_duplication_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientAddDuplicationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientAddDuplicationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientAddDuplicationResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientQueryDuplicationArgs struct {
  Req *DuplicationQueryRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientQueryDuplicationArgs() *AdminClientQueryDuplicationArgs {
  return &AdminClientQueryDuplicationArgs{}
}

var AdminClientQueryDuplicationArgs_Req_DEFAULT *DuplicationQueryRequest
func (p *AdminClientQueryDuplicationArgs) GetReq() *DuplicationQueryRequest {
  if !p.IsSetReq() {
    return AdminClientQueryDuplicationArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientQueryDuplicationArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientQueryDuplicationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryDuplicationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DuplicationQueryRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientQueryDuplicationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_duplication_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryDuplicationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientQueryDuplicationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryDuplicationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientQueryDuplicationResult struct {
  Success *DuplicationQueryResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientQueryDuplicationResult() *AdminClientQueryDuplicationResult {
  return &AdminClientQueryDuplicationResult{}
}

var AdminClientQueryDuplicationResult_Success_DEFAULT *DuplicationQueryResponse
func (p *AdminClientQueryDuplicationResult) GetSuccess() *DuplicationQueryResponse {
  if !p.IsSetSuccess() {
    return AdminClientQueryDuplicationResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientQueryDuplicationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientQueryDuplicationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryDuplicationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DuplicationQueryResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientQueryDuplicationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_duplication_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryDuplicationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientQueryDuplicationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryDuplicationResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientModifyDuplicationArgs struct {
  Req *DuplicationModifyRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientModifyDuplicationArgs() *AdminClientModifyDuplicationArgs {
  return &AdminClientModifyDuplicationArgs{}
}

var AdminClientModifyDuplicationArgs_Req_DEFAULT *DuplicationModifyRequest
func (p *AdminClientModifyDuplicationArgs) GetReq() *DuplicationModifyRequest {
  if !p.IsSetReq() {
    return AdminClientModifyDuplicationArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientModifyDuplicationArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientModifyDuplicationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientModifyDuplicationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DuplicationModifyRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientModifyDuplicationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "modify_duplication_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientModifyDuplicationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientModifyDuplicationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientModifyDuplicationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientModifyDuplicationResult struct {
  Success *DuplicationModifyResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientModifyDuplicationResult() *AdminClientModifyDuplicationResult {
  return &AdminClientModifyDuplicationResult{}
}

var AdminClientModifyDuplicationResult_Success_DEFAULT *DuplicationModifyResponse
func (p *AdminClientModifyDuplicationResult) GetSuccess() *DuplicationModifyResponse {
  if !p.IsSetSuccess() {
    return AdminClientModifyDuplicationResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientModifyDuplicationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientModifyDuplicationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientModifyDuplicationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DuplicationModifyResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientModifyDuplicationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "modify_duplication_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientModifyDuplicationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientModifyDuplicationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientModifyDuplicationResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientQueryAppInfoArgs struct {
  Req *QueryAppInfoRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientQueryAppInfoArgs() *AdminClientQueryAppInfoArgs {
  return &AdminClientQueryAppInfoArgs{}
}

var AdminClientQueryAppInfoArgs_Req_DEFAULT *QueryAppInfoRequest
func (p *AdminClientQueryAppInfoArgs) GetReq() *QueryAppInfoRequest {
  if !p.IsSetReq() {
    return AdminClientQueryAppInfoArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientQueryAppInfoArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientQueryAppInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryAppInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &QueryAppInfoRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientQueryAppInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_app_info_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryAppInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientQueryAppInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryAppInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientQueryAppInfoResult struct {
  Success *QueryAppInfoResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientQueryAppInfoResult() *AdminClientQueryAppInfoResult {
  return &AdminClientQueryAppInfoResult{}
}

var AdminClientQueryAppInfoResult_Success_DEFAULT *QueryAppInfoResponse
func (p *AdminClientQueryAppInfoResult) GetSuccess() *QueryAppInfoResponse {
  if !p.IsSetSuccess() {
    return AdminClientQueryAppInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientQueryAppInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientQueryAppInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryAppInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &QueryAppInfoResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientQueryAppInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_app_info_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryAppInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientQueryAppInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryAppInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientUpdateAppEnvArgs struct {
  Req *ConfigurationUpdateAppEnvRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientUpdateAppEnvArgs() *AdminClientUpdateAppEnvArgs {
  return &AdminClientUpdateAppEnvArgs{}
}

var AdminClientUpdateAppEnvArgs_Req_DEFAULT *ConfigurationUpdateAppEnvRequest
func (p *AdminClientUpdateAppEnvArgs) GetReq() *ConfigurationUpdateAppEnvRequest {
  if !p.IsSetReq() {
    return AdminClientUpdateAppEnvArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientUpdateAppEnvArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientUpdateAppEnvArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientUpdateAppEnvArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ConfigurationUpdateAppEnvRequest{
  Op: 0,
}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientUpdateAppEnvArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_app_env_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientUpdateAppEnvArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientUpdateAppEnvArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientUpdateAppEnvArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientUpdateAppEnvResult struct {
  Success *ConfigurationUpdateAppEnvResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientUpdateAppEnvResult() *AdminClientUpdateAppEnvResult {
  return &AdminClientUpdateAppEnvResult{}
}

var AdminClientUpdateAppEnvResult_Success_DEFAULT *ConfigurationUpdateAppEnvResponse
func (p *AdminClientUpdateAppEnvResult) GetSuccess() *ConfigurationUpdateAppEnvResponse {
  if !p.IsSetSuccess() {
    return AdminClientUpdateAppEnvResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientUpdateAppEnvResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientUpdateAppEnvResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientUpdateAppEnvResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ConfigurationUpdateAppEnvResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientUpdateAppEnvResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_app_env_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientUpdateAppEnvResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientUpdateAppEnvResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientUpdateAppEnvResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientListNodesArgs struct {
  Req *ConfigurationListNodesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientListNodesArgs() *AdminClientListNodesArgs {
  return &AdminClientListNodesArgs{}
}

var AdminClientListNodesArgs_Req_DEFAULT *ConfigurationListNodesRequest
func (p *AdminClientListNodesArgs) GetReq() *ConfigurationListNodesRequest {
  if !p.IsSetReq() {
    return AdminClientListNodesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientListNodesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientListNodesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientListNodesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ConfigurationListNodesRequest{
  Status: 0,
}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientListNodesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "list_nodes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientListNodesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientListNodesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientListNodesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientListNodesResult struct {
  Success *ConfigurationListNodesResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientListNodesResult() *AdminClientListNodesResult {
  return &AdminClientListNodesResult{}
}

var AdminClientListNodesResult_Success_DEFAULT *ConfigurationListNodesResponse
func (p *AdminClientListNodesResult) GetSuccess() *ConfigurationListNodesResponse {
  if !p.IsSetSuccess() {
    return AdminClientListNodesResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientListNodesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientListNodesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientListNodesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ConfigurationListNodesResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientListNodesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "list_nodes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientListNodesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientListNodesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientListNodesResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientQueryClusterInfoArgs struct {
  Req *ConfigurationClusterInfoRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientQueryClusterInfoArgs() *AdminClientQueryClusterInfoArgs {
  return &AdminClientQueryClusterInfoArgs{}
}

var AdminClientQueryClusterInfoArgs_Req_DEFAULT *ConfigurationClusterInfoRequest
func (p *AdminClientQueryClusterInfoArgs) GetReq() *ConfigurationClusterInfoRequest {
  if !p.IsSetReq() {
    return AdminClientQueryClusterInfoArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientQueryClusterInfoArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientQueryClusterInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryClusterInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ConfigurationClusterInfoRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientQueryClusterInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_cluster_info_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryClusterInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientQueryClusterInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryClusterInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientQueryClusterInfoResult struct {
  Success *ConfigurationClusterInfoResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientQueryClusterInfoResult() *AdminClientQueryClusterInfoResult {
  return &AdminClientQueryClusterInfoResult{}
}

var AdminClientQueryClusterInfoResult_Success_DEFAULT *ConfigurationClusterInfoResponse
func (p *AdminClientQueryClusterInfoResult) GetSuccess() *ConfigurationClusterInfoResponse {
  if !p.IsSetSuccess() {
    return AdminClientQueryClusterInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientQueryClusterInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientQueryClusterInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryClusterInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ConfigurationClusterInfoResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientQueryClusterInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_cluster_info_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryClusterInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientQueryClusterInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryClusterInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientMetaControlArgs struct {
  Req *ConfigurationMetaControlRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientMetaControlArgs() *AdminClientMetaControlArgs {
  return &AdminClientMetaControlArgs{}
}

var AdminClientMetaControlArgs_Req_DEFAULT *ConfigurationMetaControlRequest
func (p *AdminClientMetaControlArgs) GetReq() *ConfigurationMetaControlRequest {
  if !p.IsSetReq() {
    return AdminClientMetaControlArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientMetaControlArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientMetaControlArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientMetaControlArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ConfigurationMetaControlRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientMetaControlArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "meta_control_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientMetaControlArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientMetaControlArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientMetaControlArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientMetaControlResult struct {
  Success *ConfigurationMetaControlResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientMetaControlResult() *AdminClientMetaControlResult {
  return &AdminClientMetaControlResult{}
}

var AdminClientMetaControlResult_Success_DEFAULT *ConfigurationMetaControlResponse
func (p *AdminClientMetaControlResult) GetSuccess() *ConfigurationMetaControlResponse {
  if !p.IsSetSuccess() {
    return AdminClientMetaControlResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientMetaControlResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientMetaControlResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientMetaControlResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ConfigurationMetaControlResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientMetaControlResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "meta_control_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientMetaControlResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientMetaControlResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientMetaControlResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientQueryBackupPolicyArgs struct {
  Req *ConfigurationQueryBackupPolicyRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientQueryBackupPolicyArgs() *AdminClientQueryBackupPolicyArgs {
  return &AdminClientQueryBackupPolicyArgs{}
}

var AdminClientQueryBackupPolicyArgs_Req_DEFAULT *ConfigurationQueryBackupPolicyRequest
func (p *AdminClientQueryBackupPolicyArgs) GetReq() *ConfigurationQueryBackupPolicyRequest {
  if !p.IsSetReq() {
    return AdminClientQueryBackupPolicyArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientQueryBackupPolicyArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientQueryBackupPolicyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryBackupPolicyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ConfigurationQueryBackupPolicyRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientQueryBackupPolicyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_backup_policy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryBackupPolicyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientQueryBackupPolicyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryBackupPolicyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientQueryBackupPolicyResult struct {
  Success *ConfigurationQueryBackupPolicyResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientQueryBackupPolicyResult() *AdminClientQueryBackupPolicyResult {
  return &AdminClientQueryBackupPolicyResult{}
}

var AdminClientQueryBackupPolicyResult_Success_DEFAULT *ConfigurationQueryBackupPolicyResponse
func (p *AdminClientQueryBackupPolicyResult) GetSuccess() *ConfigurationQueryBackupPolicyResponse {
  if !p.IsSetSuccess() {
    return AdminClientQueryBackupPolicyResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientQueryBackupPolicyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientQueryBackupPolicyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryBackupPolicyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ConfigurationQueryBackupPolicyResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientQueryBackupPolicyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_backup_policy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryBackupPolicyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientQueryBackupPolicyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryBackupPolicyResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientBalanceArgs struct {
  Req *ConfigurationBalancerRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientBalanceArgs() *AdminClientBalanceArgs {
  return &AdminClientBalanceArgs{}
}

var AdminClientBalanceArgs_Req_DEFAULT *ConfigurationBalancerRequest
func (p *AdminClientBalanceArgs) GetReq() *ConfigurationBalancerRequest {
  if !p.IsSetReq() {
    return AdminClientBalanceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientBalanceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientBalanceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientBalanceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ConfigurationBalancerRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientBalanceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "balance_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientBalanceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientBalanceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientBalanceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientBalanceResult struct {
  Success *ConfigurationBalancerResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientBalanceResult() *AdminClientBalanceResult {
  return &AdminClientBalanceResult{}
}

var AdminClientBalanceResult_Success_DEFAULT *ConfigurationBalancerResponse
func (p *AdminClientBalanceResult) GetSuccess() *ConfigurationBalancerResponse {
  if !p.IsSetSuccess() {
    return AdminClientBalanceResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientBalanceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientBalanceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientBalanceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ConfigurationBalancerResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientBalanceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "balance_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientBalanceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientBalanceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientBalanceResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientStartBackupAppArgs struct {
  Req *StartBackupAppRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientStartBackupAppArgs() *AdminClientStartBackupAppArgs {
  return &AdminClientStartBackupAppArgs{}
}

var AdminClientStartBackupAppArgs_Req_DEFAULT *StartBackupAppRequest
func (p *AdminClientStartBackupAppArgs) GetReq() *StartBackupAppRequest {
  if !p.IsSetReq() {
    return AdminClientStartBackupAppArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientStartBackupAppArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientStartBackupAppArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientStartBackupAppArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &StartBackupAppRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientStartBackupAppArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_backup_app_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientStartBackupAppArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientStartBackupAppArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientStartBackupAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientStartBackupAppResult struct {
  Success *StartBackupAppResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientStartBackupAppResult() *AdminClientStartBackupAppResult {
  return &AdminClientStartBackupAppResult{}
}

var AdminClientStartBackupAppResult_Success_DEFAULT *StartBackupAppResponse
func (p *AdminClientStartBackupAppResult) GetSuccess() *StartBackupAppResponse {
  if !p.IsSetSuccess() {
    return AdminClientStartBackupAppResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientStartBackupAppResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientStartBackupAppResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientStartBackupAppResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &StartBackupAppResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientStartBackupAppResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_backup_app_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientStartBackupAppResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientStartBackupAppResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientStartBackupAppResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientQueryBackupStatusArgs struct {
  Req *QueryBackupStatusRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientQueryBackupStatusArgs() *AdminClientQueryBackupStatusArgs {
  return &AdminClientQueryBackupStatusArgs{}
}

var AdminClientQueryBackupStatusArgs_Req_DEFAULT *QueryBackupStatusRequest
func (p *AdminClientQueryBackupStatusArgs) GetReq() *QueryBackupStatusRequest {
  if !p.IsSetReq() {
    return AdminClientQueryBackupStatusArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientQueryBackupStatusArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientQueryBackupStatusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryBackupStatusArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &QueryBackupStatusRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientQueryBackupStatusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_backup_status_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryBackupStatusArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientQueryBackupStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryBackupStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientQueryBackupStatusResult struct {
  Success *QueryBackupStatusResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientQueryBackupStatusResult() *AdminClientQueryBackupStatusResult {
  return &AdminClientQueryBackupStatusResult{}
}

var AdminClientQueryBackupStatusResult_Success_DEFAULT *QueryBackupStatusResponse
func (p *AdminClientQueryBackupStatusResult) GetSuccess() *QueryBackupStatusResponse {
  if !p.IsSetSuccess() {
    return AdminClientQueryBackupStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientQueryBackupStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientQueryBackupStatusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryBackupStatusResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &QueryBackupStatusResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientQueryBackupStatusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_backup_status_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryBackupStatusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientQueryBackupStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryBackupStatusResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientRestoreAppArgs struct {
  Req *ConfigurationRestoreRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientRestoreAppArgs() *AdminClientRestoreAppArgs {
  return &AdminClientRestoreAppArgs{}
}

var AdminClientRestoreAppArgs_Req_DEFAULT *ConfigurationRestoreRequest
func (p *AdminClientRestoreAppArgs) GetReq() *ConfigurationRestoreRequest {
  if !p.IsSetReq() {
    return AdminClientRestoreAppArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientRestoreAppArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientRestoreAppArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientRestoreAppArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ConfigurationRestoreRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientRestoreAppArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "restore_app_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientRestoreAppArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientRestoreAppArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientRestoreAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientRestoreAppResult struct {
  Success *ConfigurationCreateAppResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientRestoreAppResult() *AdminClientRestoreAppResult {
  return &AdminClientRestoreAppResult{}
}

var AdminClientRestoreAppResult_Success_DEFAULT *ConfigurationCreateAppResponse
func (p *AdminClientRestoreAppResult) GetSuccess() *ConfigurationCreateAppResponse {
  if !p.IsSetSuccess() {
    return AdminClientRestoreAppResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientRestoreAppResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientRestoreAppResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientRestoreAppResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ConfigurationCreateAppResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientRestoreAppResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "restore_app_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientRestoreAppResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientRestoreAppResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientRestoreAppResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientStartPartitionSplitArgs struct {
  Req *StartPartitionSplitRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientStartPartitionSplitArgs() *AdminClientStartPartitionSplitArgs {
  return &AdminClientStartPartitionSplitArgs{}
}

var AdminClientStartPartitionSplitArgs_Req_DEFAULT *StartPartitionSplitRequest
func (p *AdminClientStartPartitionSplitArgs) GetReq() *StartPartitionSplitRequest {
  if !p.IsSetReq() {
    return AdminClientStartPartitionSplitArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientStartPartitionSplitArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientStartPartitionSplitArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientStartPartitionSplitArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &StartPartitionSplitRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientStartPartitionSplitArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_partition_split_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientStartPartitionSplitArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientStartPartitionSplitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientStartPartitionSplitArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientStartPartitionSplitResult struct {
  Success *StartPartitionSplitResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientStartPartitionSplitResult() *AdminClientStartPartitionSplitResult {
  return &AdminClientStartPartitionSplitResult{}
}

var AdminClientStartPartitionSplitResult_Success_DEFAULT *StartPartitionSplitResponse
func (p *AdminClientStartPartitionSplitResult) GetSuccess() *StartPartitionSplitResponse {
  if !p.IsSetSuccess() {
    return AdminClientStartPartitionSplitResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientStartPartitionSplitResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientStartPartitionSplitResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientStartPartitionSplitResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &StartPartitionSplitResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientStartPartitionSplitResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_partition_split_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientStartPartitionSplitResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientStartPartitionSplitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientStartPartitionSplitResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientQuerySplitStatusArgs struct {
  Req *QuerySplitRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientQuerySplitStatusArgs() *AdminClientQuerySplitStatusArgs {
  return &AdminClientQuerySplitStatusArgs{}
}

var AdminClientQuerySplitStatusArgs_Req_DEFAULT *QuerySplitRequest
func (p *AdminClientQuerySplitStatusArgs) GetReq() *QuerySplitRequest {
  if !p.IsSetReq() {
    return AdminClientQuerySplitStatusArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientQuerySplitStatusArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientQuerySplitStatusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQuerySplitStatusArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &QuerySplitRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientQuerySplitStatusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_split_status_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQuerySplitStatusArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientQuerySplitStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQuerySplitStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientQuerySplitStatusResult struct {
  Success *QuerySplitResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientQuerySplitStatusResult() *AdminClientQuerySplitStatusResult {
  return &AdminClientQuerySplitStatusResult{}
}

var AdminClientQuerySplitStatusResult_Success_DEFAULT *QuerySplitResponse
func (p *AdminClientQuerySplitStatusResult) GetSuccess() *QuerySplitResponse {
  if !p.IsSetSuccess() {
    return AdminClientQuerySplitStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientQuerySplitStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientQuerySplitStatusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQuerySplitStatusResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &QuerySplitResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientQuerySplitStatusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_split_status_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQuerySplitStatusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientQuerySplitStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQuerySplitStatusResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientControlPartitionSplitArgs struct {
  Req *ControlSplitRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientControlPartitionSplitArgs() *AdminClientControlPartitionSplitArgs {
  return &AdminClientControlPartitionSplitArgs{}
}

var AdminClientControlPartitionSplitArgs_Req_DEFAULT *ControlSplitRequest
func (p *AdminClientControlPartitionSplitArgs) GetReq() *ControlSplitRequest {
  if !p.IsSetReq() {
    return AdminClientControlPartitionSplitArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientControlPartitionSplitArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientControlPartitionSplitArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientControlPartitionSplitArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ControlSplitRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientControlPartitionSplitArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "control_partition_split_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientControlPartitionSplitArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientControlPartitionSplitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientControlPartitionSplitArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientControlPartitionSplitResult struct {
  Success *ControlSplitResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientControlPartitionSplitResult() *AdminClientControlPartitionSplitResult {
  return &AdminClientControlPartitionSplitResult{}
}

var AdminClientControlPartitionSplitResult_Success_DEFAULT *ControlSplitResponse
func (p *AdminClientControlPartitionSplitResult) GetSuccess() *ControlSplitResponse {
  if !p.IsSetSuccess() {
    return AdminClientControlPartitionSplitResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientControlPartitionSplitResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientControlPartitionSplitResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientControlPartitionSplitResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ControlSplitResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientControlPartitionSplitResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "control_partition_split_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientControlPartitionSplitResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientControlPartitionSplitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientControlPartitionSplitResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientStartBulkLoadArgs struct {
  Req *StartBulkLoadRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientStartBulkLoadArgs() *AdminClientStartBulkLoadArgs {
  return &AdminClientStartBulkLoadArgs{}
}

var AdminClientStartBulkLoadArgs_Req_DEFAULT *StartBulkLoadRequest
func (p *AdminClientStartBulkLoadArgs) GetReq() *StartBulkLoadRequest {
  if !p.IsSetReq() {
    return AdminClientStartBulkLoadArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientStartBulkLoadArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientStartBulkLoadArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientStartBulkLoadArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &StartBulkLoadRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientStartBulkLoadArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_bulk_load_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientStartBulkLoadArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientStartBulkLoadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientStartBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientStartBulkLoadResult struct {
  Success *StartBulkLoadResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientStartBulkLoadResult() *AdminClientStartBulkLoadResult {
  return &AdminClientStartBulkLoadResult{}
}

var AdminClientStartBulkLoadResult_Success_DEFAULT *StartBulkLoadResponse
func (p *AdminClientStartBulkLoadResult) GetSuccess() *StartBulkLoadResponse {
  if !p.IsSetSuccess() {
    return AdminClientStartBulkLoadResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientStartBulkLoadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientStartBulkLoadResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientStartBulkLoadResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &StartBulkLoadResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientStartBulkLoadResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_bulk_load_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientStartBulkLoadResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientStartBulkLoadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientStartBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientQueryBulkLoadStatusArgs struct {
  Req *QueryBulkLoadRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientQueryBulkLoadStatusArgs() *AdminClientQueryBulkLoadStatusArgs {
  return &AdminClientQueryBulkLoadStatusArgs{}
}

var AdminClientQueryBulkLoadStatusArgs_Req_DEFAULT *QueryBulkLoadRequest
func (p *AdminClientQueryBulkLoadStatusArgs) GetReq() *QueryBulkLoadRequest {
  if !p.IsSetReq() {
    return AdminClientQueryBulkLoadStatusArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientQueryBulkLoadStatusArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientQueryBulkLoadStatusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryBulkLoadStatusArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &QueryBulkLoadRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientQueryBulkLoadStatusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_bulk_load_status_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryBulkLoadStatusArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientQueryBulkLoadStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryBulkLoadStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientQueryBulkLoadStatusResult struct {
  Success *QueryBulkLoadResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientQueryBulkLoadStatusResult() *AdminClientQueryBulkLoadStatusResult {
  return &AdminClientQueryBulkLoadStatusResult{}
}

var AdminClientQueryBulkLoadStatusResult_Success_DEFAULT *QueryBulkLoadResponse
func (p *AdminClientQueryBulkLoadStatusResult) GetSuccess() *QueryBulkLoadResponse {
  if !p.IsSetSuccess() {
    return AdminClientQueryBulkLoadStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientQueryBulkLoadStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientQueryBulkLoadStatusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryBulkLoadStatusResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &QueryBulkLoadResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientQueryBulkLoadStatusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_bulk_load_status_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryBulkLoadStatusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientQueryBulkLoadStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryBulkLoadStatusResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientControlBulkLoadArgs struct {
  Req *ControlBulkLoadRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientControlBulkLoadArgs() *AdminClientControlBulkLoadArgs {
  return &AdminClientControlBulkLoadArgs{}
}

var AdminClientControlBulkLoadArgs_Req_DEFAULT *ControlBulkLoadRequest
func (p *AdminClientControlBulkLoadArgs) GetReq() *ControlBulkLoadRequest {
  if !p.IsSetReq() {
    return AdminClientControlBulkLoadArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientControlBulkLoadArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientControlBulkLoadArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientControlBulkLoadArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ControlBulkLoadRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientControlBulkLoadArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "control_bulk_load_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientControlBulkLoadArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientControlBulkLoadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientControlBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientControlBulkLoadResult struct {
  Success *ControlBulkLoadResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientControlBulkLoadResult() *AdminClientControlBulkLoadResult {
  return &AdminClientControlBulkLoadResult{}
}

var AdminClientControlBulkLoadResult_Success_DEFAULT *ControlBulkLoadResponse
func (p *AdminClientControlBulkLoadResult) GetSuccess() *ControlBulkLoadResponse {
  if !p.IsSetSuccess() {
    return AdminClientControlBulkLoadResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientControlBulkLoadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientControlBulkLoadResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientControlBulkLoadResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ControlBulkLoadResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientControlBulkLoadResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "control_bulk_load_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientControlBulkLoadResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientControlBulkLoadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientControlBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientClearBulkLoadArgs struct {
  Req *ClearBulkLoadStateRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientClearBulkLoadArgs() *AdminClientClearBulkLoadArgs {
  return &AdminClientClearBulkLoadArgs{}
}

var AdminClientClearBulkLoadArgs_Req_DEFAULT *ClearBulkLoadStateRequest
func (p *AdminClientClearBulkLoadArgs) GetReq() *ClearBulkLoadStateRequest {
  if !p.IsSetReq() {
    return AdminClientClearBulkLoadArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientClearBulkLoadArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientClearBulkLoadArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientClearBulkLoadArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ClearBulkLoadStateRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientClearBulkLoadArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clear_bulk_load_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientClearBulkLoadArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientClearBulkLoadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientClearBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientClearBulkLoadResult struct {
  Success *ClearBulkLoadStateResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientClearBulkLoadResult() *AdminClientClearBulkLoadResult {
  return &AdminClientClearBulkLoadResult{}
}

var AdminClientClearBulkLoadResult_Success_DEFAULT *ClearBulkLoadStateResponse
func (p *AdminClientClearBulkLoadResult) GetSuccess() *ClearBulkLoadStateResponse {
  if !p.IsSetSuccess() {
    return AdminClientClearBulkLoadResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientClearBulkLoadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientClearBulkLoadResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientClearBulkLoadResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ClearBulkLoadStateResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientClearBulkLoadResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clear_bulk_load_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientClearBulkLoadResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientClearBulkLoadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientClearBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientStartManualCompactArgs struct {
  Req *StartAppManualCompactRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientStartManualCompactArgs() *AdminClientStartManualCompactArgs {
  return &AdminClientStartManualCompactArgs{}
}

var AdminClientStartManualCompactArgs_Req_DEFAULT *StartAppManualCompactRequest
func (p *AdminClientStartManualCompactArgs) GetReq() *StartAppManualCompactRequest {
  if !p.IsSetReq() {
    return AdminClientStartManualCompactArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientStartManualCompactArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientStartManualCompactArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientStartManualCompactArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &StartAppManualCompactRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientStartManualCompactArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_manual_compact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientStartManualCompactArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientStartManualCompactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientStartManualCompactArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientStartManualCompactResult struct {
  Success *StartAppManualCompactResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientStartManualCompactResult() *AdminClientStartManualCompactResult {
  return &AdminClientStartManualCompactResult{}
}

var AdminClientStartManualCompactResult_Success_DEFAULT *StartAppManualCompactResponse
func (p *AdminClientStartManualCompactResult) GetSuccess() *StartAppManualCompactResponse {
  if !p.IsSetSuccess() {
    return AdminClientStartManualCompactResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientStartManualCompactResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientStartManualCompactResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientStartManualCompactResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &StartAppManualCompactResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientStartManualCompactResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_manual_compact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientStartManualCompactResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientStartManualCompactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientStartManualCompactResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientQueryManualCompactArgs struct {
  Req *QueryAppManualCompactRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientQueryManualCompactArgs() *AdminClientQueryManualCompactArgs {
  return &AdminClientQueryManualCompactArgs{}
}

var AdminClientQueryManualCompactArgs_Req_DEFAULT *QueryAppManualCompactRequest
func (p *AdminClientQueryManualCompactArgs) GetReq() *QueryAppManualCompactRequest {
  if !p.IsSetReq() {
    return AdminClientQueryManualCompactArgs_Req_DEFAULT
  }
return p.Req
}
func (p *AdminClientQueryManualCompactArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *AdminClientQueryManualCompactArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryManualCompactArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &QueryAppManualCompactRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *AdminClientQueryManualCompactArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_manual_compact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryManualCompactArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *AdminClientQueryManualCompactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryManualCompactArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientQueryManualCompactResult struct {
  Success *QueryAppManualCompactResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientQueryManualCompactResult() *AdminClientQueryManualCompactResult {
  return &AdminClientQueryManualCompactResult{}
}

var AdminClientQueryManualCompactResult_Success_DEFAULT *QueryAppManualCompactResponse
func (p *AdminClientQueryManualCompactResult) GetSuccess() *QueryAppManualCompactResponse {
  if !p.IsSetSuccess() {
    return AdminClientQueryManualCompactResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminClientQueryManualCompactResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminClientQueryManualCompactResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminClientQueryManualCompactResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &QueryAppManualCompactResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminClientQueryManualCompactResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_manual_compact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminClientQueryManualCompactResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminClientQueryManualCompactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminClientQueryManualCompactResult(%+v)", *p)
}


