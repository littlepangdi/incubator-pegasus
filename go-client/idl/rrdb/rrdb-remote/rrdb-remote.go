// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/apache/incubator-pegasus/go-client/idl/replication"
	"github.com/apache/incubator-pegasus/go-client/idl/base"
	"github.com/apache/incubator-pegasus/go-client/idl/rrdb"
)

var _ = replication.GoUnusedProtection__
var _ = base.GoUnusedProtection__
var _ = rrdb.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  update_response put(update_request update)")
  fmt.Fprintln(os.Stderr, "  update_response multi_put(multi_put_request request)")
  fmt.Fprintln(os.Stderr, "  update_response remove(blob key)")
  fmt.Fprintln(os.Stderr, "  multi_remove_response multi_remove(multi_remove_request request)")
  fmt.Fprintln(os.Stderr, "  incr_response incr(incr_request request)")
  fmt.Fprintln(os.Stderr, "  check_and_set_response check_and_set(check_and_set_request request)")
  fmt.Fprintln(os.Stderr, "  check_and_mutate_response check_and_mutate(check_and_mutate_request request)")
  fmt.Fprintln(os.Stderr, "  read_response get(blob key)")
  fmt.Fprintln(os.Stderr, "  multi_get_response multi_get(multi_get_request request)")
  fmt.Fprintln(os.Stderr, "  batch_get_response batch_get(batch_get_request request)")
  fmt.Fprintln(os.Stderr, "  count_response sortkey_count(blob hash_key)")
  fmt.Fprintln(os.Stderr, "  ttl_response ttl(blob key)")
  fmt.Fprintln(os.Stderr, "  scan_response get_scanner(get_scanner_request request)")
  fmt.Fprintln(os.Stderr, "  scan_response scan(scan_request request)")
  fmt.Fprintln(os.Stderr, "  void clear_scanner(i64 context_id)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := rrdb.NewRrdbClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "put":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Put requires 1 args")
      flag.Usage()
    }
    arg103 := flag.Arg(1)
    mbTrans104 := thrift.NewTMemoryBufferLen(len(arg103))
    defer mbTrans104.Close()
    _, err105 := mbTrans104.WriteString(arg103)
    if err105 != nil {
      Usage()
      return
    }
    factory106 := thrift.NewTJSONProtocolFactory()
    jsProt107 := factory106.GetProtocol(mbTrans104)
    argvalue0 := rrdb.NewUpdateRequest()
    err108 := argvalue0.Read(context.Background(), jsProt107)
    if err108 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Put(context.Background(), value0))
    fmt.Print("\n")
    break
  case "multi_put":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiPut requires 1 args")
      flag.Usage()
    }
    arg109 := flag.Arg(1)
    mbTrans110 := thrift.NewTMemoryBufferLen(len(arg109))
    defer mbTrans110.Close()
    _, err111 := mbTrans110.WriteString(arg109)
    if err111 != nil {
      Usage()
      return
    }
    factory112 := thrift.NewTJSONProtocolFactory()
    jsProt113 := factory112.GetProtocol(mbTrans110)
    argvalue0 := rrdb.NewMultiPutRequest()
    err114 := argvalue0.Read(context.Background(), jsProt113)
    if err114 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiPut(context.Background(), value0))
    fmt.Print("\n")
    break
  case "remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Remove requires 1 args")
      flag.Usage()
    }
    arg115 := flag.Arg(1)
    mbTrans116 := thrift.NewTMemoryBufferLen(len(arg115))
    defer mbTrans116.Close()
    _, err117 := mbTrans116.WriteString(arg115)
    if err117 != nil {
      Usage()
      return
    }
    factory118 := thrift.NewTJSONProtocolFactory()
    jsProt119 := factory118.GetProtocol(mbTrans116)
    argvalue0 := base.NewBlob()
    err120 := argvalue0.Read(context.Background(), jsProt119)
    if err120 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "multi_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiRemove requires 1 args")
      flag.Usage()
    }
    arg121 := flag.Arg(1)
    mbTrans122 := thrift.NewTMemoryBufferLen(len(arg121))
    defer mbTrans122.Close()
    _, err123 := mbTrans122.WriteString(arg121)
    if err123 != nil {
      Usage()
      return
    }
    factory124 := thrift.NewTJSONProtocolFactory()
    jsProt125 := factory124.GetProtocol(mbTrans122)
    argvalue0 := rrdb.NewMultiRemoveRequest()
    err126 := argvalue0.Read(context.Background(), jsProt125)
    if err126 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "incr":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Incr requires 1 args")
      flag.Usage()
    }
    arg127 := flag.Arg(1)
    mbTrans128 := thrift.NewTMemoryBufferLen(len(arg127))
    defer mbTrans128.Close()
    _, err129 := mbTrans128.WriteString(arg127)
    if err129 != nil {
      Usage()
      return
    }
    factory130 := thrift.NewTJSONProtocolFactory()
    jsProt131 := factory130.GetProtocol(mbTrans128)
    argvalue0 := rrdb.NewIncrRequest()
    err132 := argvalue0.Read(context.Background(), jsProt131)
    if err132 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Incr(context.Background(), value0))
    fmt.Print("\n")
    break
  case "check_and_set":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckAndSet requires 1 args")
      flag.Usage()
    }
    arg133 := flag.Arg(1)
    mbTrans134 := thrift.NewTMemoryBufferLen(len(arg133))
    defer mbTrans134.Close()
    _, err135 := mbTrans134.WriteString(arg133)
    if err135 != nil {
      Usage()
      return
    }
    factory136 := thrift.NewTJSONProtocolFactory()
    jsProt137 := factory136.GetProtocol(mbTrans134)
    argvalue0 := rrdb.NewCheckAndSetRequest()
    err138 := argvalue0.Read(context.Background(), jsProt137)
    if err138 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CheckAndSet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "check_and_mutate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckAndMutate requires 1 args")
      flag.Usage()
    }
    arg139 := flag.Arg(1)
    mbTrans140 := thrift.NewTMemoryBufferLen(len(arg139))
    defer mbTrans140.Close()
    _, err141 := mbTrans140.WriteString(arg139)
    if err141 != nil {
      Usage()
      return
    }
    factory142 := thrift.NewTJSONProtocolFactory()
    jsProt143 := factory142.GetProtocol(mbTrans140)
    argvalue0 := rrdb.NewCheckAndMutateRequest()
    err144 := argvalue0.Read(context.Background(), jsProt143)
    if err144 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CheckAndMutate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Get requires 1 args")
      flag.Usage()
    }
    arg145 := flag.Arg(1)
    mbTrans146 := thrift.NewTMemoryBufferLen(len(arg145))
    defer mbTrans146.Close()
    _, err147 := mbTrans146.WriteString(arg145)
    if err147 != nil {
      Usage()
      return
    }
    factory148 := thrift.NewTJSONProtocolFactory()
    jsProt149 := factory148.GetProtocol(mbTrans146)
    argvalue0 := base.NewBlob()
    err150 := argvalue0.Read(context.Background(), jsProt149)
    if err150 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Get(context.Background(), value0))
    fmt.Print("\n")
    break
  case "multi_get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiGet requires 1 args")
      flag.Usage()
    }
    arg151 := flag.Arg(1)
    mbTrans152 := thrift.NewTMemoryBufferLen(len(arg151))
    defer mbTrans152.Close()
    _, err153 := mbTrans152.WriteString(arg151)
    if err153 != nil {
      Usage()
      return
    }
    factory154 := thrift.NewTJSONProtocolFactory()
    jsProt155 := factory154.GetProtocol(mbTrans152)
    argvalue0 := rrdb.NewMultiGetRequest()
    err156 := argvalue0.Read(context.Background(), jsProt155)
    if err156 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "batch_get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "BatchGet requires 1 args")
      flag.Usage()
    }
    arg157 := flag.Arg(1)
    mbTrans158 := thrift.NewTMemoryBufferLen(len(arg157))
    defer mbTrans158.Close()
    _, err159 := mbTrans158.WriteString(arg157)
    if err159 != nil {
      Usage()
      return
    }
    factory160 := thrift.NewTJSONProtocolFactory()
    jsProt161 := factory160.GetProtocol(mbTrans158)
    argvalue0 := rrdb.NewBatchGetRequest()
    err162 := argvalue0.Read(context.Background(), jsProt161)
    if err162 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.BatchGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sortkey_count":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SortkeyCount requires 1 args")
      flag.Usage()
    }
    arg163 := flag.Arg(1)
    mbTrans164 := thrift.NewTMemoryBufferLen(len(arg163))
    defer mbTrans164.Close()
    _, err165 := mbTrans164.WriteString(arg163)
    if err165 != nil {
      Usage()
      return
    }
    factory166 := thrift.NewTJSONProtocolFactory()
    jsProt167 := factory166.GetProtocol(mbTrans164)
    argvalue0 := base.NewBlob()
    err168 := argvalue0.Read(context.Background(), jsProt167)
    if err168 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SortkeyCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "ttl":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TTL requires 1 args")
      flag.Usage()
    }
    arg169 := flag.Arg(1)
    mbTrans170 := thrift.NewTMemoryBufferLen(len(arg169))
    defer mbTrans170.Close()
    _, err171 := mbTrans170.WriteString(arg169)
    if err171 != nil {
      Usage()
      return
    }
    factory172 := thrift.NewTJSONProtocolFactory()
    jsProt173 := factory172.GetProtocol(mbTrans170)
    argvalue0 := base.NewBlob()
    err174 := argvalue0.Read(context.Background(), jsProt173)
    if err174 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TTL(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_scanner":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetScanner requires 1 args")
      flag.Usage()
    }
    arg175 := flag.Arg(1)
    mbTrans176 := thrift.NewTMemoryBufferLen(len(arg175))
    defer mbTrans176.Close()
    _, err177 := mbTrans176.WriteString(arg175)
    if err177 != nil {
      Usage()
      return
    }
    factory178 := thrift.NewTJSONProtocolFactory()
    jsProt179 := factory178.GetProtocol(mbTrans176)
    argvalue0 := rrdb.NewGetScannerRequest()
    err180 := argvalue0.Read(context.Background(), jsProt179)
    if err180 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetScanner(context.Background(), value0))
    fmt.Print("\n")
    break
  case "scan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Scan requires 1 args")
      flag.Usage()
    }
    arg181 := flag.Arg(1)
    mbTrans182 := thrift.NewTMemoryBufferLen(len(arg181))
    defer mbTrans182.Close()
    _, err183 := mbTrans182.WriteString(arg181)
    if err183 != nil {
      Usage()
      return
    }
    factory184 := thrift.NewTJSONProtocolFactory()
    jsProt185 := factory184.GetProtocol(mbTrans182)
    argvalue0 := rrdb.NewScanRequest()
    err186 := argvalue0.Read(context.Background(), jsProt185)
    if err186 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Scan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "clear_scanner":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ClearScanner requires 1 args")
      flag.Usage()
    }
    argvalue0, err187 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err187 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearScanner(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
