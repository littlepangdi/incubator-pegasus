// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package rrdb

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"github.com/apache/incubator-pegasus/go-client/idl/replication"
	"github.com/apache/incubator-pegasus/go-client/idl/base"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = replication.GoUnusedProtection__
var _ = base.GoUnusedProtection__
type FilterType int64
const (
  FilterType_FT_NO_FILTER FilterType = 0
  FilterType_FT_MATCH_ANYWHERE FilterType = 1
  FilterType_FT_MATCH_PREFIX FilterType = 2
  FilterType_FT_MATCH_POSTFIX FilterType = 3
)

func (p FilterType) String() string {
  switch p {
  case FilterType_FT_NO_FILTER: return "FT_NO_FILTER"
  case FilterType_FT_MATCH_ANYWHERE: return "FT_MATCH_ANYWHERE"
  case FilterType_FT_MATCH_PREFIX: return "FT_MATCH_PREFIX"
  case FilterType_FT_MATCH_POSTFIX: return "FT_MATCH_POSTFIX"
  }
  return "<UNSET>"
}

func FilterTypeFromString(s string) (FilterType, error) {
  switch s {
  case "FT_NO_FILTER": return FilterType_FT_NO_FILTER, nil 
  case "FT_MATCH_ANYWHERE": return FilterType_FT_MATCH_ANYWHERE, nil 
  case "FT_MATCH_PREFIX": return FilterType_FT_MATCH_PREFIX, nil 
  case "FT_MATCH_POSTFIX": return FilterType_FT_MATCH_POSTFIX, nil 
  }
  return FilterType(0), fmt.Errorf("not a valid FilterType string")
}


func FilterTypePtr(v FilterType) *FilterType { return &v }

func (p FilterType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FilterType) UnmarshalText(text []byte) error {
q, err := FilterTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FilterType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FilterType(v)
return nil
}

func (p * FilterType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type CasCheckType int64
const (
  CasCheckType_CT_NO_CHECK CasCheckType = 0
  CasCheckType_CT_VALUE_NOT_EXIST CasCheckType = 1
  CasCheckType_CT_VALUE_NOT_EXIST_OR_EMPTY CasCheckType = 2
  CasCheckType_CT_VALUE_EXIST CasCheckType = 3
  CasCheckType_CT_VALUE_NOT_EMPTY CasCheckType = 4
  CasCheckType_CT_VALUE_MATCH_ANYWHERE CasCheckType = 5
  CasCheckType_CT_VALUE_MATCH_PREFIX CasCheckType = 6
  CasCheckType_CT_VALUE_MATCH_POSTFIX CasCheckType = 7
  CasCheckType_CT_VALUE_BYTES_LESS CasCheckType = 8
  CasCheckType_CT_VALUE_BYTES_LESS_OR_EQUAL CasCheckType = 9
  CasCheckType_CT_VALUE_BYTES_EQUAL CasCheckType = 10
  CasCheckType_CT_VALUE_BYTES_GREATER_OR_EQUAL CasCheckType = 11
  CasCheckType_CT_VALUE_BYTES_GREATER CasCheckType = 12
  CasCheckType_CT_VALUE_INT_LESS CasCheckType = 13
  CasCheckType_CT_VALUE_INT_LESS_OR_EQUAL CasCheckType = 14
  CasCheckType_CT_VALUE_INT_EQUAL CasCheckType = 15
  CasCheckType_CT_VALUE_INT_GREATER_OR_EQUAL CasCheckType = 16
  CasCheckType_CT_VALUE_INT_GREATER CasCheckType = 17
)

func (p CasCheckType) String() string {
  switch p {
  case CasCheckType_CT_NO_CHECK: return "CT_NO_CHECK"
  case CasCheckType_CT_VALUE_NOT_EXIST: return "CT_VALUE_NOT_EXIST"
  case CasCheckType_CT_VALUE_NOT_EXIST_OR_EMPTY: return "CT_VALUE_NOT_EXIST_OR_EMPTY"
  case CasCheckType_CT_VALUE_EXIST: return "CT_VALUE_EXIST"
  case CasCheckType_CT_VALUE_NOT_EMPTY: return "CT_VALUE_NOT_EMPTY"
  case CasCheckType_CT_VALUE_MATCH_ANYWHERE: return "CT_VALUE_MATCH_ANYWHERE"
  case CasCheckType_CT_VALUE_MATCH_PREFIX: return "CT_VALUE_MATCH_PREFIX"
  case CasCheckType_CT_VALUE_MATCH_POSTFIX: return "CT_VALUE_MATCH_POSTFIX"
  case CasCheckType_CT_VALUE_BYTES_LESS: return "CT_VALUE_BYTES_LESS"
  case CasCheckType_CT_VALUE_BYTES_LESS_OR_EQUAL: return "CT_VALUE_BYTES_LESS_OR_EQUAL"
  case CasCheckType_CT_VALUE_BYTES_EQUAL: return "CT_VALUE_BYTES_EQUAL"
  case CasCheckType_CT_VALUE_BYTES_GREATER_OR_EQUAL: return "CT_VALUE_BYTES_GREATER_OR_EQUAL"
  case CasCheckType_CT_VALUE_BYTES_GREATER: return "CT_VALUE_BYTES_GREATER"
  case CasCheckType_CT_VALUE_INT_LESS: return "CT_VALUE_INT_LESS"
  case CasCheckType_CT_VALUE_INT_LESS_OR_EQUAL: return "CT_VALUE_INT_LESS_OR_EQUAL"
  case CasCheckType_CT_VALUE_INT_EQUAL: return "CT_VALUE_INT_EQUAL"
  case CasCheckType_CT_VALUE_INT_GREATER_OR_EQUAL: return "CT_VALUE_INT_GREATER_OR_EQUAL"
  case CasCheckType_CT_VALUE_INT_GREATER: return "CT_VALUE_INT_GREATER"
  }
  return "<UNSET>"
}

func CasCheckTypeFromString(s string) (CasCheckType, error) {
  switch s {
  case "CT_NO_CHECK": return CasCheckType_CT_NO_CHECK, nil 
  case "CT_VALUE_NOT_EXIST": return CasCheckType_CT_VALUE_NOT_EXIST, nil 
  case "CT_VALUE_NOT_EXIST_OR_EMPTY": return CasCheckType_CT_VALUE_NOT_EXIST_OR_EMPTY, nil 
  case "CT_VALUE_EXIST": return CasCheckType_CT_VALUE_EXIST, nil 
  case "CT_VALUE_NOT_EMPTY": return CasCheckType_CT_VALUE_NOT_EMPTY, nil 
  case "CT_VALUE_MATCH_ANYWHERE": return CasCheckType_CT_VALUE_MATCH_ANYWHERE, nil 
  case "CT_VALUE_MATCH_PREFIX": return CasCheckType_CT_VALUE_MATCH_PREFIX, nil 
  case "CT_VALUE_MATCH_POSTFIX": return CasCheckType_CT_VALUE_MATCH_POSTFIX, nil 
  case "CT_VALUE_BYTES_LESS": return CasCheckType_CT_VALUE_BYTES_LESS, nil 
  case "CT_VALUE_BYTES_LESS_OR_EQUAL": return CasCheckType_CT_VALUE_BYTES_LESS_OR_EQUAL, nil 
  case "CT_VALUE_BYTES_EQUAL": return CasCheckType_CT_VALUE_BYTES_EQUAL, nil 
  case "CT_VALUE_BYTES_GREATER_OR_EQUAL": return CasCheckType_CT_VALUE_BYTES_GREATER_OR_EQUAL, nil 
  case "CT_VALUE_BYTES_GREATER": return CasCheckType_CT_VALUE_BYTES_GREATER, nil 
  case "CT_VALUE_INT_LESS": return CasCheckType_CT_VALUE_INT_LESS, nil 
  case "CT_VALUE_INT_LESS_OR_EQUAL": return CasCheckType_CT_VALUE_INT_LESS_OR_EQUAL, nil 
  case "CT_VALUE_INT_EQUAL": return CasCheckType_CT_VALUE_INT_EQUAL, nil 
  case "CT_VALUE_INT_GREATER_OR_EQUAL": return CasCheckType_CT_VALUE_INT_GREATER_OR_EQUAL, nil 
  case "CT_VALUE_INT_GREATER": return CasCheckType_CT_VALUE_INT_GREATER, nil 
  }
  return CasCheckType(0), fmt.Errorf("not a valid CasCheckType string")
}


func CasCheckTypePtr(v CasCheckType) *CasCheckType { return &v }

func (p CasCheckType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CasCheckType) UnmarshalText(text []byte) error {
q, err := CasCheckTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CasCheckType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CasCheckType(v)
return nil
}

func (p * CasCheckType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MutateOperation int64
const (
  MutateOperation_MO_PUT MutateOperation = 0
  MutateOperation_MO_DELETE MutateOperation = 1
)

func (p MutateOperation) String() string {
  switch p {
  case MutateOperation_MO_PUT: return "MO_PUT"
  case MutateOperation_MO_DELETE: return "MO_DELETE"
  }
  return "<UNSET>"
}

func MutateOperationFromString(s string) (MutateOperation, error) {
  switch s {
  case "MO_PUT": return MutateOperation_MO_PUT, nil 
  case "MO_DELETE": return MutateOperation_MO_DELETE, nil 
  }
  return MutateOperation(0), fmt.Errorf("not a valid MutateOperation string")
}


func MutateOperationPtr(v MutateOperation) *MutateOperation { return &v }

func (p MutateOperation) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MutateOperation) UnmarshalText(text []byte) error {
q, err := MutateOperationFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MutateOperation) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MutateOperation(v)
return nil
}

func (p * MutateOperation) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Key
//  - Value
//  - ExpireTsSeconds
type UpdateRequest struct {
  Key *base.Blob `thrift:"key,1" db:"key" json:"key"`
  Value *base.Blob `thrift:"value,2" db:"value" json:"value"`
  ExpireTsSeconds int32 `thrift:"expire_ts_seconds,3" db:"expire_ts_seconds" json:"expire_ts_seconds"`
}

func NewUpdateRequest() *UpdateRequest {
  return &UpdateRequest{}
}

var UpdateRequest_Key_DEFAULT *base.Blob
func (p *UpdateRequest) GetKey() *base.Blob {
  if !p.IsSetKey() {
    return UpdateRequest_Key_DEFAULT
  }
return p.Key
}
var UpdateRequest_Value_DEFAULT *base.Blob
func (p *UpdateRequest) GetValue() *base.Blob {
  if !p.IsSetValue() {
    return UpdateRequest_Value_DEFAULT
  }
return p.Value
}

func (p *UpdateRequest) GetExpireTsSeconds() int32 {
  return p.ExpireTsSeconds
}
func (p *UpdateRequest) IsSetKey() bool {
  return p.Key != nil
}

func (p *UpdateRequest) IsSetValue() bool {
  return p.Value != nil
}

func (p *UpdateRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Key = &base.Blob{}
  if err := p.Key.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
  }
  return nil
}

func (p *UpdateRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Value = &base.Blob{}
  if err := p.Value.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
  }
  return nil
}

func (p *UpdateRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExpireTsSeconds = v
}
  return nil
}

func (p *UpdateRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := p.Key.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *UpdateRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := p.Value.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *UpdateRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expire_ts_seconds", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expire_ts_seconds: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ExpireTsSeconds)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expire_ts_seconds (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expire_ts_seconds: ", p), err) }
  return err
}

func (p *UpdateRequest) Equals(other *UpdateRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Key.Equals(other.Key) { return false }
  if !p.Value.Equals(other.Value) { return false }
  if p.ExpireTsSeconds != other.ExpireTsSeconds { return false }
  return true
}

func (p *UpdateRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateRequest(%+v)", *p)
}

func (p *UpdateRequest) Validate() error {
  return nil
}
// Attributes:
//  - Error
//  - AppID
//  - PartitionIndex
//  - Decree
//  - Server
type UpdateResponse struct {
  Error int32 `thrift:"error,1" db:"error" json:"error"`
  AppID int32 `thrift:"app_id,2" db:"app_id" json:"app_id"`
  PartitionIndex int32 `thrift:"partition_index,3" db:"partition_index" json:"partition_index"`
  Decree int64 `thrift:"decree,4" db:"decree" json:"decree"`
  Server string `thrift:"server,5" db:"server" json:"server"`
}

func NewUpdateResponse() *UpdateResponse {
  return &UpdateResponse{}
}


func (p *UpdateResponse) GetError() int32 {
  return p.Error
}

func (p *UpdateResponse) GetAppID() int32 {
  return p.AppID
}

func (p *UpdateResponse) GetPartitionIndex() int32 {
  return p.PartitionIndex
}

func (p *UpdateResponse) GetDecree() int64 {
  return p.Decree
}

func (p *UpdateResponse) GetServer() string {
  return p.Server
}
func (p *UpdateResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *UpdateResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *UpdateResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartitionIndex = v
}
  return nil
}

func (p *UpdateResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Decree = v
}
  return nil
}

func (p *UpdateResponse)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Server = v
}
  return nil
}

func (p *UpdateResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *UpdateResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:app_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:app_id: ", p), err) }
  return err
}

func (p *UpdateResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_index", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partition_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_index (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partition_index: ", p), err) }
  return err
}

func (p *UpdateResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "decree", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:decree: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Decree)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.decree (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:decree: ", p), err) }
  return err
}

func (p *UpdateResponse) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:server: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Server)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:server: ", p), err) }
  return err
}

func (p *UpdateResponse) Equals(other *UpdateResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if p.AppID != other.AppID { return false }
  if p.PartitionIndex != other.PartitionIndex { return false }
  if p.Decree != other.Decree { return false }
  if p.Server != other.Server { return false }
  return true
}

func (p *UpdateResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateResponse(%+v)", *p)
}

func (p *UpdateResponse) Validate() error {
  return nil
}
// Attributes:
//  - Error
//  - Value
//  - AppID
//  - PartitionIndex
//  - Server
type ReadResponse struct {
  Error int32 `thrift:"error,1" db:"error" json:"error"`
  Value *base.Blob `thrift:"value,2" db:"value" json:"value"`
  AppID int32 `thrift:"app_id,3" db:"app_id" json:"app_id"`
  PartitionIndex int32 `thrift:"partition_index,4" db:"partition_index" json:"partition_index"`
  // unused field # 5
  Server string `thrift:"server,6" db:"server" json:"server"`
}

func NewReadResponse() *ReadResponse {
  return &ReadResponse{}
}


func (p *ReadResponse) GetError() int32 {
  return p.Error
}
var ReadResponse_Value_DEFAULT *base.Blob
func (p *ReadResponse) GetValue() *base.Blob {
  if !p.IsSetValue() {
    return ReadResponse_Value_DEFAULT
  }
return p.Value
}

func (p *ReadResponse) GetAppID() int32 {
  return p.AppID
}

func (p *ReadResponse) GetPartitionIndex() int32 {
  return p.PartitionIndex
}

func (p *ReadResponse) GetServer() string {
  return p.Server
}
func (p *ReadResponse) IsSetValue() bool {
  return p.Value != nil
}

func (p *ReadResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *ReadResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Value = &base.Blob{}
  if err := p.Value.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
  }
  return nil
}

func (p *ReadResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *ReadResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PartitionIndex = v
}
  return nil
}

func (p *ReadResponse)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Server = v
}
  return nil
}

func (p *ReadResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "read_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *ReadResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := p.Value.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *ReadResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_id: ", p), err) }
  return err
}

func (p *ReadResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_index", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partition_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_index (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partition_index: ", p), err) }
  return err
}

func (p *ReadResponse) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Server)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err) }
  return err
}

func (p *ReadResponse) Equals(other *ReadResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if !p.Value.Equals(other.Value) { return false }
  if p.AppID != other.AppID { return false }
  if p.PartitionIndex != other.PartitionIndex { return false }
  if p.Server != other.Server { return false }
  return true
}

func (p *ReadResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadResponse(%+v)", *p)
}

func (p *ReadResponse) Validate() error {
  return nil
}
// Attributes:
//  - Error
//  - TTLSeconds
//  - AppID
//  - PartitionIndex
//  - Server
type TTLResponse struct {
  Error int32 `thrift:"error,1" db:"error" json:"error"`
  TTLSeconds int32 `thrift:"ttl_seconds,2" db:"ttl_seconds" json:"ttl_seconds"`
  AppID int32 `thrift:"app_id,3" db:"app_id" json:"app_id"`
  PartitionIndex int32 `thrift:"partition_index,4" db:"partition_index" json:"partition_index"`
  // unused field # 5
  Server string `thrift:"server,6" db:"server" json:"server"`
}

func NewTTLResponse() *TTLResponse {
  return &TTLResponse{}
}


func (p *TTLResponse) GetError() int32 {
  return p.Error
}

func (p *TTLResponse) GetTTLSeconds() int32 {
  return p.TTLSeconds
}

func (p *TTLResponse) GetAppID() int32 {
  return p.AppID
}

func (p *TTLResponse) GetPartitionIndex() int32 {
  return p.PartitionIndex
}

func (p *TTLResponse) GetServer() string {
  return p.Server
}
func (p *TTLResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTLResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *TTLResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TTLSeconds = v
}
  return nil
}

func (p *TTLResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *TTLResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PartitionIndex = v
}
  return nil
}

func (p *TTLResponse)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Server = v
}
  return nil
}

func (p *TTLResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ttl_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTLResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TTLResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ttl_seconds", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttl_seconds: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TTLSeconds)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ttl_seconds (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttl_seconds: ", p), err) }
  return err
}

func (p *TTLResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_id: ", p), err) }
  return err
}

func (p *TTLResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_index", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partition_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_index (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partition_index: ", p), err) }
  return err
}

func (p *TTLResponse) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Server)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err) }
  return err
}

func (p *TTLResponse) Equals(other *TTLResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if p.TTLSeconds != other.TTLSeconds { return false }
  if p.AppID != other.AppID { return false }
  if p.PartitionIndex != other.PartitionIndex { return false }
  if p.Server != other.Server { return false }
  return true
}

func (p *TTLResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTLResponse(%+v)", *p)
}

func (p *TTLResponse) Validate() error {
  return nil
}
// Attributes:
//  - Error
//  - Count
//  - AppID
//  - PartitionIndex
//  - Server
type CountResponse struct {
  Error int32 `thrift:"error,1" db:"error" json:"error"`
  Count int64 `thrift:"count,2" db:"count" json:"count"`
  AppID int32 `thrift:"app_id,3" db:"app_id" json:"app_id"`
  PartitionIndex int32 `thrift:"partition_index,4" db:"partition_index" json:"partition_index"`
  // unused field # 5
  Server string `thrift:"server,6" db:"server" json:"server"`
}

func NewCountResponse() *CountResponse {
  return &CountResponse{}
}


func (p *CountResponse) GetError() int32 {
  return p.Error
}

func (p *CountResponse) GetCount() int64 {
  return p.Count
}

func (p *CountResponse) GetAppID() int32 {
  return p.AppID
}

func (p *CountResponse) GetPartitionIndex() int32 {
  return p.PartitionIndex
}

func (p *CountResponse) GetServer() string {
  return p.Server
}
func (p *CountResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CountResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *CountResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *CountResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *CountResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PartitionIndex = v
}
  return nil
}

func (p *CountResponse)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Server = v
}
  return nil
}

func (p *CountResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "count_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CountResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *CountResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *CountResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_id: ", p), err) }
  return err
}

func (p *CountResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_index", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partition_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_index (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partition_index: ", p), err) }
  return err
}

func (p *CountResponse) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Server)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err) }
  return err
}

func (p *CountResponse) Equals(other *CountResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if p.Count != other.Count { return false }
  if p.AppID != other.AppID { return false }
  if p.PartitionIndex != other.PartitionIndex { return false }
  if p.Server != other.Server { return false }
  return true
}

func (p *CountResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CountResponse(%+v)", *p)
}

func (p *CountResponse) Validate() error {
  return nil
}
// Attributes:
//  - Key
//  - Value
//  - ExpireTsSeconds
type KeyValue struct {
  Key *base.Blob `thrift:"key,1" db:"key" json:"key"`
  Value *base.Blob `thrift:"value,2" db:"value" json:"value"`
  ExpireTsSeconds *int32 `thrift:"expire_ts_seconds,3" db:"expire_ts_seconds" json:"expire_ts_seconds,omitempty"`
}

func NewKeyValue() *KeyValue {
  return &KeyValue{}
}

var KeyValue_Key_DEFAULT *base.Blob
func (p *KeyValue) GetKey() *base.Blob {
  if !p.IsSetKey() {
    return KeyValue_Key_DEFAULT
  }
return p.Key
}
var KeyValue_Value_DEFAULT *base.Blob
func (p *KeyValue) GetValue() *base.Blob {
  if !p.IsSetValue() {
    return KeyValue_Value_DEFAULT
  }
return p.Value
}
var KeyValue_ExpireTsSeconds_DEFAULT int32
func (p *KeyValue) GetExpireTsSeconds() int32 {
  if !p.IsSetExpireTsSeconds() {
    return KeyValue_ExpireTsSeconds_DEFAULT
  }
return *p.ExpireTsSeconds
}
func (p *KeyValue) IsSetKey() bool {
  return p.Key != nil
}

func (p *KeyValue) IsSetValue() bool {
  return p.Value != nil
}

func (p *KeyValue) IsSetExpireTsSeconds() bool {
  return p.ExpireTsSeconds != nil
}

func (p *KeyValue) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KeyValue)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Key = &base.Blob{}
  if err := p.Key.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
  }
  return nil
}

func (p *KeyValue)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Value = &base.Blob{}
  if err := p.Value.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
  }
  return nil
}

func (p *KeyValue)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExpireTsSeconds = &v
}
  return nil
}

func (p *KeyValue) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "key_value"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KeyValue) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := p.Key.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *KeyValue) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := p.Value.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *KeyValue) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExpireTsSeconds() {
    if err := oprot.WriteFieldBegin(ctx, "expire_ts_seconds", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expire_ts_seconds: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ExpireTsSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.expire_ts_seconds (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expire_ts_seconds: ", p), err) }
  }
  return err
}

func (p *KeyValue) Equals(other *KeyValue) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Key.Equals(other.Key) { return false }
  if !p.Value.Equals(other.Value) { return false }
  if p.ExpireTsSeconds != other.ExpireTsSeconds {
    if p.ExpireTsSeconds == nil || other.ExpireTsSeconds == nil {
      return false
    }
    if (*p.ExpireTsSeconds) != (*other.ExpireTsSeconds) { return false }
  }
  return true
}

func (p *KeyValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KeyValue(%+v)", *p)
}

func (p *KeyValue) Validate() error {
  return nil
}
// Attributes:
//  - HashKey
//  - Kvs
//  - ExpireTsSeconds
type MultiPutRequest struct {
  HashKey *base.Blob `thrift:"hash_key,1" db:"hash_key" json:"hash_key"`
  Kvs []*KeyValue `thrift:"kvs,2" db:"kvs" json:"kvs"`
  ExpireTsSeconds int32 `thrift:"expire_ts_seconds,3" db:"expire_ts_seconds" json:"expire_ts_seconds"`
}

func NewMultiPutRequest() *MultiPutRequest {
  return &MultiPutRequest{}
}

var MultiPutRequest_HashKey_DEFAULT *base.Blob
func (p *MultiPutRequest) GetHashKey() *base.Blob {
  if !p.IsSetHashKey() {
    return MultiPutRequest_HashKey_DEFAULT
  }
return p.HashKey
}

func (p *MultiPutRequest) GetKvs() []*KeyValue {
  return p.Kvs
}

func (p *MultiPutRequest) GetExpireTsSeconds() int32 {
  return p.ExpireTsSeconds
}
func (p *MultiPutRequest) IsSetHashKey() bool {
  return p.HashKey != nil
}

func (p *MultiPutRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MultiPutRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.HashKey = &base.Blob{}
  if err := p.HashKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HashKey), err)
  }
  return nil
}

func (p *MultiPutRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*KeyValue, 0, size)
  p.Kvs =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &KeyValue{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Kvs = append(p.Kvs, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiPutRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExpireTsSeconds = v
}
  return nil
}

func (p *MultiPutRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multi_put_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiPutRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hash_key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash_key: ", p), err) }
  if err := p.HashKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HashKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash_key: ", p), err) }
  return err
}

func (p *MultiPutRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kvs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:kvs: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Kvs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Kvs {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:kvs: ", p), err) }
  return err
}

func (p *MultiPutRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expire_ts_seconds", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expire_ts_seconds: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ExpireTsSeconds)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expire_ts_seconds (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expire_ts_seconds: ", p), err) }
  return err
}

func (p *MultiPutRequest) Equals(other *MultiPutRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.HashKey.Equals(other.HashKey) { return false }
  if len(p.Kvs) != len(other.Kvs) { return false }
  for i, _tgt := range p.Kvs {
    _src1 := other.Kvs[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if p.ExpireTsSeconds != other.ExpireTsSeconds { return false }
  return true
}

func (p *MultiPutRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiPutRequest(%+v)", *p)
}

func (p *MultiPutRequest) Validate() error {
  return nil
}
// Attributes:
//  - HashKey
//  - SortKeys
//  - MaxCount
type MultiRemoveRequest struct {
  HashKey *base.Blob `thrift:"hash_key,1" db:"hash_key" json:"hash_key"`
  SortKeys []*base.Blob `thrift:"sort_keys,2" db:"sort_keys" json:"sort_keys"`
  MaxCount int64 `thrift:"max_count,3" db:"max_count" json:"max_count"`
}

func NewMultiRemoveRequest() *MultiRemoveRequest {
  return &MultiRemoveRequest{}
}

var MultiRemoveRequest_HashKey_DEFAULT *base.Blob
func (p *MultiRemoveRequest) GetHashKey() *base.Blob {
  if !p.IsSetHashKey() {
    return MultiRemoveRequest_HashKey_DEFAULT
  }
return p.HashKey
}

func (p *MultiRemoveRequest) GetSortKeys() []*base.Blob {
  return p.SortKeys
}

func (p *MultiRemoveRequest) GetMaxCount() int64 {
  return p.MaxCount
}
func (p *MultiRemoveRequest) IsSetHashKey() bool {
  return p.HashKey != nil
}

func (p *MultiRemoveRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MultiRemoveRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.HashKey = &base.Blob{}
  if err := p.HashKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HashKey), err)
  }
  return nil
}

func (p *MultiRemoveRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*base.Blob, 0, size)
  p.SortKeys =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &base.Blob{}
    if err := _elem2.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.SortKeys = append(p.SortKeys, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiRemoveRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxCount = v
}
  return nil
}

func (p *MultiRemoveRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multi_remove_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiRemoveRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hash_key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash_key: ", p), err) }
  if err := p.HashKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HashKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash_key: ", p), err) }
  return err
}

func (p *MultiRemoveRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sort_keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sort_keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.SortKeys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SortKeys {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sort_keys: ", p), err) }
  return err
}

func (p *MultiRemoveRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_count", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_count: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MaxCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_count: ", p), err) }
  return err
}

func (p *MultiRemoveRequest) Equals(other *MultiRemoveRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.HashKey.Equals(other.HashKey) { return false }
  if len(p.SortKeys) != len(other.SortKeys) { return false }
  for i, _tgt := range p.SortKeys {
    _src3 := other.SortKeys[i]
    if !_tgt.Equals(_src3) { return false }
  }
  if p.MaxCount != other.MaxCount { return false }
  return true
}

func (p *MultiRemoveRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiRemoveRequest(%+v)", *p)
}

func (p *MultiRemoveRequest) Validate() error {
  return nil
}
// Attributes:
//  - Error
//  - Count
//  - AppID
//  - PartitionIndex
//  - Decree
//  - Server
type MultiRemoveResponse struct {
  Error int32 `thrift:"error,1" db:"error" json:"error"`
  Count int64 `thrift:"count,2" db:"count" json:"count"`
  AppID int32 `thrift:"app_id,3" db:"app_id" json:"app_id"`
  PartitionIndex int32 `thrift:"partition_index,4" db:"partition_index" json:"partition_index"`
  Decree int64 `thrift:"decree,5" db:"decree" json:"decree"`
  Server string `thrift:"server,6" db:"server" json:"server"`
}

func NewMultiRemoveResponse() *MultiRemoveResponse {
  return &MultiRemoveResponse{}
}


func (p *MultiRemoveResponse) GetError() int32 {
  return p.Error
}

func (p *MultiRemoveResponse) GetCount() int64 {
  return p.Count
}

func (p *MultiRemoveResponse) GetAppID() int32 {
  return p.AppID
}

func (p *MultiRemoveResponse) GetPartitionIndex() int32 {
  return p.PartitionIndex
}

func (p *MultiRemoveResponse) GetDecree() int64 {
  return p.Decree
}

func (p *MultiRemoveResponse) GetServer() string {
  return p.Server
}
func (p *MultiRemoveResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MultiRemoveResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *MultiRemoveResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *MultiRemoveResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *MultiRemoveResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PartitionIndex = v
}
  return nil
}

func (p *MultiRemoveResponse)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Decree = v
}
  return nil
}

func (p *MultiRemoveResponse)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Server = v
}
  return nil
}

func (p *MultiRemoveResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multi_remove_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiRemoveResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *MultiRemoveResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *MultiRemoveResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_id: ", p), err) }
  return err
}

func (p *MultiRemoveResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_index", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partition_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_index (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partition_index: ", p), err) }
  return err
}

func (p *MultiRemoveResponse) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "decree", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:decree: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Decree)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.decree (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:decree: ", p), err) }
  return err
}

func (p *MultiRemoveResponse) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Server)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err) }
  return err
}

func (p *MultiRemoveResponse) Equals(other *MultiRemoveResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if p.Count != other.Count { return false }
  if p.AppID != other.AppID { return false }
  if p.PartitionIndex != other.PartitionIndex { return false }
  if p.Decree != other.Decree { return false }
  if p.Server != other.Server { return false }
  return true
}

func (p *MultiRemoveResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiRemoveResponse(%+v)", *p)
}

func (p *MultiRemoveResponse) Validate() error {
  return nil
}
// Attributes:
//  - HashKey
//  - SortKeys
//  - MaxKvCount
//  - MaxKvSize
//  - NoValue
//  - StartSortkey
//  - StopSortkey
//  - StartInclusive
//  - StopInclusive
//  - SortKeyFilterType
//  - SortKeyFilterPattern
//  - Reverse
type MultiGetRequest struct {
  HashKey *base.Blob `thrift:"hash_key,1" db:"hash_key" json:"hash_key"`
  SortKeys []*base.Blob `thrift:"sort_keys,2" db:"sort_keys" json:"sort_keys"`
  MaxKvCount int32 `thrift:"max_kv_count,3" db:"max_kv_count" json:"max_kv_count"`
  MaxKvSize int32 `thrift:"max_kv_size,4" db:"max_kv_size" json:"max_kv_size"`
  NoValue bool `thrift:"no_value,5" db:"no_value" json:"no_value"`
  StartSortkey *base.Blob `thrift:"start_sortkey,6" db:"start_sortkey" json:"start_sortkey"`
  StopSortkey *base.Blob `thrift:"stop_sortkey,7" db:"stop_sortkey" json:"stop_sortkey"`
  StartInclusive bool `thrift:"start_inclusive,8" db:"start_inclusive" json:"start_inclusive"`
  StopInclusive bool `thrift:"stop_inclusive,9" db:"stop_inclusive" json:"stop_inclusive"`
  SortKeyFilterType FilterType `thrift:"sort_key_filter_type,10" db:"sort_key_filter_type" json:"sort_key_filter_type"`
  SortKeyFilterPattern *base.Blob `thrift:"sort_key_filter_pattern,11" db:"sort_key_filter_pattern" json:"sort_key_filter_pattern"`
  Reverse bool `thrift:"reverse,12" db:"reverse" json:"reverse"`
}

func NewMultiGetRequest() *MultiGetRequest {
  return &MultiGetRequest{}
}

var MultiGetRequest_HashKey_DEFAULT *base.Blob
func (p *MultiGetRequest) GetHashKey() *base.Blob {
  if !p.IsSetHashKey() {
    return MultiGetRequest_HashKey_DEFAULT
  }
return p.HashKey
}

func (p *MultiGetRequest) GetSortKeys() []*base.Blob {
  return p.SortKeys
}

func (p *MultiGetRequest) GetMaxKvCount() int32 {
  return p.MaxKvCount
}

func (p *MultiGetRequest) GetMaxKvSize() int32 {
  return p.MaxKvSize
}

func (p *MultiGetRequest) GetNoValue() bool {
  return p.NoValue
}
var MultiGetRequest_StartSortkey_DEFAULT *base.Blob
func (p *MultiGetRequest) GetStartSortkey() *base.Blob {
  if !p.IsSetStartSortkey() {
    return MultiGetRequest_StartSortkey_DEFAULT
  }
return p.StartSortkey
}
var MultiGetRequest_StopSortkey_DEFAULT *base.Blob
func (p *MultiGetRequest) GetStopSortkey() *base.Blob {
  if !p.IsSetStopSortkey() {
    return MultiGetRequest_StopSortkey_DEFAULT
  }
return p.StopSortkey
}

func (p *MultiGetRequest) GetStartInclusive() bool {
  return p.StartInclusive
}

func (p *MultiGetRequest) GetStopInclusive() bool {
  return p.StopInclusive
}

func (p *MultiGetRequest) GetSortKeyFilterType() FilterType {
  return p.SortKeyFilterType
}
var MultiGetRequest_SortKeyFilterPattern_DEFAULT *base.Blob
func (p *MultiGetRequest) GetSortKeyFilterPattern() *base.Blob {
  if !p.IsSetSortKeyFilterPattern() {
    return MultiGetRequest_SortKeyFilterPattern_DEFAULT
  }
return p.SortKeyFilterPattern
}

func (p *MultiGetRequest) GetReverse() bool {
  return p.Reverse
}
func (p *MultiGetRequest) IsSetHashKey() bool {
  return p.HashKey != nil
}

func (p *MultiGetRequest) IsSetStartSortkey() bool {
  return p.StartSortkey != nil
}

func (p *MultiGetRequest) IsSetStopSortkey() bool {
  return p.StopSortkey != nil
}

func (p *MultiGetRequest) IsSetSortKeyFilterPattern() bool {
  return p.SortKeyFilterPattern != nil
}

func (p *MultiGetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MultiGetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.HashKey = &base.Blob{}
  if err := p.HashKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HashKey), err)
  }
  return nil
}

func (p *MultiGetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*base.Blob, 0, size)
  p.SortKeys =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &base.Blob{}
    if err := _elem4.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.SortKeys = append(p.SortKeys, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxKvCount = v
}
  return nil
}

func (p *MultiGetRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxKvSize = v
}
  return nil
}

func (p *MultiGetRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NoValue = v
}
  return nil
}

func (p *MultiGetRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.StartSortkey = &base.Blob{}
  if err := p.StartSortkey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartSortkey), err)
  }
  return nil
}

func (p *MultiGetRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.StopSortkey = &base.Blob{}
  if err := p.StopSortkey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StopSortkey), err)
  }
  return nil
}

func (p *MultiGetRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.StartInclusive = v
}
  return nil
}

func (p *MultiGetRequest)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StopInclusive = v
}
  return nil
}

func (p *MultiGetRequest)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := FilterType(v)
  p.SortKeyFilterType = temp
}
  return nil
}

func (p *MultiGetRequest)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  p.SortKeyFilterPattern = &base.Blob{}
  if err := p.SortKeyFilterPattern.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SortKeyFilterPattern), err)
  }
  return nil
}

func (p *MultiGetRequest)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Reverse = v
}
  return nil
}

func (p *MultiGetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multi_get_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiGetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hash_key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash_key: ", p), err) }
  if err := p.HashKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HashKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash_key: ", p), err) }
  return err
}

func (p *MultiGetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sort_keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sort_keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.SortKeys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SortKeys {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sort_keys: ", p), err) }
  return err
}

func (p *MultiGetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_kv_count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_kv_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxKvCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_kv_count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_kv_count: ", p), err) }
  return err
}

func (p *MultiGetRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_kv_size", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_kv_size: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxKvSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_kv_size (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_kv_size: ", p), err) }
  return err
}

func (p *MultiGetRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "no_value", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:no_value: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NoValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.no_value (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:no_value: ", p), err) }
  return err
}

func (p *MultiGetRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start_sortkey", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:start_sortkey: ", p), err) }
  if err := p.StartSortkey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartSortkey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:start_sortkey: ", p), err) }
  return err
}

func (p *MultiGetRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stop_sortkey", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:stop_sortkey: ", p), err) }
  if err := p.StopSortkey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StopSortkey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:stop_sortkey: ", p), err) }
  return err
}

func (p *MultiGetRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start_inclusive", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:start_inclusive: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.StartInclusive)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_inclusive (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:start_inclusive: ", p), err) }
  return err
}

func (p *MultiGetRequest) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stop_inclusive", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:stop_inclusive: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.StopInclusive)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop_inclusive (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:stop_inclusive: ", p), err) }
  return err
}

func (p *MultiGetRequest) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sort_key_filter_type", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:sort_key_filter_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SortKeyFilterType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sort_key_filter_type (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:sort_key_filter_type: ", p), err) }
  return err
}

func (p *MultiGetRequest) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sort_key_filter_pattern", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:sort_key_filter_pattern: ", p), err) }
  if err := p.SortKeyFilterPattern.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SortKeyFilterPattern), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:sort_key_filter_pattern: ", p), err) }
  return err
}

func (p *MultiGetRequest) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reverse", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:reverse: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Reverse)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reverse (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:reverse: ", p), err) }
  return err
}

func (p *MultiGetRequest) Equals(other *MultiGetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.HashKey.Equals(other.HashKey) { return false }
  if len(p.SortKeys) != len(other.SortKeys) { return false }
  for i, _tgt := range p.SortKeys {
    _src5 := other.SortKeys[i]
    if !_tgt.Equals(_src5) { return false }
  }
  if p.MaxKvCount != other.MaxKvCount { return false }
  if p.MaxKvSize != other.MaxKvSize { return false }
  if p.NoValue != other.NoValue { return false }
  if !p.StartSortkey.Equals(other.StartSortkey) { return false }
  if !p.StopSortkey.Equals(other.StopSortkey) { return false }
  if p.StartInclusive != other.StartInclusive { return false }
  if p.StopInclusive != other.StopInclusive { return false }
  if p.SortKeyFilterType != other.SortKeyFilterType { return false }
  if !p.SortKeyFilterPattern.Equals(other.SortKeyFilterPattern) { return false }
  if p.Reverse != other.Reverse { return false }
  return true
}

func (p *MultiGetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiGetRequest(%+v)", *p)
}

func (p *MultiGetRequest) Validate() error {
  return nil
}
// Attributes:
//  - Error
//  - Kvs
//  - AppID
//  - PartitionIndex
//  - Server
type MultiGetResponse struct {
  Error int32 `thrift:"error,1" db:"error" json:"error"`
  Kvs []*KeyValue `thrift:"kvs,2" db:"kvs" json:"kvs"`
  AppID int32 `thrift:"app_id,3" db:"app_id" json:"app_id"`
  PartitionIndex int32 `thrift:"partition_index,4" db:"partition_index" json:"partition_index"`
  // unused field # 5
  Server string `thrift:"server,6" db:"server" json:"server"`
}

func NewMultiGetResponse() *MultiGetResponse {
  return &MultiGetResponse{}
}


func (p *MultiGetResponse) GetError() int32 {
  return p.Error
}

func (p *MultiGetResponse) GetKvs() []*KeyValue {
  return p.Kvs
}

func (p *MultiGetResponse) GetAppID() int32 {
  return p.AppID
}

func (p *MultiGetResponse) GetPartitionIndex() int32 {
  return p.PartitionIndex
}

func (p *MultiGetResponse) GetServer() string {
  return p.Server
}
func (p *MultiGetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MultiGetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *MultiGetResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*KeyValue, 0, size)
  p.Kvs =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &KeyValue{}
    if err := _elem6.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Kvs = append(p.Kvs, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *MultiGetResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PartitionIndex = v
}
  return nil
}

func (p *MultiGetResponse)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Server = v
}
  return nil
}

func (p *MultiGetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multi_get_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiGetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *MultiGetResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kvs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:kvs: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Kvs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Kvs {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:kvs: ", p), err) }
  return err
}

func (p *MultiGetResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_id: ", p), err) }
  return err
}

func (p *MultiGetResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_index", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partition_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_index (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partition_index: ", p), err) }
  return err
}

func (p *MultiGetResponse) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Server)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err) }
  return err
}

func (p *MultiGetResponse) Equals(other *MultiGetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if len(p.Kvs) != len(other.Kvs) { return false }
  for i, _tgt := range p.Kvs {
    _src7 := other.Kvs[i]
    if !_tgt.Equals(_src7) { return false }
  }
  if p.AppID != other.AppID { return false }
  if p.PartitionIndex != other.PartitionIndex { return false }
  if p.Server != other.Server { return false }
  return true
}

func (p *MultiGetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiGetResponse(%+v)", *p)
}

func (p *MultiGetResponse) Validate() error {
  return nil
}
// Attributes:
//  - HashKey
//  - SortKey
type FullKey struct {
  HashKey *base.Blob `thrift:"hash_key,1" db:"hash_key" json:"hash_key"`
  SortKey *base.Blob `thrift:"sort_key,2" db:"sort_key" json:"sort_key"`
}

func NewFullKey() *FullKey {
  return &FullKey{}
}

var FullKey_HashKey_DEFAULT *base.Blob
func (p *FullKey) GetHashKey() *base.Blob {
  if !p.IsSetHashKey() {
    return FullKey_HashKey_DEFAULT
  }
return p.HashKey
}
var FullKey_SortKey_DEFAULT *base.Blob
func (p *FullKey) GetSortKey() *base.Blob {
  if !p.IsSetSortKey() {
    return FullKey_SortKey_DEFAULT
  }
return p.SortKey
}
func (p *FullKey) IsSetHashKey() bool {
  return p.HashKey != nil
}

func (p *FullKey) IsSetSortKey() bool {
  return p.SortKey != nil
}

func (p *FullKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FullKey)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.HashKey = &base.Blob{}
  if err := p.HashKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HashKey), err)
  }
  return nil
}

func (p *FullKey)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SortKey = &base.Blob{}
  if err := p.SortKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SortKey), err)
  }
  return nil
}

func (p *FullKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "full_key"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FullKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hash_key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash_key: ", p), err) }
  if err := p.HashKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HashKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash_key: ", p), err) }
  return err
}

func (p *FullKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sort_key", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sort_key: ", p), err) }
  if err := p.SortKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SortKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sort_key: ", p), err) }
  return err
}

func (p *FullKey) Equals(other *FullKey) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.HashKey.Equals(other.HashKey) { return false }
  if !p.SortKey.Equals(other.SortKey) { return false }
  return true
}

func (p *FullKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FullKey(%+v)", *p)
}

func (p *FullKey) Validate() error {
  return nil
}
// Attributes:
//  - Keys
type BatchGetRequest struct {
  Keys []*FullKey `thrift:"keys,1" db:"keys" json:"keys"`
}

func NewBatchGetRequest() *BatchGetRequest {
  return &BatchGetRequest{}
}


func (p *BatchGetRequest) GetKeys() []*FullKey {
  return p.Keys
}
func (p *BatchGetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BatchGetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FullKey, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &FullKey{}
    if err := _elem8.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.Keys = append(p.Keys, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BatchGetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "batch_get_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BatchGetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err) }
  return err
}

func (p *BatchGetRequest) Equals(other *BatchGetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src9 := other.Keys[i]
    if !_tgt.Equals(_src9) { return false }
  }
  return true
}

func (p *BatchGetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BatchGetRequest(%+v)", *p)
}

func (p *BatchGetRequest) Validate() error {
  return nil
}
// Attributes:
//  - HashKey
//  - SortKey
//  - Value
type FullData struct {
  HashKey *base.Blob `thrift:"hash_key,1" db:"hash_key" json:"hash_key"`
  SortKey *base.Blob `thrift:"sort_key,2" db:"sort_key" json:"sort_key"`
  Value *base.Blob `thrift:"value,3" db:"value" json:"value"`
}

func NewFullData() *FullData {
  return &FullData{}
}

var FullData_HashKey_DEFAULT *base.Blob
func (p *FullData) GetHashKey() *base.Blob {
  if !p.IsSetHashKey() {
    return FullData_HashKey_DEFAULT
  }
return p.HashKey
}
var FullData_SortKey_DEFAULT *base.Blob
func (p *FullData) GetSortKey() *base.Blob {
  if !p.IsSetSortKey() {
    return FullData_SortKey_DEFAULT
  }
return p.SortKey
}
var FullData_Value_DEFAULT *base.Blob
func (p *FullData) GetValue() *base.Blob {
  if !p.IsSetValue() {
    return FullData_Value_DEFAULT
  }
return p.Value
}
func (p *FullData) IsSetHashKey() bool {
  return p.HashKey != nil
}

func (p *FullData) IsSetSortKey() bool {
  return p.SortKey != nil
}

func (p *FullData) IsSetValue() bool {
  return p.Value != nil
}

func (p *FullData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FullData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.HashKey = &base.Blob{}
  if err := p.HashKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HashKey), err)
  }
  return nil
}

func (p *FullData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SortKey = &base.Blob{}
  if err := p.SortKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SortKey), err)
  }
  return nil
}

func (p *FullData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Value = &base.Blob{}
  if err := p.Value.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
  }
  return nil
}

func (p *FullData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "full_data"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FullData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hash_key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash_key: ", p), err) }
  if err := p.HashKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HashKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash_key: ", p), err) }
  return err
}

func (p *FullData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sort_key", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sort_key: ", p), err) }
  if err := p.SortKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SortKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sort_key: ", p), err) }
  return err
}

func (p *FullData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := p.Value.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *FullData) Equals(other *FullData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.HashKey.Equals(other.HashKey) { return false }
  if !p.SortKey.Equals(other.SortKey) { return false }
  if !p.Value.Equals(other.Value) { return false }
  return true
}

func (p *FullData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FullData(%+v)", *p)
}

func (p *FullData) Validate() error {
  return nil
}
// Attributes:
//  - Error
//  - Data
//  - AppID
//  - PartitionIndex
//  - Server
type BatchGetResponse struct {
  Error int32 `thrift:"error,1" db:"error" json:"error"`
  Data []*FullData `thrift:"data,2" db:"data" json:"data"`
  AppID int32 `thrift:"app_id,3" db:"app_id" json:"app_id"`
  PartitionIndex int32 `thrift:"partition_index,4" db:"partition_index" json:"partition_index"`
  // unused field # 5
  Server string `thrift:"server,6" db:"server" json:"server"`
}

func NewBatchGetResponse() *BatchGetResponse {
  return &BatchGetResponse{}
}


func (p *BatchGetResponse) GetError() int32 {
  return p.Error
}

func (p *BatchGetResponse) GetData() []*FullData {
  return p.Data
}

func (p *BatchGetResponse) GetAppID() int32 {
  return p.AppID
}

func (p *BatchGetResponse) GetPartitionIndex() int32 {
  return p.PartitionIndex
}

func (p *BatchGetResponse) GetServer() string {
  return p.Server
}
func (p *BatchGetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BatchGetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *BatchGetResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FullData, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &FullData{}
    if err := _elem10.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.Data = append(p.Data, _elem10)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BatchGetResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *BatchGetResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PartitionIndex = v
}
  return nil
}

func (p *BatchGetResponse)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Server = v
}
  return nil
}

func (p *BatchGetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "batch_get_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BatchGetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *BatchGetResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *BatchGetResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_id: ", p), err) }
  return err
}

func (p *BatchGetResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_index", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partition_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_index (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partition_index: ", p), err) }
  return err
}

func (p *BatchGetResponse) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Server)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err) }
  return err
}

func (p *BatchGetResponse) Equals(other *BatchGetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if len(p.Data) != len(other.Data) { return false }
  for i, _tgt := range p.Data {
    _src11 := other.Data[i]
    if !_tgt.Equals(_src11) { return false }
  }
  if p.AppID != other.AppID { return false }
  if p.PartitionIndex != other.PartitionIndex { return false }
  if p.Server != other.Server { return false }
  return true
}

func (p *BatchGetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BatchGetResponse(%+v)", *p)
}

func (p *BatchGetResponse) Validate() error {
  return nil
}
// Attributes:
//  - Key
//  - Increment
//  - ExpireTsSeconds
type IncrRequest struct {
  Key *base.Blob `thrift:"key,1" db:"key" json:"key"`
  Increment int64 `thrift:"increment,2" db:"increment" json:"increment"`
  ExpireTsSeconds int32 `thrift:"expire_ts_seconds,3" db:"expire_ts_seconds" json:"expire_ts_seconds"`
}

func NewIncrRequest() *IncrRequest {
  return &IncrRequest{}
}

var IncrRequest_Key_DEFAULT *base.Blob
func (p *IncrRequest) GetKey() *base.Blob {
  if !p.IsSetKey() {
    return IncrRequest_Key_DEFAULT
  }
return p.Key
}

func (p *IncrRequest) GetIncrement() int64 {
  return p.Increment
}

func (p *IncrRequest) GetExpireTsSeconds() int32 {
  return p.ExpireTsSeconds
}
func (p *IncrRequest) IsSetKey() bool {
  return p.Key != nil
}

func (p *IncrRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IncrRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Key = &base.Blob{}
  if err := p.Key.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
  }
  return nil
}

func (p *IncrRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Increment = v
}
  return nil
}

func (p *IncrRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExpireTsSeconds = v
}
  return nil
}

func (p *IncrRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "incr_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IncrRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := p.Key.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *IncrRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "increment", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:increment: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Increment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.increment (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:increment: ", p), err) }
  return err
}

func (p *IncrRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expire_ts_seconds", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expire_ts_seconds: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ExpireTsSeconds)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expire_ts_seconds (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expire_ts_seconds: ", p), err) }
  return err
}

func (p *IncrRequest) Equals(other *IncrRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Key.Equals(other.Key) { return false }
  if p.Increment != other.Increment { return false }
  if p.ExpireTsSeconds != other.ExpireTsSeconds { return false }
  return true
}

func (p *IncrRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IncrRequest(%+v)", *p)
}

func (p *IncrRequest) Validate() error {
  return nil
}
// Attributes:
//  - Error
//  - NewValue_
//  - AppID
//  - PartitionIndex
//  - Decree
//  - Server
type IncrResponse struct {
  Error int32 `thrift:"error,1" db:"error" json:"error"`
  NewValue_ int64 `thrift:"new_value,2" db:"new_value" json:"new_value"`
  AppID int32 `thrift:"app_id,3" db:"app_id" json:"app_id"`
  PartitionIndex int32 `thrift:"partition_index,4" db:"partition_index" json:"partition_index"`
  Decree int64 `thrift:"decree,5" db:"decree" json:"decree"`
  Server string `thrift:"server,6" db:"server" json:"server"`
}

func NewIncrResponse() *IncrResponse {
  return &IncrResponse{}
}


func (p *IncrResponse) GetError() int32 {
  return p.Error
}

func (p *IncrResponse) GetNewValue_() int64 {
  return p.NewValue_
}

func (p *IncrResponse) GetAppID() int32 {
  return p.AppID
}

func (p *IncrResponse) GetPartitionIndex() int32 {
  return p.PartitionIndex
}

func (p *IncrResponse) GetDecree() int64 {
  return p.Decree
}

func (p *IncrResponse) GetServer() string {
  return p.Server
}
func (p *IncrResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IncrResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *IncrResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewValue_ = v
}
  return nil
}

func (p *IncrResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *IncrResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PartitionIndex = v
}
  return nil
}

func (p *IncrResponse)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Decree = v
}
  return nil
}

func (p *IncrResponse)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Server = v
}
  return nil
}

func (p *IncrResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "incr_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IncrResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *IncrResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_value", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_value: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NewValue_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_value: ", p), err) }
  return err
}

func (p *IncrResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_id: ", p), err) }
  return err
}

func (p *IncrResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_index", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partition_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_index (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partition_index: ", p), err) }
  return err
}

func (p *IncrResponse) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "decree", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:decree: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Decree)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.decree (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:decree: ", p), err) }
  return err
}

func (p *IncrResponse) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Server)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err) }
  return err
}

func (p *IncrResponse) Equals(other *IncrResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if p.NewValue_ != other.NewValue_ { return false }
  if p.AppID != other.AppID { return false }
  if p.PartitionIndex != other.PartitionIndex { return false }
  if p.Decree != other.Decree { return false }
  if p.Server != other.Server { return false }
  return true
}

func (p *IncrResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IncrResponse(%+v)", *p)
}

func (p *IncrResponse) Validate() error {
  return nil
}
// Attributes:
//  - HashKey
//  - CheckSortKey
//  - CheckType
//  - CheckOperand
//  - SetDiffSortKey
//  - SetSortKey
//  - SetValue
//  - SetExpireTsSeconds
//  - ReturnCheckValue
type CheckAndSetRequest struct {
  HashKey *base.Blob `thrift:"hash_key,1" db:"hash_key" json:"hash_key"`
  CheckSortKey *base.Blob `thrift:"check_sort_key,2" db:"check_sort_key" json:"check_sort_key"`
  CheckType CasCheckType `thrift:"check_type,3" db:"check_type" json:"check_type"`
  CheckOperand *base.Blob `thrift:"check_operand,4" db:"check_operand" json:"check_operand"`
  SetDiffSortKey bool `thrift:"set_diff_sort_key,5" db:"set_diff_sort_key" json:"set_diff_sort_key"`
  SetSortKey *base.Blob `thrift:"set_sort_key,6" db:"set_sort_key" json:"set_sort_key"`
  SetValue *base.Blob `thrift:"set_value,7" db:"set_value" json:"set_value"`
  SetExpireTsSeconds int32 `thrift:"set_expire_ts_seconds,8" db:"set_expire_ts_seconds" json:"set_expire_ts_seconds"`
  ReturnCheckValue bool `thrift:"return_check_value,9" db:"return_check_value" json:"return_check_value"`
}

func NewCheckAndSetRequest() *CheckAndSetRequest {
  return &CheckAndSetRequest{}
}

var CheckAndSetRequest_HashKey_DEFAULT *base.Blob
func (p *CheckAndSetRequest) GetHashKey() *base.Blob {
  if !p.IsSetHashKey() {
    return CheckAndSetRequest_HashKey_DEFAULT
  }
return p.HashKey
}
var CheckAndSetRequest_CheckSortKey_DEFAULT *base.Blob
func (p *CheckAndSetRequest) GetCheckSortKey() *base.Blob {
  if !p.IsSetCheckSortKey() {
    return CheckAndSetRequest_CheckSortKey_DEFAULT
  }
return p.CheckSortKey
}

func (p *CheckAndSetRequest) GetCheckType() CasCheckType {
  return p.CheckType
}
var CheckAndSetRequest_CheckOperand_DEFAULT *base.Blob
func (p *CheckAndSetRequest) GetCheckOperand() *base.Blob {
  if !p.IsSetCheckOperand() {
    return CheckAndSetRequest_CheckOperand_DEFAULT
  }
return p.CheckOperand
}

func (p *CheckAndSetRequest) GetSetDiffSortKey() bool {
  return p.SetDiffSortKey
}
var CheckAndSetRequest_SetSortKey_DEFAULT *base.Blob
func (p *CheckAndSetRequest) GetSetSortKey() *base.Blob {
  if !p.IsSetSetSortKey() {
    return CheckAndSetRequest_SetSortKey_DEFAULT
  }
return p.SetSortKey
}
var CheckAndSetRequest_SetValue_DEFAULT *base.Blob
func (p *CheckAndSetRequest) GetSetValue() *base.Blob {
  if !p.IsSetSetValue() {
    return CheckAndSetRequest_SetValue_DEFAULT
  }
return p.SetValue
}

func (p *CheckAndSetRequest) GetSetExpireTsSeconds() int32 {
  return p.SetExpireTsSeconds
}

func (p *CheckAndSetRequest) GetReturnCheckValue() bool {
  return p.ReturnCheckValue
}
func (p *CheckAndSetRequest) IsSetHashKey() bool {
  return p.HashKey != nil
}

func (p *CheckAndSetRequest) IsSetCheckSortKey() bool {
  return p.CheckSortKey != nil
}

func (p *CheckAndSetRequest) IsSetCheckOperand() bool {
  return p.CheckOperand != nil
}

func (p *CheckAndSetRequest) IsSetSetSortKey() bool {
  return p.SetSortKey != nil
}

func (p *CheckAndSetRequest) IsSetSetValue() bool {
  return p.SetValue != nil
}

func (p *CheckAndSetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CheckAndSetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.HashKey = &base.Blob{}
  if err := p.HashKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HashKey), err)
  }
  return nil
}

func (p *CheckAndSetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.CheckSortKey = &base.Blob{}
  if err := p.CheckSortKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CheckSortKey), err)
  }
  return nil
}

func (p *CheckAndSetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := CasCheckType(v)
  p.CheckType = temp
}
  return nil
}

func (p *CheckAndSetRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.CheckOperand = &base.Blob{}
  if err := p.CheckOperand.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CheckOperand), err)
  }
  return nil
}

func (p *CheckAndSetRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SetDiffSortKey = v
}
  return nil
}

func (p *CheckAndSetRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.SetSortKey = &base.Blob{}
  if err := p.SetSortKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetSortKey), err)
  }
  return nil
}

func (p *CheckAndSetRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.SetValue = &base.Blob{}
  if err := p.SetValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetValue), err)
  }
  return nil
}

func (p *CheckAndSetRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.SetExpireTsSeconds = v
}
  return nil
}

func (p *CheckAndSetRequest)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ReturnCheckValue = v
}
  return nil
}

func (p *CheckAndSetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "check_and_set_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckAndSetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hash_key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash_key: ", p), err) }
  if err := p.HashKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HashKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash_key: ", p), err) }
  return err
}

func (p *CheckAndSetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "check_sort_key", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:check_sort_key: ", p), err) }
  if err := p.CheckSortKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CheckSortKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:check_sort_key: ", p), err) }
  return err
}

func (p *CheckAndSetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "check_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:check_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CheckType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.check_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:check_type: ", p), err) }
  return err
}

func (p *CheckAndSetRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "check_operand", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:check_operand: ", p), err) }
  if err := p.CheckOperand.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CheckOperand), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:check_operand: ", p), err) }
  return err
}

func (p *CheckAndSetRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "set_diff_sort_key", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:set_diff_sort_key: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SetDiffSortKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.set_diff_sort_key (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:set_diff_sort_key: ", p), err) }
  return err
}

func (p *CheckAndSetRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "set_sort_key", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:set_sort_key: ", p), err) }
  if err := p.SetSortKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetSortKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:set_sort_key: ", p), err) }
  return err
}

func (p *CheckAndSetRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "set_value", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:set_value: ", p), err) }
  if err := p.SetValue.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetValue), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:set_value: ", p), err) }
  return err
}

func (p *CheckAndSetRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "set_expire_ts_seconds", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:set_expire_ts_seconds: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SetExpireTsSeconds)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.set_expire_ts_seconds (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:set_expire_ts_seconds: ", p), err) }
  return err
}

func (p *CheckAndSetRequest) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "return_check_value", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:return_check_value: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ReturnCheckValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.return_check_value (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:return_check_value: ", p), err) }
  return err
}

func (p *CheckAndSetRequest) Equals(other *CheckAndSetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.HashKey.Equals(other.HashKey) { return false }
  if !p.CheckSortKey.Equals(other.CheckSortKey) { return false }
  if p.CheckType != other.CheckType { return false }
  if !p.CheckOperand.Equals(other.CheckOperand) { return false }
  if p.SetDiffSortKey != other.SetDiffSortKey { return false }
  if !p.SetSortKey.Equals(other.SetSortKey) { return false }
  if !p.SetValue.Equals(other.SetValue) { return false }
  if p.SetExpireTsSeconds != other.SetExpireTsSeconds { return false }
  if p.ReturnCheckValue != other.ReturnCheckValue { return false }
  return true
}

func (p *CheckAndSetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckAndSetRequest(%+v)", *p)
}

func (p *CheckAndSetRequest) Validate() error {
  return nil
}
// Attributes:
//  - Error
//  - CheckValueReturned
//  - CheckValueExist
//  - CheckValue
//  - AppID
//  - PartitionIndex
//  - Decree
//  - Server
type CheckAndSetResponse struct {
  Error int32 `thrift:"error,1" db:"error" json:"error"`
  CheckValueReturned bool `thrift:"check_value_returned,2" db:"check_value_returned" json:"check_value_returned"`
  CheckValueExist bool `thrift:"check_value_exist,3" db:"check_value_exist" json:"check_value_exist"`
  CheckValue *base.Blob `thrift:"check_value,4" db:"check_value" json:"check_value"`
  AppID int32 `thrift:"app_id,5" db:"app_id" json:"app_id"`
  PartitionIndex int32 `thrift:"partition_index,6" db:"partition_index" json:"partition_index"`
  Decree int64 `thrift:"decree,7" db:"decree" json:"decree"`
  Server string `thrift:"server,8" db:"server" json:"server"`
}

func NewCheckAndSetResponse() *CheckAndSetResponse {
  return &CheckAndSetResponse{}
}


func (p *CheckAndSetResponse) GetError() int32 {
  return p.Error
}

func (p *CheckAndSetResponse) GetCheckValueReturned() bool {
  return p.CheckValueReturned
}

func (p *CheckAndSetResponse) GetCheckValueExist() bool {
  return p.CheckValueExist
}
var CheckAndSetResponse_CheckValue_DEFAULT *base.Blob
func (p *CheckAndSetResponse) GetCheckValue() *base.Blob {
  if !p.IsSetCheckValue() {
    return CheckAndSetResponse_CheckValue_DEFAULT
  }
return p.CheckValue
}

func (p *CheckAndSetResponse) GetAppID() int32 {
  return p.AppID
}

func (p *CheckAndSetResponse) GetPartitionIndex() int32 {
  return p.PartitionIndex
}

func (p *CheckAndSetResponse) GetDecree() int64 {
  return p.Decree
}

func (p *CheckAndSetResponse) GetServer() string {
  return p.Server
}
func (p *CheckAndSetResponse) IsSetCheckValue() bool {
  return p.CheckValue != nil
}

func (p *CheckAndSetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CheckAndSetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *CheckAndSetResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CheckValueReturned = v
}
  return nil
}

func (p *CheckAndSetResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CheckValueExist = v
}
  return nil
}

func (p *CheckAndSetResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.CheckValue = &base.Blob{}
  if err := p.CheckValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CheckValue), err)
  }
  return nil
}

func (p *CheckAndSetResponse)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *CheckAndSetResponse)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PartitionIndex = v
}
  return nil
}

func (p *CheckAndSetResponse)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Decree = v
}
  return nil
}

func (p *CheckAndSetResponse)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Server = v
}
  return nil
}

func (p *CheckAndSetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "check_and_set_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckAndSetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *CheckAndSetResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "check_value_returned", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:check_value_returned: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CheckValueReturned)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.check_value_returned (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:check_value_returned: ", p), err) }
  return err
}

func (p *CheckAndSetResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "check_value_exist", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:check_value_exist: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CheckValueExist)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.check_value_exist (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:check_value_exist: ", p), err) }
  return err
}

func (p *CheckAndSetResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "check_value", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:check_value: ", p), err) }
  if err := p.CheckValue.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CheckValue), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:check_value: ", p), err) }
  return err
}

func (p *CheckAndSetResponse) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:app_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:app_id: ", p), err) }
  return err
}

func (p *CheckAndSetResponse) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_index", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:partition_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_index (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:partition_index: ", p), err) }
  return err
}

func (p *CheckAndSetResponse) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "decree", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:decree: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Decree)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.decree (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:decree: ", p), err) }
  return err
}

func (p *CheckAndSetResponse) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:server: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Server)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:server: ", p), err) }
  return err
}

func (p *CheckAndSetResponse) Equals(other *CheckAndSetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if p.CheckValueReturned != other.CheckValueReturned { return false }
  if p.CheckValueExist != other.CheckValueExist { return false }
  if !p.CheckValue.Equals(other.CheckValue) { return false }
  if p.AppID != other.AppID { return false }
  if p.PartitionIndex != other.PartitionIndex { return false }
  if p.Decree != other.Decree { return false }
  if p.Server != other.Server { return false }
  return true
}

func (p *CheckAndSetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckAndSetResponse(%+v)", *p)
}

func (p *CheckAndSetResponse) Validate() error {
  return nil
}
// Attributes:
//  - Operation
//  - SortKey
//  - Value
//  - SetExpireTsSeconds
type Mutate struct {
  Operation MutateOperation `thrift:"operation,1" db:"operation" json:"operation"`
  SortKey *base.Blob `thrift:"sort_key,2" db:"sort_key" json:"sort_key"`
  Value *base.Blob `thrift:"value,3" db:"value" json:"value"`
  SetExpireTsSeconds int32 `thrift:"set_expire_ts_seconds,4" db:"set_expire_ts_seconds" json:"set_expire_ts_seconds"`
}

func NewMutate() *Mutate {
  return &Mutate{}
}


func (p *Mutate) GetOperation() MutateOperation {
  return p.Operation
}
var Mutate_SortKey_DEFAULT *base.Blob
func (p *Mutate) GetSortKey() *base.Blob {
  if !p.IsSetSortKey() {
    return Mutate_SortKey_DEFAULT
  }
return p.SortKey
}
var Mutate_Value_DEFAULT *base.Blob
func (p *Mutate) GetValue() *base.Blob {
  if !p.IsSetValue() {
    return Mutate_Value_DEFAULT
  }
return p.Value
}

func (p *Mutate) GetSetExpireTsSeconds() int32 {
  return p.SetExpireTsSeconds
}
func (p *Mutate) IsSetSortKey() bool {
  return p.SortKey != nil
}

func (p *Mutate) IsSetValue() bool {
  return p.Value != nil
}

func (p *Mutate) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Mutate)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MutateOperation(v)
  p.Operation = temp
}
  return nil
}

func (p *Mutate)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SortKey = &base.Blob{}
  if err := p.SortKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SortKey), err)
  }
  return nil
}

func (p *Mutate)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Value = &base.Blob{}
  if err := p.Value.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
  }
  return nil
}

func (p *Mutate)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SetExpireTsSeconds = v
}
  return nil
}

func (p *Mutate) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mutate"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Mutate) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "operation", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:operation: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Operation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.operation (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:operation: ", p), err) }
  return err
}

func (p *Mutate) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sort_key", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sort_key: ", p), err) }
  if err := p.SortKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SortKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sort_key: ", p), err) }
  return err
}

func (p *Mutate) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := p.Value.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *Mutate) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "set_expire_ts_seconds", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:set_expire_ts_seconds: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SetExpireTsSeconds)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.set_expire_ts_seconds (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:set_expire_ts_seconds: ", p), err) }
  return err
}

func (p *Mutate) Equals(other *Mutate) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Operation != other.Operation { return false }
  if !p.SortKey.Equals(other.SortKey) { return false }
  if !p.Value.Equals(other.Value) { return false }
  if p.SetExpireTsSeconds != other.SetExpireTsSeconds { return false }
  return true
}

func (p *Mutate) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Mutate(%+v)", *p)
}

func (p *Mutate) Validate() error {
  return nil
}
// Attributes:
//  - HashKey
//  - CheckSortKey
//  - CheckType
//  - CheckOperand
//  - MutateList
//  - ReturnCheckValue
type CheckAndMutateRequest struct {
  HashKey *base.Blob `thrift:"hash_key,1" db:"hash_key" json:"hash_key"`
  CheckSortKey *base.Blob `thrift:"check_sort_key,2" db:"check_sort_key" json:"check_sort_key"`
  CheckType CasCheckType `thrift:"check_type,3" db:"check_type" json:"check_type"`
  CheckOperand *base.Blob `thrift:"check_operand,4" db:"check_operand" json:"check_operand"`
  MutateList []*Mutate `thrift:"mutate_list,5" db:"mutate_list" json:"mutate_list"`
  ReturnCheckValue bool `thrift:"return_check_value,6" db:"return_check_value" json:"return_check_value"`
}

func NewCheckAndMutateRequest() *CheckAndMutateRequest {
  return &CheckAndMutateRequest{}
}

var CheckAndMutateRequest_HashKey_DEFAULT *base.Blob
func (p *CheckAndMutateRequest) GetHashKey() *base.Blob {
  if !p.IsSetHashKey() {
    return CheckAndMutateRequest_HashKey_DEFAULT
  }
return p.HashKey
}
var CheckAndMutateRequest_CheckSortKey_DEFAULT *base.Blob
func (p *CheckAndMutateRequest) GetCheckSortKey() *base.Blob {
  if !p.IsSetCheckSortKey() {
    return CheckAndMutateRequest_CheckSortKey_DEFAULT
  }
return p.CheckSortKey
}

func (p *CheckAndMutateRequest) GetCheckType() CasCheckType {
  return p.CheckType
}
var CheckAndMutateRequest_CheckOperand_DEFAULT *base.Blob
func (p *CheckAndMutateRequest) GetCheckOperand() *base.Blob {
  if !p.IsSetCheckOperand() {
    return CheckAndMutateRequest_CheckOperand_DEFAULT
  }
return p.CheckOperand
}

func (p *CheckAndMutateRequest) GetMutateList() []*Mutate {
  return p.MutateList
}

func (p *CheckAndMutateRequest) GetReturnCheckValue() bool {
  return p.ReturnCheckValue
}
func (p *CheckAndMutateRequest) IsSetHashKey() bool {
  return p.HashKey != nil
}

func (p *CheckAndMutateRequest) IsSetCheckSortKey() bool {
  return p.CheckSortKey != nil
}

func (p *CheckAndMutateRequest) IsSetCheckOperand() bool {
  return p.CheckOperand != nil
}

func (p *CheckAndMutateRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CheckAndMutateRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.HashKey = &base.Blob{}
  if err := p.HashKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HashKey), err)
  }
  return nil
}

func (p *CheckAndMutateRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.CheckSortKey = &base.Blob{}
  if err := p.CheckSortKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CheckSortKey), err)
  }
  return nil
}

func (p *CheckAndMutateRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := CasCheckType(v)
  p.CheckType = temp
}
  return nil
}

func (p *CheckAndMutateRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.CheckOperand = &base.Blob{}
  if err := p.CheckOperand.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CheckOperand), err)
  }
  return nil
}

func (p *CheckAndMutateRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Mutate, 0, size)
  p.MutateList =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &Mutate{}
    if err := _elem12.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.MutateList = append(p.MutateList, _elem12)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CheckAndMutateRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ReturnCheckValue = v
}
  return nil
}

func (p *CheckAndMutateRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "check_and_mutate_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckAndMutateRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hash_key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash_key: ", p), err) }
  if err := p.HashKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HashKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash_key: ", p), err) }
  return err
}

func (p *CheckAndMutateRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "check_sort_key", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:check_sort_key: ", p), err) }
  if err := p.CheckSortKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CheckSortKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:check_sort_key: ", p), err) }
  return err
}

func (p *CheckAndMutateRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "check_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:check_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CheckType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.check_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:check_type: ", p), err) }
  return err
}

func (p *CheckAndMutateRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "check_operand", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:check_operand: ", p), err) }
  if err := p.CheckOperand.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CheckOperand), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:check_operand: ", p), err) }
  return err
}

func (p *CheckAndMutateRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mutate_list", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:mutate_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.MutateList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MutateList {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:mutate_list: ", p), err) }
  return err
}

func (p *CheckAndMutateRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "return_check_value", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:return_check_value: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ReturnCheckValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.return_check_value (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:return_check_value: ", p), err) }
  return err
}

func (p *CheckAndMutateRequest) Equals(other *CheckAndMutateRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.HashKey.Equals(other.HashKey) { return false }
  if !p.CheckSortKey.Equals(other.CheckSortKey) { return false }
  if p.CheckType != other.CheckType { return false }
  if !p.CheckOperand.Equals(other.CheckOperand) { return false }
  if len(p.MutateList) != len(other.MutateList) { return false }
  for i, _tgt := range p.MutateList {
    _src13 := other.MutateList[i]
    if !_tgt.Equals(_src13) { return false }
  }
  if p.ReturnCheckValue != other.ReturnCheckValue { return false }
  return true
}

func (p *CheckAndMutateRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckAndMutateRequest(%+v)", *p)
}

func (p *CheckAndMutateRequest) Validate() error {
  return nil
}
// Attributes:
//  - Error
//  - CheckValueReturned
//  - CheckValueExist
//  - CheckValue
//  - AppID
//  - PartitionIndex
//  - Decree
//  - Server
type CheckAndMutateResponse struct {
  Error int32 `thrift:"error,1" db:"error" json:"error"`
  CheckValueReturned bool `thrift:"check_value_returned,2" db:"check_value_returned" json:"check_value_returned"`
  CheckValueExist bool `thrift:"check_value_exist,3" db:"check_value_exist" json:"check_value_exist"`
  CheckValue *base.Blob `thrift:"check_value,4" db:"check_value" json:"check_value"`
  AppID int32 `thrift:"app_id,5" db:"app_id" json:"app_id"`
  PartitionIndex int32 `thrift:"partition_index,6" db:"partition_index" json:"partition_index"`
  Decree int64 `thrift:"decree,7" db:"decree" json:"decree"`
  Server string `thrift:"server,8" db:"server" json:"server"`
}

func NewCheckAndMutateResponse() *CheckAndMutateResponse {
  return &CheckAndMutateResponse{}
}


func (p *CheckAndMutateResponse) GetError() int32 {
  return p.Error
}

func (p *CheckAndMutateResponse) GetCheckValueReturned() bool {
  return p.CheckValueReturned
}

func (p *CheckAndMutateResponse) GetCheckValueExist() bool {
  return p.CheckValueExist
}
var CheckAndMutateResponse_CheckValue_DEFAULT *base.Blob
func (p *CheckAndMutateResponse) GetCheckValue() *base.Blob {
  if !p.IsSetCheckValue() {
    return CheckAndMutateResponse_CheckValue_DEFAULT
  }
return p.CheckValue
}

func (p *CheckAndMutateResponse) GetAppID() int32 {
  return p.AppID
}

func (p *CheckAndMutateResponse) GetPartitionIndex() int32 {
  return p.PartitionIndex
}

func (p *CheckAndMutateResponse) GetDecree() int64 {
  return p.Decree
}

func (p *CheckAndMutateResponse) GetServer() string {
  return p.Server
}
func (p *CheckAndMutateResponse) IsSetCheckValue() bool {
  return p.CheckValue != nil
}

func (p *CheckAndMutateResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CheckAndMutateResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *CheckAndMutateResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CheckValueReturned = v
}
  return nil
}

func (p *CheckAndMutateResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CheckValueExist = v
}
  return nil
}

func (p *CheckAndMutateResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.CheckValue = &base.Blob{}
  if err := p.CheckValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CheckValue), err)
  }
  return nil
}

func (p *CheckAndMutateResponse)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *CheckAndMutateResponse)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PartitionIndex = v
}
  return nil
}

func (p *CheckAndMutateResponse)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Decree = v
}
  return nil
}

func (p *CheckAndMutateResponse)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Server = v
}
  return nil
}

func (p *CheckAndMutateResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "check_and_mutate_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckAndMutateResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *CheckAndMutateResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "check_value_returned", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:check_value_returned: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CheckValueReturned)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.check_value_returned (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:check_value_returned: ", p), err) }
  return err
}

func (p *CheckAndMutateResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "check_value_exist", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:check_value_exist: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CheckValueExist)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.check_value_exist (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:check_value_exist: ", p), err) }
  return err
}

func (p *CheckAndMutateResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "check_value", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:check_value: ", p), err) }
  if err := p.CheckValue.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CheckValue), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:check_value: ", p), err) }
  return err
}

func (p *CheckAndMutateResponse) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:app_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:app_id: ", p), err) }
  return err
}

func (p *CheckAndMutateResponse) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_index", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:partition_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_index (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:partition_index: ", p), err) }
  return err
}

func (p *CheckAndMutateResponse) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "decree", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:decree: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Decree)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.decree (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:decree: ", p), err) }
  return err
}

func (p *CheckAndMutateResponse) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:server: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Server)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:server: ", p), err) }
  return err
}

func (p *CheckAndMutateResponse) Equals(other *CheckAndMutateResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if p.CheckValueReturned != other.CheckValueReturned { return false }
  if p.CheckValueExist != other.CheckValueExist { return false }
  if !p.CheckValue.Equals(other.CheckValue) { return false }
  if p.AppID != other.AppID { return false }
  if p.PartitionIndex != other.PartitionIndex { return false }
  if p.Decree != other.Decree { return false }
  if p.Server != other.Server { return false }
  return true
}

func (p *CheckAndMutateResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckAndMutateResponse(%+v)", *p)
}

func (p *CheckAndMutateResponse) Validate() error {
  return nil
}
// Attributes:
//  - StartKey
//  - StopKey
//  - StartInclusive
//  - StopInclusive
//  - BatchSize
//  - NoValue
//  - HashKeyFilterType
//  - HashKeyFilterPattern
//  - SortKeyFilterType
//  - SortKeyFilterPattern
//  - ValidatePartitionHash
//  - ReturnExpireTs
//  - FullScan
//  - OnlyReturnCount
type GetScannerRequest struct {
  StartKey *base.Blob `thrift:"start_key,1" db:"start_key" json:"start_key"`
  StopKey *base.Blob `thrift:"stop_key,2" db:"stop_key" json:"stop_key"`
  StartInclusive bool `thrift:"start_inclusive,3" db:"start_inclusive" json:"start_inclusive"`
  StopInclusive bool `thrift:"stop_inclusive,4" db:"stop_inclusive" json:"stop_inclusive"`
  BatchSize int32 `thrift:"batch_size,5" db:"batch_size" json:"batch_size"`
  NoValue bool `thrift:"no_value,6" db:"no_value" json:"no_value"`
  HashKeyFilterType FilterType `thrift:"hash_key_filter_type,7" db:"hash_key_filter_type" json:"hash_key_filter_type"`
  HashKeyFilterPattern *base.Blob `thrift:"hash_key_filter_pattern,8" db:"hash_key_filter_pattern" json:"hash_key_filter_pattern"`
  SortKeyFilterType FilterType `thrift:"sort_key_filter_type,9" db:"sort_key_filter_type" json:"sort_key_filter_type"`
  SortKeyFilterPattern *base.Blob `thrift:"sort_key_filter_pattern,10" db:"sort_key_filter_pattern" json:"sort_key_filter_pattern"`
  ValidatePartitionHash *bool `thrift:"validate_partition_hash,11" db:"validate_partition_hash" json:"validate_partition_hash,omitempty"`
  ReturnExpireTs *bool `thrift:"return_expire_ts,12" db:"return_expire_ts" json:"return_expire_ts,omitempty"`
  FullScan *bool `thrift:"full_scan,13" db:"full_scan" json:"full_scan,omitempty"`
  OnlyReturnCount bool `thrift:"only_return_count,14" db:"only_return_count" json:"only_return_count"`
}

func NewGetScannerRequest() *GetScannerRequest {
  return &GetScannerRequest{}
}

var GetScannerRequest_StartKey_DEFAULT *base.Blob
func (p *GetScannerRequest) GetStartKey() *base.Blob {
  if !p.IsSetStartKey() {
    return GetScannerRequest_StartKey_DEFAULT
  }
return p.StartKey
}
var GetScannerRequest_StopKey_DEFAULT *base.Blob
func (p *GetScannerRequest) GetStopKey() *base.Blob {
  if !p.IsSetStopKey() {
    return GetScannerRequest_StopKey_DEFAULT
  }
return p.StopKey
}

func (p *GetScannerRequest) GetStartInclusive() bool {
  return p.StartInclusive
}

func (p *GetScannerRequest) GetStopInclusive() bool {
  return p.StopInclusive
}

func (p *GetScannerRequest) GetBatchSize() int32 {
  return p.BatchSize
}

func (p *GetScannerRequest) GetNoValue() bool {
  return p.NoValue
}

func (p *GetScannerRequest) GetHashKeyFilterType() FilterType {
  return p.HashKeyFilterType
}
var GetScannerRequest_HashKeyFilterPattern_DEFAULT *base.Blob
func (p *GetScannerRequest) GetHashKeyFilterPattern() *base.Blob {
  if !p.IsSetHashKeyFilterPattern() {
    return GetScannerRequest_HashKeyFilterPattern_DEFAULT
  }
return p.HashKeyFilterPattern
}

func (p *GetScannerRequest) GetSortKeyFilterType() FilterType {
  return p.SortKeyFilterType
}
var GetScannerRequest_SortKeyFilterPattern_DEFAULT *base.Blob
func (p *GetScannerRequest) GetSortKeyFilterPattern() *base.Blob {
  if !p.IsSetSortKeyFilterPattern() {
    return GetScannerRequest_SortKeyFilterPattern_DEFAULT
  }
return p.SortKeyFilterPattern
}
var GetScannerRequest_ValidatePartitionHash_DEFAULT bool
func (p *GetScannerRequest) GetValidatePartitionHash() bool {
  if !p.IsSetValidatePartitionHash() {
    return GetScannerRequest_ValidatePartitionHash_DEFAULT
  }
return *p.ValidatePartitionHash
}
var GetScannerRequest_ReturnExpireTs_DEFAULT bool
func (p *GetScannerRequest) GetReturnExpireTs() bool {
  if !p.IsSetReturnExpireTs() {
    return GetScannerRequest_ReturnExpireTs_DEFAULT
  }
return *p.ReturnExpireTs
}
var GetScannerRequest_FullScan_DEFAULT bool
func (p *GetScannerRequest) GetFullScan() bool {
  if !p.IsSetFullScan() {
    return GetScannerRequest_FullScan_DEFAULT
  }
return *p.FullScan
}
var GetScannerRequest_OnlyReturnCount_DEFAULT bool = false

func (p *GetScannerRequest) GetOnlyReturnCount() bool {
  return p.OnlyReturnCount
}
func (p *GetScannerRequest) IsSetStartKey() bool {
  return p.StartKey != nil
}

func (p *GetScannerRequest) IsSetStopKey() bool {
  return p.StopKey != nil
}

func (p *GetScannerRequest) IsSetHashKeyFilterPattern() bool {
  return p.HashKeyFilterPattern != nil
}

func (p *GetScannerRequest) IsSetSortKeyFilterPattern() bool {
  return p.SortKeyFilterPattern != nil
}

func (p *GetScannerRequest) IsSetValidatePartitionHash() bool {
  return p.ValidatePartitionHash != nil
}

func (p *GetScannerRequest) IsSetReturnExpireTs() bool {
  return p.ReturnExpireTs != nil
}

func (p *GetScannerRequest) IsSetFullScan() bool {
  return p.FullScan != nil
}

func (p *GetScannerRequest) IsSetOnlyReturnCount() bool {
  return p.OnlyReturnCount != GetScannerRequest_OnlyReturnCount_DEFAULT
}

func (p *GetScannerRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetScannerRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.StartKey = &base.Blob{}
  if err := p.StartKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartKey), err)
  }
  return nil
}

func (p *GetScannerRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.StopKey = &base.Blob{}
  if err := p.StopKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StopKey), err)
  }
  return nil
}

func (p *GetScannerRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartInclusive = v
}
  return nil
}

func (p *GetScannerRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StopInclusive = v
}
  return nil
}

func (p *GetScannerRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BatchSize = v
}
  return nil
}

func (p *GetScannerRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NoValue = v
}
  return nil
}

func (p *GetScannerRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := FilterType(v)
  p.HashKeyFilterType = temp
}
  return nil
}

func (p *GetScannerRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.HashKeyFilterPattern = &base.Blob{}
  if err := p.HashKeyFilterPattern.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HashKeyFilterPattern), err)
  }
  return nil
}

func (p *GetScannerRequest)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := FilterType(v)
  p.SortKeyFilterType = temp
}
  return nil
}

func (p *GetScannerRequest)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.SortKeyFilterPattern = &base.Blob{}
  if err := p.SortKeyFilterPattern.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SortKeyFilterPattern), err)
  }
  return nil
}

func (p *GetScannerRequest)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ValidatePartitionHash = &v
}
  return nil
}

func (p *GetScannerRequest)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ReturnExpireTs = &v
}
  return nil
}

func (p *GetScannerRequest)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.FullScan = &v
}
  return nil
}

func (p *GetScannerRequest)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.OnlyReturnCount = v
}
  return nil
}

func (p *GetScannerRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_scanner_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetScannerRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start_key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start_key: ", p), err) }
  if err := p.StartKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start_key: ", p), err) }
  return err
}

func (p *GetScannerRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stop_key", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stop_key: ", p), err) }
  if err := p.StopKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StopKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stop_key: ", p), err) }
  return err
}

func (p *GetScannerRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start_inclusive", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_inclusive: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.StartInclusive)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_inclusive (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_inclusive: ", p), err) }
  return err
}

func (p *GetScannerRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stop_inclusive", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stop_inclusive: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.StopInclusive)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop_inclusive (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stop_inclusive: ", p), err) }
  return err
}

func (p *GetScannerRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "batch_size", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:batch_size: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.BatchSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.batch_size (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:batch_size: ", p), err) }
  return err
}

func (p *GetScannerRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "no_value", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:no_value: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NoValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.no_value (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:no_value: ", p), err) }
  return err
}

func (p *GetScannerRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hash_key_filter_type", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:hash_key_filter_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HashKeyFilterType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash_key_filter_type (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:hash_key_filter_type: ", p), err) }
  return err
}

func (p *GetScannerRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hash_key_filter_pattern", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:hash_key_filter_pattern: ", p), err) }
  if err := p.HashKeyFilterPattern.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HashKeyFilterPattern), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:hash_key_filter_pattern: ", p), err) }
  return err
}

func (p *GetScannerRequest) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sort_key_filter_type", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:sort_key_filter_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SortKeyFilterType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sort_key_filter_type (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:sort_key_filter_type: ", p), err) }
  return err
}

func (p *GetScannerRequest) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sort_key_filter_pattern", thrift.STRUCT, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:sort_key_filter_pattern: ", p), err) }
  if err := p.SortKeyFilterPattern.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SortKeyFilterPattern), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:sort_key_filter_pattern: ", p), err) }
  return err
}

func (p *GetScannerRequest) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetValidatePartitionHash() {
    if err := oprot.WriteFieldBegin(ctx, "validate_partition_hash", thrift.BOOL, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:validate_partition_hash: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.ValidatePartitionHash)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.validate_partition_hash (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:validate_partition_hash: ", p), err) }
  }
  return err
}

func (p *GetScannerRequest) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReturnExpireTs() {
    if err := oprot.WriteFieldBegin(ctx, "return_expire_ts", thrift.BOOL, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:return_expire_ts: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.ReturnExpireTs)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.return_expire_ts (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:return_expire_ts: ", p), err) }
  }
  return err
}

func (p *GetScannerRequest) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFullScan() {
    if err := oprot.WriteFieldBegin(ctx, "full_scan", thrift.BOOL, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:full_scan: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.FullScan)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.full_scan (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:full_scan: ", p), err) }
  }
  return err
}

func (p *GetScannerRequest) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOnlyReturnCount() {
    if err := oprot.WriteFieldBegin(ctx, "only_return_count", thrift.BOOL, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:only_return_count: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.OnlyReturnCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.only_return_count (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:only_return_count: ", p), err) }
  }
  return err
}

func (p *GetScannerRequest) Equals(other *GetScannerRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.StartKey.Equals(other.StartKey) { return false }
  if !p.StopKey.Equals(other.StopKey) { return false }
  if p.StartInclusive != other.StartInclusive { return false }
  if p.StopInclusive != other.StopInclusive { return false }
  if p.BatchSize != other.BatchSize { return false }
  if p.NoValue != other.NoValue { return false }
  if p.HashKeyFilterType != other.HashKeyFilterType { return false }
  if !p.HashKeyFilterPattern.Equals(other.HashKeyFilterPattern) { return false }
  if p.SortKeyFilterType != other.SortKeyFilterType { return false }
  if !p.SortKeyFilterPattern.Equals(other.SortKeyFilterPattern) { return false }
  if p.ValidatePartitionHash != other.ValidatePartitionHash {
    if p.ValidatePartitionHash == nil || other.ValidatePartitionHash == nil {
      return false
    }
    if (*p.ValidatePartitionHash) != (*other.ValidatePartitionHash) { return false }
  }
  if p.ReturnExpireTs != other.ReturnExpireTs {
    if p.ReturnExpireTs == nil || other.ReturnExpireTs == nil {
      return false
    }
    if (*p.ReturnExpireTs) != (*other.ReturnExpireTs) { return false }
  }
  if p.FullScan != other.FullScan {
    if p.FullScan == nil || other.FullScan == nil {
      return false
    }
    if (*p.FullScan) != (*other.FullScan) { return false }
  }
  if p.OnlyReturnCount != other.OnlyReturnCount { return false }
  return true
}

func (p *GetScannerRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetScannerRequest(%+v)", *p)
}

func (p *GetScannerRequest) Validate() error {
  return nil
}
// Attributes:
//  - ContextID
type ScanRequest struct {
  ContextID int64 `thrift:"context_id,1" db:"context_id" json:"context_id"`
}

func NewScanRequest() *ScanRequest {
  return &ScanRequest{}
}


func (p *ScanRequest) GetContextID() int64 {
  return p.ContextID
}
func (p *ScanRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ContextID = v
}
  return nil
}

func (p *ScanRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "scan_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "context_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ContextID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.context_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context_id: ", p), err) }
  return err
}

func (p *ScanRequest) Equals(other *ScanRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ContextID != other.ContextID { return false }
  return true
}

func (p *ScanRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanRequest(%+v)", *p)
}

func (p *ScanRequest) Validate() error {
  return nil
}
// Attributes:
//  - Error
//  - Kvs
//  - ContextID
//  - AppID
//  - PartitionIndex
//  - Server
//  - KvCount
type ScanResponse struct {
  Error int32 `thrift:"error,1" db:"error" json:"error"`
  Kvs []*KeyValue `thrift:"kvs,2" db:"kvs" json:"kvs"`
  ContextID int64 `thrift:"context_id,3" db:"context_id" json:"context_id"`
  AppID int32 `thrift:"app_id,4" db:"app_id" json:"app_id"`
  PartitionIndex int32 `thrift:"partition_index,5" db:"partition_index" json:"partition_index"`
  Server string `thrift:"server,6" db:"server" json:"server"`
  KvCount *int32 `thrift:"kv_count,7" db:"kv_count" json:"kv_count,omitempty"`
}

func NewScanResponse() *ScanResponse {
  return &ScanResponse{}
}


func (p *ScanResponse) GetError() int32 {
  return p.Error
}

func (p *ScanResponse) GetKvs() []*KeyValue {
  return p.Kvs
}

func (p *ScanResponse) GetContextID() int64 {
  return p.ContextID
}

func (p *ScanResponse) GetAppID() int32 {
  return p.AppID
}

func (p *ScanResponse) GetPartitionIndex() int32 {
  return p.PartitionIndex
}

func (p *ScanResponse) GetServer() string {
  return p.Server
}
var ScanResponse_KvCount_DEFAULT int32
func (p *ScanResponse) GetKvCount() int32 {
  if !p.IsSetKvCount() {
    return ScanResponse_KvCount_DEFAULT
  }
return *p.KvCount
}
func (p *ScanResponse) IsSetKvCount() bool {
  return p.KvCount != nil
}

func (p *ScanResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *ScanResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*KeyValue, 0, size)
  p.Kvs =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &KeyValue{}
    if err := _elem14.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Kvs = append(p.Kvs, _elem14)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScanResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ContextID = v
}
  return nil
}

func (p *ScanResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *ScanResponse)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PartitionIndex = v
}
  return nil
}

func (p *ScanResponse)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Server = v
}
  return nil
}

func (p *ScanResponse)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.KvCount = &v
}
  return nil
}

func (p *ScanResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "scan_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *ScanResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kvs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:kvs: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Kvs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Kvs {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:kvs: ", p), err) }
  return err
}

func (p *ScanResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "context_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:context_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ContextID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.context_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:context_id: ", p), err) }
  return err
}

func (p *ScanResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:app_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:app_id: ", p), err) }
  return err
}

func (p *ScanResponse) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_index", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:partition_index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_index (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:partition_index: ", p), err) }
  return err
}

func (p *ScanResponse) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Server)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err) }
  return err
}

func (p *ScanResponse) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetKvCount() {
    if err := oprot.WriteFieldBegin(ctx, "kv_count", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:kv_count: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.KvCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.kv_count (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:kv_count: ", p), err) }
  }
  return err
}

func (p *ScanResponse) Equals(other *ScanResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if len(p.Kvs) != len(other.Kvs) { return false }
  for i, _tgt := range p.Kvs {
    _src15 := other.Kvs[i]
    if !_tgt.Equals(_src15) { return false }
  }
  if p.ContextID != other.ContextID { return false }
  if p.AppID != other.AppID { return false }
  if p.PartitionIndex != other.PartitionIndex { return false }
  if p.Server != other.Server { return false }
  if p.KvCount != other.KvCount {
    if p.KvCount == nil || other.KvCount == nil {
      return false
    }
    if (*p.KvCount) != (*other.KvCount) { return false }
  }
  return true
}

func (p *ScanResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanResponse(%+v)", *p)
}

func (p *ScanResponse) Validate() error {
  return nil
}
type Rrdb interface {
  // Parameters:
  //  - Update
  Put(ctx context.Context, update *UpdateRequest) (_r *UpdateResponse, _err error)
  // Parameters:
  //  - Request
  MultiPut(ctx context.Context, request *MultiPutRequest) (_r *UpdateResponse, _err error)
  // Parameters:
  //  - Key
  Remove(ctx context.Context, key *base.Blob) (_r *UpdateResponse, _err error)
  // Parameters:
  //  - Request
  MultiRemove(ctx context.Context, request *MultiRemoveRequest) (_r *MultiRemoveResponse, _err error)
  // Parameters:
  //  - Request
  Incr(ctx context.Context, request *IncrRequest) (_r *IncrResponse, _err error)
  // Parameters:
  //  - Request
  CheckAndSet(ctx context.Context, request *CheckAndSetRequest) (_r *CheckAndSetResponse, _err error)
  // Parameters:
  //  - Request
  CheckAndMutate(ctx context.Context, request *CheckAndMutateRequest) (_r *CheckAndMutateResponse, _err error)
  // Parameters:
  //  - Key
  Get(ctx context.Context, key *base.Blob) (_r *ReadResponse, _err error)
  // Parameters:
  //  - Request
  MultiGet(ctx context.Context, request *MultiGetRequest) (_r *MultiGetResponse, _err error)
  // Parameters:
  //  - Request
  BatchGet(ctx context.Context, request *BatchGetRequest) (_r *BatchGetResponse, _err error)
  // Parameters:
  //  - HashKey
  SortkeyCount(ctx context.Context, hash_key *base.Blob) (_r *CountResponse, _err error)
  // Parameters:
  //  - Key
  TTL(ctx context.Context, key *base.Blob) (_r *TTLResponse, _err error)
  // Parameters:
  //  - Request
  GetScanner(ctx context.Context, request *GetScannerRequest) (_r *ScanResponse, _err error)
  // Parameters:
  //  - Request
  Scan(ctx context.Context, request *ScanRequest) (_r *ScanResponse, _err error)
  // Parameters:
  //  - ContextID
  ClearScanner(ctx context.Context, context_id int64) (_err error)
}

type RrdbClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewRrdbClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RrdbClient {
  return &RrdbClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewRrdbClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RrdbClient {
  return &RrdbClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRrdbClient(c thrift.TClient) *RrdbClient {
  return &RrdbClient{
    c: c,
  }
}

func (p *RrdbClient) Client_() thrift.TClient {
  return p.c
}

func (p *RrdbClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *RrdbClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Update
func (p *RrdbClient) Put(ctx context.Context, update *UpdateRequest) (_r *UpdateResponse, _err error) {
  var _args16 RrdbPutArgs
  _args16.Update = update
  var _result18 RrdbPutResult
  var _meta17 thrift.ResponseMeta
  _meta17, _err = p.Client_().Call(ctx, "put", &_args16, &_result18)
  p.SetLastResponseMeta_(_meta17)
  if _err != nil {
    return
  }
  if _ret19 := _result18.GetSuccess(); _ret19 != nil {
    return _ret19, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "put failed: unknown result")
}

// Parameters:
//  - Request
func (p *RrdbClient) MultiPut(ctx context.Context, request *MultiPutRequest) (_r *UpdateResponse, _err error) {
  var _args20 RrdbMultiPutArgs
  _args20.Request = request
  var _result22 RrdbMultiPutResult
  var _meta21 thrift.ResponseMeta
  _meta21, _err = p.Client_().Call(ctx, "multi_put", &_args20, &_result22)
  p.SetLastResponseMeta_(_meta21)
  if _err != nil {
    return
  }
  if _ret23 := _result22.GetSuccess(); _ret23 != nil {
    return _ret23, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "multi_put failed: unknown result")
}

// Parameters:
//  - Key
func (p *RrdbClient) Remove(ctx context.Context, key *base.Blob) (_r *UpdateResponse, _err error) {
  var _args24 RrdbRemoveArgs
  _args24.Key = key
  var _result26 RrdbRemoveResult
  var _meta25 thrift.ResponseMeta
  _meta25, _err = p.Client_().Call(ctx, "remove", &_args24, &_result26)
  p.SetLastResponseMeta_(_meta25)
  if _err != nil {
    return
  }
  if _ret27 := _result26.GetSuccess(); _ret27 != nil {
    return _ret27, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "remove failed: unknown result")
}

// Parameters:
//  - Request
func (p *RrdbClient) MultiRemove(ctx context.Context, request *MultiRemoveRequest) (_r *MultiRemoveResponse, _err error) {
  var _args28 RrdbMultiRemoveArgs
  _args28.Request = request
  var _result30 RrdbMultiRemoveResult
  var _meta29 thrift.ResponseMeta
  _meta29, _err = p.Client_().Call(ctx, "multi_remove", &_args28, &_result30)
  p.SetLastResponseMeta_(_meta29)
  if _err != nil {
    return
  }
  if _ret31 := _result30.GetSuccess(); _ret31 != nil {
    return _ret31, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "multi_remove failed: unknown result")
}

// Parameters:
//  - Request
func (p *RrdbClient) Incr(ctx context.Context, request *IncrRequest) (_r *IncrResponse, _err error) {
  var _args32 RrdbIncrArgs
  _args32.Request = request
  var _result34 RrdbIncrResult
  var _meta33 thrift.ResponseMeta
  _meta33, _err = p.Client_().Call(ctx, "incr", &_args32, &_result34)
  p.SetLastResponseMeta_(_meta33)
  if _err != nil {
    return
  }
  if _ret35 := _result34.GetSuccess(); _ret35 != nil {
    return _ret35, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "incr failed: unknown result")
}

// Parameters:
//  - Request
func (p *RrdbClient) CheckAndSet(ctx context.Context, request *CheckAndSetRequest) (_r *CheckAndSetResponse, _err error) {
  var _args36 RrdbCheckAndSetArgs
  _args36.Request = request
  var _result38 RrdbCheckAndSetResult
  var _meta37 thrift.ResponseMeta
  _meta37, _err = p.Client_().Call(ctx, "check_and_set", &_args36, &_result38)
  p.SetLastResponseMeta_(_meta37)
  if _err != nil {
    return
  }
  if _ret39 := _result38.GetSuccess(); _ret39 != nil {
    return _ret39, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "check_and_set failed: unknown result")
}

// Parameters:
//  - Request
func (p *RrdbClient) CheckAndMutate(ctx context.Context, request *CheckAndMutateRequest) (_r *CheckAndMutateResponse, _err error) {
  var _args40 RrdbCheckAndMutateArgs
  _args40.Request = request
  var _result42 RrdbCheckAndMutateResult
  var _meta41 thrift.ResponseMeta
  _meta41, _err = p.Client_().Call(ctx, "check_and_mutate", &_args40, &_result42)
  p.SetLastResponseMeta_(_meta41)
  if _err != nil {
    return
  }
  if _ret43 := _result42.GetSuccess(); _ret43 != nil {
    return _ret43, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "check_and_mutate failed: unknown result")
}

// Parameters:
//  - Key
func (p *RrdbClient) Get(ctx context.Context, key *base.Blob) (_r *ReadResponse, _err error) {
  var _args44 RrdbGetArgs
  _args44.Key = key
  var _result46 RrdbGetResult
  var _meta45 thrift.ResponseMeta
  _meta45, _err = p.Client_().Call(ctx, "get", &_args44, &_result46)
  p.SetLastResponseMeta_(_meta45)
  if _err != nil {
    return
  }
  if _ret47 := _result46.GetSuccess(); _ret47 != nil {
    return _ret47, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "get failed: unknown result")
}

// Parameters:
//  - Request
func (p *RrdbClient) MultiGet(ctx context.Context, request *MultiGetRequest) (_r *MultiGetResponse, _err error) {
  var _args48 RrdbMultiGetArgs
  _args48.Request = request
  var _result50 RrdbMultiGetResult
  var _meta49 thrift.ResponseMeta
  _meta49, _err = p.Client_().Call(ctx, "multi_get", &_args48, &_result50)
  p.SetLastResponseMeta_(_meta49)
  if _err != nil {
    return
  }
  if _ret51 := _result50.GetSuccess(); _ret51 != nil {
    return _ret51, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "multi_get failed: unknown result")
}

// Parameters:
//  - Request
func (p *RrdbClient) BatchGet(ctx context.Context, request *BatchGetRequest) (_r *BatchGetResponse, _err error) {
  var _args52 RrdbBatchGetArgs
  _args52.Request = request
  var _result54 RrdbBatchGetResult
  var _meta53 thrift.ResponseMeta
  _meta53, _err = p.Client_().Call(ctx, "batch_get", &_args52, &_result54)
  p.SetLastResponseMeta_(_meta53)
  if _err != nil {
    return
  }
  if _ret55 := _result54.GetSuccess(); _ret55 != nil {
    return _ret55, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "batch_get failed: unknown result")
}

// Parameters:
//  - HashKey
func (p *RrdbClient) SortkeyCount(ctx context.Context, hash_key *base.Blob) (_r *CountResponse, _err error) {
  var _args56 RrdbSortkeyCountArgs
  _args56.HashKey = hash_key
  var _result58 RrdbSortkeyCountResult
  var _meta57 thrift.ResponseMeta
  _meta57, _err = p.Client_().Call(ctx, "sortkey_count", &_args56, &_result58)
  p.SetLastResponseMeta_(_meta57)
  if _err != nil {
    return
  }
  if _ret59 := _result58.GetSuccess(); _ret59 != nil {
    return _ret59, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "sortkey_count failed: unknown result")
}

// Parameters:
//  - Key
func (p *RrdbClient) TTL(ctx context.Context, key *base.Blob) (_r *TTLResponse, _err error) {
  var _args60 RrdbTTLArgs
  _args60.Key = key
  var _result62 RrdbTTLResult
  var _meta61 thrift.ResponseMeta
  _meta61, _err = p.Client_().Call(ctx, "ttl", &_args60, &_result62)
  p.SetLastResponseMeta_(_meta61)
  if _err != nil {
    return
  }
  if _ret63 := _result62.GetSuccess(); _ret63 != nil {
    return _ret63, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ttl failed: unknown result")
}

// Parameters:
//  - Request
func (p *RrdbClient) GetScanner(ctx context.Context, request *GetScannerRequest) (_r *ScanResponse, _err error) {
  var _args64 RrdbGetScannerArgs
  _args64.Request = request
  var _result66 RrdbGetScannerResult
  var _meta65 thrift.ResponseMeta
  _meta65, _err = p.Client_().Call(ctx, "get_scanner", &_args64, &_result66)
  p.SetLastResponseMeta_(_meta65)
  if _err != nil {
    return
  }
  if _ret67 := _result66.GetSuccess(); _ret67 != nil {
    return _ret67, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "get_scanner failed: unknown result")
}

// Parameters:
//  - Request
func (p *RrdbClient) Scan(ctx context.Context, request *ScanRequest) (_r *ScanResponse, _err error) {
  var _args68 RrdbScanArgs
  _args68.Request = request
  var _result70 RrdbScanResult
  var _meta69 thrift.ResponseMeta
  _meta69, _err = p.Client_().Call(ctx, "scan", &_args68, &_result70)
  p.SetLastResponseMeta_(_meta69)
  if _err != nil {
    return
  }
  if _ret71 := _result70.GetSuccess(); _ret71 != nil {
    return _ret71, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "scan failed: unknown result")
}

// Parameters:
//  - ContextID
func (p *RrdbClient) ClearScanner(ctx context.Context, context_id int64) (_err error) {
  var _args72 RrdbClearScannerArgs
  _args72.ContextID = context_id
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "clear_scanner", &_args72, nil); err != nil {
    return err
  }
  return nil
}

type RrdbProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Rrdb
}

func (p *RrdbProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RrdbProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RrdbProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRrdbProcessor(handler Rrdb) *RrdbProcessor {

  self73 := &RrdbProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self73.processorMap["put"] = &rrdbProcessorPut{handler:handler}
  self73.processorMap["multi_put"] = &rrdbProcessorMultiPut{handler:handler}
  self73.processorMap["remove"] = &rrdbProcessorRemove{handler:handler}
  self73.processorMap["multi_remove"] = &rrdbProcessorMultiRemove{handler:handler}
  self73.processorMap["incr"] = &rrdbProcessorIncr{handler:handler}
  self73.processorMap["check_and_set"] = &rrdbProcessorCheckAndSet{handler:handler}
  self73.processorMap["check_and_mutate"] = &rrdbProcessorCheckAndMutate{handler:handler}
  self73.processorMap["get"] = &rrdbProcessorGet{handler:handler}
  self73.processorMap["multi_get"] = &rrdbProcessorMultiGet{handler:handler}
  self73.processorMap["batch_get"] = &rrdbProcessorBatchGet{handler:handler}
  self73.processorMap["sortkey_count"] = &rrdbProcessorSortkeyCount{handler:handler}
  self73.processorMap["ttl"] = &rrdbProcessorTTL{handler:handler}
  self73.processorMap["get_scanner"] = &rrdbProcessorGetScanner{handler:handler}
  self73.processorMap["scan"] = &rrdbProcessorScan{handler:handler}
  self73.processorMap["clear_scanner"] = &rrdbProcessorClearScanner{handler:handler}
return self73
}

func (p *RrdbProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x74 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x74.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x74

}

type rrdbProcessorPut struct {
  handler Rrdb
}

func (p *rrdbProcessorPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err75 error
  args := RrdbPutArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "put", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbPutResult{}
  if retval, err2 := p.handler.Put(ctx, args.Update); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc76 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "put", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err75 = thrift.WrapTException(err2)
    }
    if err2 := _exc76.Write(ctx, oprot); _write_err75 == nil && err2 != nil {
      _write_err75 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err75 == nil && err2 != nil {
      _write_err75 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err75 == nil && err2 != nil {
      _write_err75 = thrift.WrapTException(err2)
    }
    if _write_err75 != nil {
      return false, thrift.WrapTException(_write_err75)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "put", thrift.REPLY, seqId); err2 != nil {
    _write_err75 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err75 == nil && err2 != nil {
    _write_err75 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err75 == nil && err2 != nil {
    _write_err75 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err75 == nil && err2 != nil {
    _write_err75 = thrift.WrapTException(err2)
  }
  if _write_err75 != nil {
    return false, thrift.WrapTException(_write_err75)
  }
  return true, err
}

type rrdbProcessorMultiPut struct {
  handler Rrdb
}

func (p *rrdbProcessorMultiPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err77 error
  args := RrdbMultiPutArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multi_put", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbMultiPutResult{}
  if retval, err2 := p.handler.MultiPut(ctx, args.Request); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc78 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multi_put: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "multi_put", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err77 = thrift.WrapTException(err2)
    }
    if err2 := _exc78.Write(ctx, oprot); _write_err77 == nil && err2 != nil {
      _write_err77 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err77 == nil && err2 != nil {
      _write_err77 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err77 == nil && err2 != nil {
      _write_err77 = thrift.WrapTException(err2)
    }
    if _write_err77 != nil {
      return false, thrift.WrapTException(_write_err77)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "multi_put", thrift.REPLY, seqId); err2 != nil {
    _write_err77 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err77 == nil && err2 != nil {
    _write_err77 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err77 == nil && err2 != nil {
    _write_err77 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err77 == nil && err2 != nil {
    _write_err77 = thrift.WrapTException(err2)
  }
  if _write_err77 != nil {
    return false, thrift.WrapTException(_write_err77)
  }
  return true, err
}

type rrdbProcessorRemove struct {
  handler Rrdb
}

func (p *rrdbProcessorRemove) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err79 error
  args := RrdbRemoveArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "remove", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbRemoveResult{}
  if retval, err2 := p.handler.Remove(ctx, args.Key); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc80 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "remove", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err79 = thrift.WrapTException(err2)
    }
    if err2 := _exc80.Write(ctx, oprot); _write_err79 == nil && err2 != nil {
      _write_err79 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err79 == nil && err2 != nil {
      _write_err79 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err79 == nil && err2 != nil {
      _write_err79 = thrift.WrapTException(err2)
    }
    if _write_err79 != nil {
      return false, thrift.WrapTException(_write_err79)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "remove", thrift.REPLY, seqId); err2 != nil {
    _write_err79 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err79 == nil && err2 != nil {
    _write_err79 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err79 == nil && err2 != nil {
    _write_err79 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err79 == nil && err2 != nil {
    _write_err79 = thrift.WrapTException(err2)
  }
  if _write_err79 != nil {
    return false, thrift.WrapTException(_write_err79)
  }
  return true, err
}

type rrdbProcessorMultiRemove struct {
  handler Rrdb
}

func (p *rrdbProcessorMultiRemove) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err81 error
  args := RrdbMultiRemoveArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multi_remove", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbMultiRemoveResult{}
  if retval, err2 := p.handler.MultiRemove(ctx, args.Request); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc82 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multi_remove: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "multi_remove", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err81 = thrift.WrapTException(err2)
    }
    if err2 := _exc82.Write(ctx, oprot); _write_err81 == nil && err2 != nil {
      _write_err81 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err81 == nil && err2 != nil {
      _write_err81 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err81 == nil && err2 != nil {
      _write_err81 = thrift.WrapTException(err2)
    }
    if _write_err81 != nil {
      return false, thrift.WrapTException(_write_err81)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "multi_remove", thrift.REPLY, seqId); err2 != nil {
    _write_err81 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err81 == nil && err2 != nil {
    _write_err81 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err81 == nil && err2 != nil {
    _write_err81 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err81 == nil && err2 != nil {
    _write_err81 = thrift.WrapTException(err2)
  }
  if _write_err81 != nil {
    return false, thrift.WrapTException(_write_err81)
  }
  return true, err
}

type rrdbProcessorIncr struct {
  handler Rrdb
}

func (p *rrdbProcessorIncr) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err83 error
  args := RrdbIncrArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "incr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbIncrResult{}
  if retval, err2 := p.handler.Incr(ctx, args.Request); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc84 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incr: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "incr", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err83 = thrift.WrapTException(err2)
    }
    if err2 := _exc84.Write(ctx, oprot); _write_err83 == nil && err2 != nil {
      _write_err83 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err83 == nil && err2 != nil {
      _write_err83 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err83 == nil && err2 != nil {
      _write_err83 = thrift.WrapTException(err2)
    }
    if _write_err83 != nil {
      return false, thrift.WrapTException(_write_err83)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "incr", thrift.REPLY, seqId); err2 != nil {
    _write_err83 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err83 == nil && err2 != nil {
    _write_err83 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err83 == nil && err2 != nil {
    _write_err83 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err83 == nil && err2 != nil {
    _write_err83 = thrift.WrapTException(err2)
  }
  if _write_err83 != nil {
    return false, thrift.WrapTException(_write_err83)
  }
  return true, err
}

type rrdbProcessorCheckAndSet struct {
  handler Rrdb
}

func (p *rrdbProcessorCheckAndSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err85 error
  args := RrdbCheckAndSetArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "check_and_set", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbCheckAndSetResult{}
  if retval, err2 := p.handler.CheckAndSet(ctx, args.Request); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc86 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing check_and_set: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "check_and_set", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err85 = thrift.WrapTException(err2)
    }
    if err2 := _exc86.Write(ctx, oprot); _write_err85 == nil && err2 != nil {
      _write_err85 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err85 == nil && err2 != nil {
      _write_err85 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err85 == nil && err2 != nil {
      _write_err85 = thrift.WrapTException(err2)
    }
    if _write_err85 != nil {
      return false, thrift.WrapTException(_write_err85)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "check_and_set", thrift.REPLY, seqId); err2 != nil {
    _write_err85 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err85 == nil && err2 != nil {
    _write_err85 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err85 == nil && err2 != nil {
    _write_err85 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err85 == nil && err2 != nil {
    _write_err85 = thrift.WrapTException(err2)
  }
  if _write_err85 != nil {
    return false, thrift.WrapTException(_write_err85)
  }
  return true, err
}

type rrdbProcessorCheckAndMutate struct {
  handler Rrdb
}

func (p *rrdbProcessorCheckAndMutate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err87 error
  args := RrdbCheckAndMutateArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "check_and_mutate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbCheckAndMutateResult{}
  if retval, err2 := p.handler.CheckAndMutate(ctx, args.Request); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc88 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing check_and_mutate: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "check_and_mutate", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err87 = thrift.WrapTException(err2)
    }
    if err2 := _exc88.Write(ctx, oprot); _write_err87 == nil && err2 != nil {
      _write_err87 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err87 == nil && err2 != nil {
      _write_err87 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err87 == nil && err2 != nil {
      _write_err87 = thrift.WrapTException(err2)
    }
    if _write_err87 != nil {
      return false, thrift.WrapTException(_write_err87)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "check_and_mutate", thrift.REPLY, seqId); err2 != nil {
    _write_err87 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err87 == nil && err2 != nil {
    _write_err87 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err87 == nil && err2 != nil {
    _write_err87 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err87 == nil && err2 != nil {
    _write_err87 = thrift.WrapTException(err2)
  }
  if _write_err87 != nil {
    return false, thrift.WrapTException(_write_err87)
  }
  return true, err
}

type rrdbProcessorGet struct {
  handler Rrdb
}

func (p *rrdbProcessorGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err89 error
  args := RrdbGetArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbGetResult{}
  if retval, err2 := p.handler.Get(ctx, args.Key); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc90 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "get", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err89 = thrift.WrapTException(err2)
    }
    if err2 := _exc90.Write(ctx, oprot); _write_err89 == nil && err2 != nil {
      _write_err89 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err89 == nil && err2 != nil {
      _write_err89 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err89 == nil && err2 != nil {
      _write_err89 = thrift.WrapTException(err2)
    }
    if _write_err89 != nil {
      return false, thrift.WrapTException(_write_err89)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "get", thrift.REPLY, seqId); err2 != nil {
    _write_err89 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err89 == nil && err2 != nil {
    _write_err89 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err89 == nil && err2 != nil {
    _write_err89 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err89 == nil && err2 != nil {
    _write_err89 = thrift.WrapTException(err2)
  }
  if _write_err89 != nil {
    return false, thrift.WrapTException(_write_err89)
  }
  return true, err
}

type rrdbProcessorMultiGet struct {
  handler Rrdb
}

func (p *rrdbProcessorMultiGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err91 error
  args := RrdbMultiGetArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multi_get", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbMultiGetResult{}
  if retval, err2 := p.handler.MultiGet(ctx, args.Request); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc92 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multi_get: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "multi_get", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err91 = thrift.WrapTException(err2)
    }
    if err2 := _exc92.Write(ctx, oprot); _write_err91 == nil && err2 != nil {
      _write_err91 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err91 == nil && err2 != nil {
      _write_err91 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err91 == nil && err2 != nil {
      _write_err91 = thrift.WrapTException(err2)
    }
    if _write_err91 != nil {
      return false, thrift.WrapTException(_write_err91)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "multi_get", thrift.REPLY, seqId); err2 != nil {
    _write_err91 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err91 == nil && err2 != nil {
    _write_err91 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err91 == nil && err2 != nil {
    _write_err91 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err91 == nil && err2 != nil {
    _write_err91 = thrift.WrapTException(err2)
  }
  if _write_err91 != nil {
    return false, thrift.WrapTException(_write_err91)
  }
  return true, err
}

type rrdbProcessorBatchGet struct {
  handler Rrdb
}

func (p *rrdbProcessorBatchGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err93 error
  args := RrdbBatchGetArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "batch_get", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbBatchGetResult{}
  if retval, err2 := p.handler.BatchGet(ctx, args.Request); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc94 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing batch_get: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "batch_get", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err93 = thrift.WrapTException(err2)
    }
    if err2 := _exc94.Write(ctx, oprot); _write_err93 == nil && err2 != nil {
      _write_err93 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err93 == nil && err2 != nil {
      _write_err93 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err93 == nil && err2 != nil {
      _write_err93 = thrift.WrapTException(err2)
    }
    if _write_err93 != nil {
      return false, thrift.WrapTException(_write_err93)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "batch_get", thrift.REPLY, seqId); err2 != nil {
    _write_err93 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err93 == nil && err2 != nil {
    _write_err93 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err93 == nil && err2 != nil {
    _write_err93 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err93 == nil && err2 != nil {
    _write_err93 = thrift.WrapTException(err2)
  }
  if _write_err93 != nil {
    return false, thrift.WrapTException(_write_err93)
  }
  return true, err
}

type rrdbProcessorSortkeyCount struct {
  handler Rrdb
}

func (p *rrdbProcessorSortkeyCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err95 error
  args := RrdbSortkeyCountArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sortkey_count", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbSortkeyCountResult{}
  if retval, err2 := p.handler.SortkeyCount(ctx, args.HashKey); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc96 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sortkey_count: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "sortkey_count", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err95 = thrift.WrapTException(err2)
    }
    if err2 := _exc96.Write(ctx, oprot); _write_err95 == nil && err2 != nil {
      _write_err95 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err95 == nil && err2 != nil {
      _write_err95 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err95 == nil && err2 != nil {
      _write_err95 = thrift.WrapTException(err2)
    }
    if _write_err95 != nil {
      return false, thrift.WrapTException(_write_err95)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "sortkey_count", thrift.REPLY, seqId); err2 != nil {
    _write_err95 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err95 == nil && err2 != nil {
    _write_err95 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err95 == nil && err2 != nil {
    _write_err95 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err95 == nil && err2 != nil {
    _write_err95 = thrift.WrapTException(err2)
  }
  if _write_err95 != nil {
    return false, thrift.WrapTException(_write_err95)
  }
  return true, err
}

type rrdbProcessorTTL struct {
  handler Rrdb
}

func (p *rrdbProcessorTTL) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err97 error
  args := RrdbTTLArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ttl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbTTLResult{}
  if retval, err2 := p.handler.TTL(ctx, args.Key); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc98 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ttl: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "ttl", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err97 = thrift.WrapTException(err2)
    }
    if err2 := _exc98.Write(ctx, oprot); _write_err97 == nil && err2 != nil {
      _write_err97 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err97 == nil && err2 != nil {
      _write_err97 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err97 == nil && err2 != nil {
      _write_err97 = thrift.WrapTException(err2)
    }
    if _write_err97 != nil {
      return false, thrift.WrapTException(_write_err97)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ttl", thrift.REPLY, seqId); err2 != nil {
    _write_err97 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err97 == nil && err2 != nil {
    _write_err97 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err97 == nil && err2 != nil {
    _write_err97 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err97 == nil && err2 != nil {
    _write_err97 = thrift.WrapTException(err2)
  }
  if _write_err97 != nil {
    return false, thrift.WrapTException(_write_err97)
  }
  return true, err
}

type rrdbProcessorGetScanner struct {
  handler Rrdb
}

func (p *rrdbProcessorGetScanner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err99 error
  args := RrdbGetScannerArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_scanner", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbGetScannerResult{}
  if retval, err2 := p.handler.GetScanner(ctx, args.Request); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc100 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_scanner: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "get_scanner", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err99 = thrift.WrapTException(err2)
    }
    if err2 := _exc100.Write(ctx, oprot); _write_err99 == nil && err2 != nil {
      _write_err99 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err99 == nil && err2 != nil {
      _write_err99 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err99 == nil && err2 != nil {
      _write_err99 = thrift.WrapTException(err2)
    }
    if _write_err99 != nil {
      return false, thrift.WrapTException(_write_err99)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "get_scanner", thrift.REPLY, seqId); err2 != nil {
    _write_err99 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err99 == nil && err2 != nil {
    _write_err99 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err99 == nil && err2 != nil {
    _write_err99 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err99 == nil && err2 != nil {
    _write_err99 = thrift.WrapTException(err2)
  }
  if _write_err99 != nil {
    return false, thrift.WrapTException(_write_err99)
  }
  return true, err
}

type rrdbProcessorScan struct {
  handler Rrdb
}

func (p *rrdbProcessorScan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err101 error
  args := RrdbScanArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "scan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RrdbScanResult{}
  if retval, err2 := p.handler.Scan(ctx, args.Request); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc102 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scan: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "scan", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err101 = thrift.WrapTException(err2)
    }
    if err2 := _exc102.Write(ctx, oprot); _write_err101 == nil && err2 != nil {
      _write_err101 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err101 == nil && err2 != nil {
      _write_err101 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err101 == nil && err2 != nil {
      _write_err101 = thrift.WrapTException(err2)
    }
    if _write_err101 != nil {
      return false, thrift.WrapTException(_write_err101)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "scan", thrift.REPLY, seqId); err2 != nil {
    _write_err101 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err101 == nil && err2 != nil {
    _write_err101 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err101 == nil && err2 != nil {
    _write_err101 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err101 == nil && err2 != nil {
    _write_err101 = thrift.WrapTException(err2)
  }
  if _write_err101 != nil {
    return false, thrift.WrapTException(_write_err101)
  }
  return true, err
}

type rrdbProcessorClearScanner struct {
  handler Rrdb
}

func (p *rrdbProcessorClearScanner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RrdbClearScannerArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.ClearScanner(ctx, args.ContextID); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Update
type RrdbPutArgs struct {
  Update *UpdateRequest `thrift:"update,1" db:"update" json:"update"`
}

func NewRrdbPutArgs() *RrdbPutArgs {
  return &RrdbPutArgs{}
}

var RrdbPutArgs_Update_DEFAULT *UpdateRequest
func (p *RrdbPutArgs) GetUpdate() *UpdateRequest {
  if !p.IsSetUpdate() {
    return RrdbPutArgs_Update_DEFAULT
  }
return p.Update
}
func (p *RrdbPutArgs) IsSetUpdate() bool {
  return p.Update != nil
}

func (p *RrdbPutArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbPutArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Update = &UpdateRequest{}
  if err := p.Update.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Update), err)
  }
  return nil
}

func (p *RrdbPutArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "put_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbPutArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update: ", p), err) }
  if err := p.Update.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Update), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update: ", p), err) }
  return err
}

func (p *RrdbPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbPutResult struct {
  Success *UpdateResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbPutResult() *RrdbPutResult {
  return &RrdbPutResult{}
}

var RrdbPutResult_Success_DEFAULT *UpdateResponse
func (p *RrdbPutResult) GetSuccess() *UpdateResponse {
  if !p.IsSetSuccess() {
    return RrdbPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbPutResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbPutResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UpdateResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbPutResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "put_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbPutResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbPutResult(%+v)", *p)
}

// Attributes:
//  - Request
type RrdbMultiPutArgs struct {
  Request *MultiPutRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRrdbMultiPutArgs() *RrdbMultiPutArgs {
  return &RrdbMultiPutArgs{}
}

var RrdbMultiPutArgs_Request_DEFAULT *MultiPutRequest
func (p *RrdbMultiPutArgs) GetRequest() *MultiPutRequest {
  if !p.IsSetRequest() {
    return RrdbMultiPutArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RrdbMultiPutArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RrdbMultiPutArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbMultiPutArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &MultiPutRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RrdbMultiPutArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multi_put_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbMultiPutArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RrdbMultiPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbMultiPutResult struct {
  Success *UpdateResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbMultiPutResult() *RrdbMultiPutResult {
  return &RrdbMultiPutResult{}
}

var RrdbMultiPutResult_Success_DEFAULT *UpdateResponse
func (p *RrdbMultiPutResult) GetSuccess() *UpdateResponse {
  if !p.IsSetSuccess() {
    return RrdbMultiPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbMultiPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbMultiPutResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbMultiPutResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UpdateResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbMultiPutResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multi_put_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbMultiPutResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbMultiPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbMultiPutResult(%+v)", *p)
}

// Attributes:
//  - Key
type RrdbRemoveArgs struct {
  Key *base.Blob `thrift:"key,1" db:"key" json:"key"`
}

func NewRrdbRemoveArgs() *RrdbRemoveArgs {
  return &RrdbRemoveArgs{}
}

var RrdbRemoveArgs_Key_DEFAULT *base.Blob
func (p *RrdbRemoveArgs) GetKey() *base.Blob {
  if !p.IsSetKey() {
    return RrdbRemoveArgs_Key_DEFAULT
  }
return p.Key
}
func (p *RrdbRemoveArgs) IsSetKey() bool {
  return p.Key != nil
}

func (p *RrdbRemoveArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbRemoveArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Key = &base.Blob{}
  if err := p.Key.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
  }
  return nil
}

func (p *RrdbRemoveArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "remove_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbRemoveArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := p.Key.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *RrdbRemoveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbRemoveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbRemoveResult struct {
  Success *UpdateResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbRemoveResult() *RrdbRemoveResult {
  return &RrdbRemoveResult{}
}

var RrdbRemoveResult_Success_DEFAULT *UpdateResponse
func (p *RrdbRemoveResult) GetSuccess() *UpdateResponse {
  if !p.IsSetSuccess() {
    return RrdbRemoveResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbRemoveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbRemoveResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbRemoveResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UpdateResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbRemoveResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "remove_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbRemoveResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbRemoveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbRemoveResult(%+v)", *p)
}

// Attributes:
//  - Request
type RrdbMultiRemoveArgs struct {
  Request *MultiRemoveRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRrdbMultiRemoveArgs() *RrdbMultiRemoveArgs {
  return &RrdbMultiRemoveArgs{}
}

var RrdbMultiRemoveArgs_Request_DEFAULT *MultiRemoveRequest
func (p *RrdbMultiRemoveArgs) GetRequest() *MultiRemoveRequest {
  if !p.IsSetRequest() {
    return RrdbMultiRemoveArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RrdbMultiRemoveArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RrdbMultiRemoveArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbMultiRemoveArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &MultiRemoveRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RrdbMultiRemoveArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multi_remove_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbMultiRemoveArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RrdbMultiRemoveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbMultiRemoveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbMultiRemoveResult struct {
  Success *MultiRemoveResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbMultiRemoveResult() *RrdbMultiRemoveResult {
  return &RrdbMultiRemoveResult{}
}

var RrdbMultiRemoveResult_Success_DEFAULT *MultiRemoveResponse
func (p *RrdbMultiRemoveResult) GetSuccess() *MultiRemoveResponse {
  if !p.IsSetSuccess() {
    return RrdbMultiRemoveResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbMultiRemoveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbMultiRemoveResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbMultiRemoveResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MultiRemoveResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbMultiRemoveResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multi_remove_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbMultiRemoveResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbMultiRemoveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbMultiRemoveResult(%+v)", *p)
}

// Attributes:
//  - Request
type RrdbIncrArgs struct {
  Request *IncrRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRrdbIncrArgs() *RrdbIncrArgs {
  return &RrdbIncrArgs{}
}

var RrdbIncrArgs_Request_DEFAULT *IncrRequest
func (p *RrdbIncrArgs) GetRequest() *IncrRequest {
  if !p.IsSetRequest() {
    return RrdbIncrArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RrdbIncrArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RrdbIncrArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbIncrArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &IncrRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RrdbIncrArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "incr_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbIncrArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RrdbIncrArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbIncrArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbIncrResult struct {
  Success *IncrResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbIncrResult() *RrdbIncrResult {
  return &RrdbIncrResult{}
}

var RrdbIncrResult_Success_DEFAULT *IncrResponse
func (p *RrdbIncrResult) GetSuccess() *IncrResponse {
  if !p.IsSetSuccess() {
    return RrdbIncrResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbIncrResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbIncrResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbIncrResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IncrResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbIncrResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "incr_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbIncrResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbIncrResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbIncrResult(%+v)", *p)
}

// Attributes:
//  - Request
type RrdbCheckAndSetArgs struct {
  Request *CheckAndSetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRrdbCheckAndSetArgs() *RrdbCheckAndSetArgs {
  return &RrdbCheckAndSetArgs{}
}

var RrdbCheckAndSetArgs_Request_DEFAULT *CheckAndSetRequest
func (p *RrdbCheckAndSetArgs) GetRequest() *CheckAndSetRequest {
  if !p.IsSetRequest() {
    return RrdbCheckAndSetArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RrdbCheckAndSetArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RrdbCheckAndSetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbCheckAndSetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &CheckAndSetRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RrdbCheckAndSetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "check_and_set_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbCheckAndSetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RrdbCheckAndSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbCheckAndSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbCheckAndSetResult struct {
  Success *CheckAndSetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbCheckAndSetResult() *RrdbCheckAndSetResult {
  return &RrdbCheckAndSetResult{}
}

var RrdbCheckAndSetResult_Success_DEFAULT *CheckAndSetResponse
func (p *RrdbCheckAndSetResult) GetSuccess() *CheckAndSetResponse {
  if !p.IsSetSuccess() {
    return RrdbCheckAndSetResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbCheckAndSetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbCheckAndSetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbCheckAndSetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CheckAndSetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbCheckAndSetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "check_and_set_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbCheckAndSetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbCheckAndSetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbCheckAndSetResult(%+v)", *p)
}

// Attributes:
//  - Request
type RrdbCheckAndMutateArgs struct {
  Request *CheckAndMutateRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRrdbCheckAndMutateArgs() *RrdbCheckAndMutateArgs {
  return &RrdbCheckAndMutateArgs{}
}

var RrdbCheckAndMutateArgs_Request_DEFAULT *CheckAndMutateRequest
func (p *RrdbCheckAndMutateArgs) GetRequest() *CheckAndMutateRequest {
  if !p.IsSetRequest() {
    return RrdbCheckAndMutateArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RrdbCheckAndMutateArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RrdbCheckAndMutateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbCheckAndMutateArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &CheckAndMutateRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RrdbCheckAndMutateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "check_and_mutate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbCheckAndMutateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RrdbCheckAndMutateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbCheckAndMutateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbCheckAndMutateResult struct {
  Success *CheckAndMutateResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbCheckAndMutateResult() *RrdbCheckAndMutateResult {
  return &RrdbCheckAndMutateResult{}
}

var RrdbCheckAndMutateResult_Success_DEFAULT *CheckAndMutateResponse
func (p *RrdbCheckAndMutateResult) GetSuccess() *CheckAndMutateResponse {
  if !p.IsSetSuccess() {
    return RrdbCheckAndMutateResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbCheckAndMutateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbCheckAndMutateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbCheckAndMutateResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CheckAndMutateResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbCheckAndMutateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "check_and_mutate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbCheckAndMutateResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbCheckAndMutateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbCheckAndMutateResult(%+v)", *p)
}

// Attributes:
//  - Key
type RrdbGetArgs struct {
  Key *base.Blob `thrift:"key,1" db:"key" json:"key"`
}

func NewRrdbGetArgs() *RrdbGetArgs {
  return &RrdbGetArgs{}
}

var RrdbGetArgs_Key_DEFAULT *base.Blob
func (p *RrdbGetArgs) GetKey() *base.Blob {
  if !p.IsSetKey() {
    return RrdbGetArgs_Key_DEFAULT
  }
return p.Key
}
func (p *RrdbGetArgs) IsSetKey() bool {
  return p.Key != nil
}

func (p *RrdbGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Key = &base.Blob{}
  if err := p.Key.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
  }
  return nil
}

func (p *RrdbGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := p.Key.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *RrdbGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbGetResult struct {
  Success *ReadResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbGetResult() *RrdbGetResult {
  return &RrdbGetResult{}
}

var RrdbGetResult_Success_DEFAULT *ReadResponse
func (p *RrdbGetResult) GetSuccess() *ReadResponse {
  if !p.IsSetSuccess() {
    return RrdbGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ReadResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbGetResult(%+v)", *p)
}

// Attributes:
//  - Request
type RrdbMultiGetArgs struct {
  Request *MultiGetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRrdbMultiGetArgs() *RrdbMultiGetArgs {
  return &RrdbMultiGetArgs{}
}

var RrdbMultiGetArgs_Request_DEFAULT *MultiGetRequest
func (p *RrdbMultiGetArgs) GetRequest() *MultiGetRequest {
  if !p.IsSetRequest() {
    return RrdbMultiGetArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RrdbMultiGetArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RrdbMultiGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbMultiGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &MultiGetRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RrdbMultiGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multi_get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbMultiGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RrdbMultiGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbMultiGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbMultiGetResult struct {
  Success *MultiGetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbMultiGetResult() *RrdbMultiGetResult {
  return &RrdbMultiGetResult{}
}

var RrdbMultiGetResult_Success_DEFAULT *MultiGetResponse
func (p *RrdbMultiGetResult) GetSuccess() *MultiGetResponse {
  if !p.IsSetSuccess() {
    return RrdbMultiGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbMultiGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbMultiGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbMultiGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MultiGetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbMultiGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multi_get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbMultiGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbMultiGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbMultiGetResult(%+v)", *p)
}

// Attributes:
//  - Request
type RrdbBatchGetArgs struct {
  Request *BatchGetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRrdbBatchGetArgs() *RrdbBatchGetArgs {
  return &RrdbBatchGetArgs{}
}

var RrdbBatchGetArgs_Request_DEFAULT *BatchGetRequest
func (p *RrdbBatchGetArgs) GetRequest() *BatchGetRequest {
  if !p.IsSetRequest() {
    return RrdbBatchGetArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RrdbBatchGetArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RrdbBatchGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbBatchGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &BatchGetRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RrdbBatchGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "batch_get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbBatchGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RrdbBatchGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbBatchGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbBatchGetResult struct {
  Success *BatchGetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbBatchGetResult() *RrdbBatchGetResult {
  return &RrdbBatchGetResult{}
}

var RrdbBatchGetResult_Success_DEFAULT *BatchGetResponse
func (p *RrdbBatchGetResult) GetSuccess() *BatchGetResponse {
  if !p.IsSetSuccess() {
    return RrdbBatchGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbBatchGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbBatchGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbBatchGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &BatchGetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbBatchGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "batch_get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbBatchGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbBatchGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbBatchGetResult(%+v)", *p)
}

// Attributes:
//  - HashKey
type RrdbSortkeyCountArgs struct {
  HashKey *base.Blob `thrift:"hash_key,1" db:"hash_key" json:"hash_key"`
}

func NewRrdbSortkeyCountArgs() *RrdbSortkeyCountArgs {
  return &RrdbSortkeyCountArgs{}
}

var RrdbSortkeyCountArgs_HashKey_DEFAULT *base.Blob
func (p *RrdbSortkeyCountArgs) GetHashKey() *base.Blob {
  if !p.IsSetHashKey() {
    return RrdbSortkeyCountArgs_HashKey_DEFAULT
  }
return p.HashKey
}
func (p *RrdbSortkeyCountArgs) IsSetHashKey() bool {
  return p.HashKey != nil
}

func (p *RrdbSortkeyCountArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbSortkeyCountArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.HashKey = &base.Blob{}
  if err := p.HashKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HashKey), err)
  }
  return nil
}

func (p *RrdbSortkeyCountArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortkey_count_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbSortkeyCountArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hash_key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash_key: ", p), err) }
  if err := p.HashKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HashKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash_key: ", p), err) }
  return err
}

func (p *RrdbSortkeyCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbSortkeyCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbSortkeyCountResult struct {
  Success *CountResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbSortkeyCountResult() *RrdbSortkeyCountResult {
  return &RrdbSortkeyCountResult{}
}

var RrdbSortkeyCountResult_Success_DEFAULT *CountResponse
func (p *RrdbSortkeyCountResult) GetSuccess() *CountResponse {
  if !p.IsSetSuccess() {
    return RrdbSortkeyCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbSortkeyCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbSortkeyCountResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbSortkeyCountResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CountResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbSortkeyCountResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortkey_count_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbSortkeyCountResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbSortkeyCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbSortkeyCountResult(%+v)", *p)
}

// Attributes:
//  - Key
type RrdbTTLArgs struct {
  Key *base.Blob `thrift:"key,1" db:"key" json:"key"`
}

func NewRrdbTTLArgs() *RrdbTTLArgs {
  return &RrdbTTLArgs{}
}

var RrdbTTLArgs_Key_DEFAULT *base.Blob
func (p *RrdbTTLArgs) GetKey() *base.Blob {
  if !p.IsSetKey() {
    return RrdbTTLArgs_Key_DEFAULT
  }
return p.Key
}
func (p *RrdbTTLArgs) IsSetKey() bool {
  return p.Key != nil
}

func (p *RrdbTTLArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbTTLArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Key = &base.Blob{}
  if err := p.Key.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
  }
  return nil
}

func (p *RrdbTTLArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ttl_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbTTLArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := p.Key.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *RrdbTTLArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbTTLArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbTTLResult struct {
  Success *TTLResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbTTLResult() *RrdbTTLResult {
  return &RrdbTTLResult{}
}

var RrdbTTLResult_Success_DEFAULT *TTLResponse
func (p *RrdbTTLResult) GetSuccess() *TTLResponse {
  if !p.IsSetSuccess() {
    return RrdbTTLResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbTTLResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbTTLResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbTTLResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TTLResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbTTLResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ttl_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbTTLResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbTTLResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbTTLResult(%+v)", *p)
}

// Attributes:
//  - Request
type RrdbGetScannerArgs struct {
  Request *GetScannerRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRrdbGetScannerArgs() *RrdbGetScannerArgs {
  return &RrdbGetScannerArgs{}
}

var RrdbGetScannerArgs_Request_DEFAULT *GetScannerRequest
func (p *RrdbGetScannerArgs) GetRequest() *GetScannerRequest {
  if !p.IsSetRequest() {
    return RrdbGetScannerArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RrdbGetScannerArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RrdbGetScannerArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbGetScannerArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetScannerRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RrdbGetScannerArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_scanner_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbGetScannerArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RrdbGetScannerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbGetScannerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbGetScannerResult struct {
  Success *ScanResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbGetScannerResult() *RrdbGetScannerResult {
  return &RrdbGetScannerResult{}
}

var RrdbGetScannerResult_Success_DEFAULT *ScanResponse
func (p *RrdbGetScannerResult) GetSuccess() *ScanResponse {
  if !p.IsSetSuccess() {
    return RrdbGetScannerResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbGetScannerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbGetScannerResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbGetScannerResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ScanResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbGetScannerResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_scanner_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbGetScannerResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbGetScannerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbGetScannerResult(%+v)", *p)
}

// Attributes:
//  - Request
type RrdbScanArgs struct {
  Request *ScanRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRrdbScanArgs() *RrdbScanArgs {
  return &RrdbScanArgs{}
}

var RrdbScanArgs_Request_DEFAULT *ScanRequest
func (p *RrdbScanArgs) GetRequest() *ScanRequest {
  if !p.IsSetRequest() {
    return RrdbScanArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RrdbScanArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RrdbScanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbScanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &ScanRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RrdbScanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "scan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbScanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RrdbScanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbScanArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RrdbScanResult struct {
  Success *ScanResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRrdbScanResult() *RrdbScanResult {
  return &RrdbScanResult{}
}

var RrdbScanResult_Success_DEFAULT *ScanResponse
func (p *RrdbScanResult) GetSuccess() *ScanResponse {
  if !p.IsSetSuccess() {
    return RrdbScanResult_Success_DEFAULT
  }
return p.Success
}
func (p *RrdbScanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RrdbScanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbScanResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ScanResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RrdbScanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "scan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbScanResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RrdbScanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbScanResult(%+v)", *p)
}

// Attributes:
//  - ContextID
type RrdbClearScannerArgs struct {
  ContextID int64 `thrift:"context_id,1" db:"context_id" json:"context_id"`
}

func NewRrdbClearScannerArgs() *RrdbClearScannerArgs {
  return &RrdbClearScannerArgs{}
}


func (p *RrdbClearScannerArgs) GetContextID() int64 {
  return p.ContextID
}
func (p *RrdbClearScannerArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RrdbClearScannerArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ContextID = v
}
  return nil
}

func (p *RrdbClearScannerArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clear_scanner_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RrdbClearScannerArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "context_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ContextID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.context_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context_id: ", p), err) }
  return err
}

func (p *RrdbClearScannerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RrdbClearScannerArgs(%+v)", *p)
}


type Meta interface {
  // Parameters:
  //  - Query
  QueryCfg(ctx context.Context, query *replication.QueryCfgRequest) (_r *replication.QueryCfgResponse, _err error)
}

type MetaClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewMetaClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MetaClient {
  return &MetaClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMetaClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MetaClient {
  return &MetaClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMetaClient(c thrift.TClient) *MetaClient {
  return &MetaClient{
    c: c,
  }
}

func (p *MetaClient) Client_() thrift.TClient {
  return p.c
}

func (p *MetaClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *MetaClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Query
func (p *MetaClient) QueryCfg(ctx context.Context, query *replication.QueryCfgRequest) (_r *replication.QueryCfgResponse, _err error) {
  var _args188 MetaQueryCfgArgs
  _args188.Query = query
  var _result190 MetaQueryCfgResult
  var _meta189 thrift.ResponseMeta
  _meta189, _err = p.Client_().Call(ctx, "query_cfg", &_args188, &_result190)
  p.SetLastResponseMeta_(_meta189)
  if _err != nil {
    return
  }
  if _ret191 := _result190.GetSuccess(); _ret191 != nil {
    return _ret191, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "query_cfg failed: unknown result")
}

type MetaProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Meta
}

func (p *MetaProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MetaProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MetaProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMetaProcessor(handler Meta) *MetaProcessor {

  self192 := &MetaProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self192.processorMap["query_cfg"] = &metaProcessorQueryCfg{handler:handler}
return self192
}

func (p *MetaProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x193 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x193.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x193

}

type metaProcessorQueryCfg struct {
  handler Meta
}

func (p *metaProcessorQueryCfg) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err194 error
  args := MetaQueryCfgArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "query_cfg", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaQueryCfgResult{}
  if retval, err2 := p.handler.QueryCfg(ctx, args.Query); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc195 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_cfg: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "query_cfg", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err194 = thrift.WrapTException(err2)
    }
    if err2 := _exc195.Write(ctx, oprot); _write_err194 == nil && err2 != nil {
      _write_err194 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err194 == nil && err2 != nil {
      _write_err194 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err194 == nil && err2 != nil {
      _write_err194 = thrift.WrapTException(err2)
    }
    if _write_err194 != nil {
      return false, thrift.WrapTException(_write_err194)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "query_cfg", thrift.REPLY, seqId); err2 != nil {
    _write_err194 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err194 == nil && err2 != nil {
    _write_err194 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err194 == nil && err2 != nil {
    _write_err194 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err194 == nil && err2 != nil {
    _write_err194 = thrift.WrapTException(err2)
  }
  if _write_err194 != nil {
    return false, thrift.WrapTException(_write_err194)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Query
type MetaQueryCfgArgs struct {
  Query *replication.QueryCfgRequest `thrift:"query,1" db:"query" json:"query"`
}

func NewMetaQueryCfgArgs() *MetaQueryCfgArgs {
  return &MetaQueryCfgArgs{}
}

var MetaQueryCfgArgs_Query_DEFAULT *replication.QueryCfgRequest
func (p *MetaQueryCfgArgs) GetQuery() *replication.QueryCfgRequest {
  if !p.IsSetQuery() {
    return MetaQueryCfgArgs_Query_DEFAULT
  }
return p.Query
}
func (p *MetaQueryCfgArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *MetaQueryCfgArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaQueryCfgArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Query = &replication.QueryCfgRequest{}
  if err := p.Query.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *MetaQueryCfgArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_cfg_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaQueryCfgArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "query", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := p.Query.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *MetaQueryCfgArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaQueryCfgArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaQueryCfgResult struct {
  Success *replication.QueryCfgResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaQueryCfgResult() *MetaQueryCfgResult {
  return &MetaQueryCfgResult{}
}

var MetaQueryCfgResult_Success_DEFAULT *replication.QueryCfgResponse
func (p *MetaQueryCfgResult) GetSuccess() *replication.QueryCfgResponse {
  if !p.IsSetSuccess() {
    return MetaQueryCfgResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaQueryCfgResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaQueryCfgResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaQueryCfgResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &replication.QueryCfgResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaQueryCfgResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_cfg_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaQueryCfgResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaQueryCfgResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaQueryCfgResult(%+v)", *p)
}


